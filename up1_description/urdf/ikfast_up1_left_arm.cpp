/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-08-24 16:11:23.924481
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[2]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.99999999995)*x0);
x11=((9.9999999995e-6)*x1);
x12=((0.499999825156179)*x9);
x13=((0.866025504730542)*x9);
x14=((0.138)*x2);
x15=(x2*x3);
x16=((-0.138)*x4);
x17=(x3*x6);
x18=(x6*x7);
x19=(x2*x7);
x20=(x3*x4);
x21=((((-1.0)*x10))+x11);
x22=((((-1.0)*x11))+x10);
x23=((((0.99999999995)*x1))+(((9.9999999995e-6)*x0)));
x24=((-1.0)*x23);
x25=((((1.51899999992405e-6)*x0))+(((0.151899999992405)*x1)));
x26=((((0.0764099999961795)*x1))+(((7.64099999961795e-7)*x0)));
x27=((-0.138)*x3*x5);
x28=(x18*x4);
x29=(x5*x7*x8);
x30=((0.07641)*x21);
x31=(x21*x5);
x32=(x24*x3);
x33=(x23*x5);
x34=(x25*x7);
x35=((((-0.138)*x17))+(((-1.0)*x14*x4*x7)));
x36=(x33+((x20*x21)));
x37=(x31+((x20*x24)));
x38=(((x30*x5))+(((0.07641)*x20*x24)));
x39=(x37*x6);
x40=(((x16*x22))+((x24*x27)));
x41=(x2*x38);
x42=(x40*x8);
x43=(((x14*x37))+(((0.138)*x18*x23)));
x44=(x43*x9);
eetrans[0]=((0.0053)+((x9*((((x14*x36))+(((0.138)*x18*x22))))))+((x18*(((((0.0764099999961795)*x0))+(((-7.64099999961795e-7)*x1))))))+((x7*(((((-1.51899999992405e-6)*x1))+(((0.151899999992405)*x0))))))+((x8*((((x21*x27))+((x16*x24))))))+((x2*((((x20*x30))+(((0.07641)*x33)))))));
eetrans[1]=((0.109039987694492)+(((0.0382049866401836)*x17))+(((-1.0)*x12*x35))+(((0.0382049866401836)*x19*x4))+(((-0.866025504730542)*x41))+(((-0.866025504730542)*x42))+(((-0.866025504730542)*x34))+(((0.0759499734412235)*x3))+(((-1.0)*x13*x43))+(((-0.0689999758715527)*x29))+(((-0.866025504730542)*x18*x26)));
eetrans[2]=((0.131350875022936)+(((0.0661730088164608)*x19*x4))+(((0.0661730088164608)*x17))+((x12*x43))+(((0.499999825156179)*x18*x26))+(((-0.119511519652815)*x29))+(((-1.0)*x13*x35))+(((0.499999825156179)*x41))+(((0.499999825156179)*x42))+(((0.499999825156179)*x34))+(((0.131549274168569)*x3)));
eerot[0]=(((x19*x21))+((x36*x6)));
eerot[1]=((((-0.499999825156179)*x15))+(((0.499999825156179)*x28))+(((-0.866025504730542)*x19*x24))+(((-0.866025504730542)*x39)));
eerot[2]=((((0.866025504730542)*x28))+(((0.499999825156179)*x19*x24))+(((-0.866025504730542)*x15))+(((0.499999825156179)*x39)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((-0.0053)+px);
new_r01=((((-0.866025504730542)*r01))+(((0.499999825156179)*r02)));
new_py=((0.0287559958333556)+(((-0.866025504730542)*py))+(((0.499999825156179)*pz)));
new_r02=((((-0.866025504730542)*r02))+(((-0.499999825156179)*r01)));
new_pz=((0.168273182620814)+(((-0.866025504730542)*pz))+(((-0.499999825156179)*py)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[162], zeror[48];
int numroots;;
IkReal x45=((9.9999999995e-6)*r00);
IkReal x46=((0.99999999995)*r01);
IkReal x47=pz*pz;
IkReal x48=px*px;
IkReal x49=py*py;
IkReal x50=((1.36179753773191e-8)*r01);
IkReal x51=((0.00136179753773191)*r00);
IkReal x52=((0.02108916)*pz);
IkReal x53=((1.36179753773191e-8)*r00);
IkReal x54=((0.00136179753773191)*r01);
IkReal x55=(px*r00);
IkReal x56=(pz*r02);
IkReal x57=(py*r01);
IkReal x58=((0.1519)*r02);
IkReal x59=((3.20344340383983e-8)*r01);
IkReal x60=((0.00320344340383983)*r00);
IkReal x61=((0.0419244)*pz);
IkReal x62=((0.0838487999958076)*px);
IkReal x63=((8.38487999958076e-7)*py);
IkReal x64=((0.006406886808)*r02);
IkReal x65=((0.00640688680767965)*r01);
IkReal x66=((6.40688680767965e-8)*r00);
IkReal x67=((1.80887809990956e-8)*r00);
IkReal x68=((0.00180887809990956)*r01);
IkReal x69=((3.61775619981911e-8)*r01);
IkReal x70=((0.00361775619981911)*r00);
IkReal x71=((0.0210891599989455)*px);
IkReal x72=((2.10891599989455e-7)*py);
IkReal x73=((0.0050065188222)*r02);
IkReal x74=((0.04217832)*pz);
IkReal x75=((0.0100130376438993)*r00);
IkReal x76=((1.00130376438993e-7)*r01);
IkReal x77=((3.9999999998)*r01);
IkReal x78=((3.9999999998e-5)*r00);
IkReal x79=((0.00272359507546382)*r01);
IkReal x80=((2.72359507546382e-8)*r00);
IkReal x81=((2.72359507546382e-8)*r01);
IkReal x82=((0.00272359507546382)*r00);
IkReal x83=((0.0128137736153593)*r00);
IkReal x84=((1.28137736153593e-7)*r01);
IkReal x85=((7.23551239963822e-8)*r00);
IkReal x86=((0.00723551239963822)*r01);
IkReal x87=((0.0421783199978911)*py);
IkReal x88=((4.21783199978911e-7)*px);
IkReal x89=(px*r02);
IkReal x90=((8.43566399957822e-7)*py);
IkReal x91=(pz*r01);
IkReal x92=((0.1379999999931)*r00);
IkReal x93=(pz*r00);
IkReal x94=(px*py);
IkReal x95=((1.9999999999)*r00);
IkReal x96=(py*r02);
IkReal x97=(px*r01);
IkReal x98=((0.276)*r02);
IkReal x99=(py*r00);
IkReal x100=((2.759999999862e-6)*pz);
IkReal x101=((4.0)*r02);
IkReal x102=((0.2759999999862)*pz);
IkReal x103=((1.9999999999e-5)*r01);
IkReal x104=((0.5519999999724)*pz);
IkReal x105=((5.519999999724e-6)*pz);
IkReal x106=((((-1.0)*x45))+x46);
IkReal x107=((((-1.0)*x46))+x45);
IkReal x108=((0.0419243999979038)*x89);
IkReal x109=((4.19243999979038e-7)*x96);
IkReal x110=((4.19243999979038e-7)*x91);
IkReal x111=((0.0419243999979038)*x93);
IkReal x112=((0.0419243999979038)*x91);
IkReal x113=((4.19243999979038e-7)*x89);
IkReal x114=((4.19243999979038e-7)*x93);
IkReal x115=((0.0419243999979038)*x96);
IkReal x116=(r02*x72);
IkReal x117=(r02*x71);
IkReal x118=((0.0210891599989455)*x93);
IkReal x119=((0.138)*x48);
IkReal x120=((0.138)*x47);
IkReal x121=((2.10891599989455e-7)*x91);
IkReal x122=((0.138)*x49);
IkReal x123=((4.21783199978911e-7)*x93);
IkReal x124=(r02*x87);
IkReal x125=((0.0421783199978911)*x91);
IkReal x126=(r02*x88);
IkReal x127=((0.6076)*x97);
IkReal x128=((0.6076)*x99);
IkReal x129=((0.30379999998481)*x96);
IkReal x130=((3.0379999998481e-6)*x93);
IkReal x131=((0.30379999998481)*x91);
IkReal x132=((3.0379999998481e-6)*x89);
IkReal x133=((0.60759999996962)*x89);
IkReal x134=((6.0759999996962e-6)*x96);
IkReal x135=((6.0759999996962e-6)*x91);
IkReal x136=((0.60759999996962)*x93);
IkReal x137=((0.0419244)*x55);
IkReal x138=((0.0419244)*x57);
IkReal x139=((0.0419244)*x56);
IkReal x140=(x88+(((-1.0)*x87)));
IkReal x141=((0.0838487999958076)*x96);
IkReal x142=((8.38487999958076e-7)*x93);
IkReal x143=((0.0838487999958076)*x91);
IkReal x144=((8.38487999958076e-7)*x89);
IkReal x145=(r02*x63);
IkReal x146=(r02*x62);
IkReal x147=((0.0838487999958076)*x93);
IkReal x148=((8.38487999958076e-7)*x91);
IkReal x149=((((-1.67697599991615e-6)*px))+(((0.167697599991615)*py)));
IkReal x150=((0.0843566399957822)*x93);
IkReal x151=((8.43566399957822e-7)*x91);
IkReal x152=(r02*x90);
IkReal x153=((0.0843566399957822)*x89);
IkReal x154=((1.21519999993924)*x96);
IkReal x155=((1.21519999993924e-5)*x93);
IkReal x156=((1.21519999993924)*x91);
IkReal x157=((1.21519999993924e-5)*x89);
IkReal x158=(x87+(((-1.0)*x88)));
IkReal x159=((-4.0)*r02);
IkReal x160=((0.003203443404)+x52);
IkReal x161=((-0.0013617975378)+x61);
IkReal x162=(r01*x48);
IkReal x163=(r01*x47);
IkReal x164=(r00*x47);
IkReal x165=(r01*x49);
IkReal x166=(r00*x48);
IkReal x167=(r00*x49);
IkReal x168=(x103+x95);
IkReal x169=((1.379999999931e-6)*x163);
IkReal x170=(x47*x92);
IkReal x171=((1.379999999931e-6)*x162);
IkReal x172=(x49*x92);
IkReal x173=((2.759999999862e-6)*py*x56);
IkReal x174=((1.379999999931e-6)*x165);
IkReal x175=((2.759999999862e-6)*py*x55);
IkReal x176=((0.2759999999862)*px*x56);
IkReal x177=((0.2759999999862)*px*x57);
IkReal x178=(x48*x92);
IkReal x179=((1.379999999931e-6)*x164);
IkReal x180=((0.2759999999862)*py*x55);
IkReal x181=((0.1379999999931)*x165);
IkReal x182=((0.2759999999862)*py*x56);
IkReal x183=((1.379999999931e-6)*x167);
IkReal x184=((0.1379999999931)*x162);
IkReal x185=((1.379999999931e-6)*x166);
IkReal x186=((2.759999999862e-6)*px*x56);
IkReal x187=((2.759999999862e-6)*px*x57);
IkReal x188=((0.1379999999931)*x163);
IkReal x189=((1.9999999999e-5)*px*x57);
IkReal x190=(x46*x48);
IkReal x191=((1.9999999999e-5)*px*x56);
IkReal x192=(x46*x47);
IkReal x193=(x45*x48);
IkReal x194=((1.9999999999)*py*x56);
IkReal x195=(x45*x47);
IkReal x196=(x46*x49);
IkReal x197=(x45*x49);
IkReal x198=((1.9999999999)*py*x55);
IkReal x199=(x49*x95);
IkReal x200=(x47*x95);
IkReal x201=(x103*x48);
IkReal x202=(x103*x47);
IkReal x203=(x48*x95);
IkReal x204=((3.9999999998)*px*x56);
IkReal x205=(x103*x49);
IkReal x206=((3.9999999998e-5)*py*x56);
IkReal x207=((3.9999999998)*px*x57);
IkReal x208=((3.9999999998e-5)*py*x55);
IkReal x209=((0.276)*pz*x55);
IkReal x210=((0.276)*pz*x57);
IkReal x211=(r02*x120);
IkReal x212=(r02*x119);
IkReal x213=(r02*x122);
IkReal x214=((0.2759999999862)*x164);
IkReal x215=((2.759999999862e-6)*x162);
IkReal x216=((2.759999999862e-6)*x163);
IkReal x217=((0.2759999999862)*x167);
IkReal x218=((0.5519999999724)*px*x57);
IkReal x219=((5.519999999724e-6)*py*x56);
IkReal x220=((0.2759999999862)*x166);
IkReal x221=((5.519999999724e-6)*py*x55);
IkReal x222=((0.5519999999724)*px*x56);
IkReal x223=((2.759999999862e-6)*x165);
IkReal x224=((-1.0)*x168);
IkReal x225=((0.2759999999862)*x163);
IkReal x226=((5.519999999724e-6)*px*x56);
IkReal x227=((5.519999999724e-6)*px*x57);
IkReal x228=((2.759999999862e-6)*x166);
IkReal x229=((0.2759999999862)*x162);
IkReal x230=((0.5519999999724)*py*x55);
IkReal x231=((2.759999999862e-6)*x167);
IkReal x232=((2.759999999862e-6)*x164);
IkReal x233=((0.2759999999862)*x165);
IkReal x234=((0.5519999999724)*py*x56);
IkReal x235=((7.9999999996e-5)*px*x57);
IkReal x236=(x48*x78);
IkReal x237=(x48*x77);
IkReal x238=(x47*x77);
IkReal x239=((7.9999999996e-5)*px*x56);
IkReal x240=(x49*x78);
IkReal x241=((7.9999999996)*py*x55);
IkReal x242=(x49*x77);
IkReal x243=((7.9999999996)*py*x56);
IkReal x244=(x47*x78);
IkReal x245=((((0.0843566399957822)*px))+x90);
IkReal x246=(x82+x81);
IkReal x247=(x62+x63);
IkReal x248=(x72+x71);
IkReal x249=(x83+x84);
IkReal x250=(x59+x60);
IkReal x251=(x76+x75);
IkReal x252=(x124+x123);
IkReal x253=(x117+x116);
IkReal x254=(x145+x146);
IkReal x255=(x131+x132);
IkReal x256=(x121+x118);
IkReal x257=(x151+x150);
IkReal x258=(x108+x109);
IkReal x259=(x130+x129);
IkReal x260=(x135+x136);
IkReal x261=(x113+x112);
IkReal x262=(x126+x125);
IkReal x263=(x143+x144);
IkReal x264=(x55+x57+x56);
IkReal x265=(x153+x152);
IkReal x266=(x134+x133);
IkReal x267=(x115+x114);
IkReal x268=(x141+x142);
IkReal x269=(x147+x148);
IkReal x270=(x157+x156);
IkReal x271=(x155+x154);
IkReal x272=(x252+x66);
IkReal x273=(x262+x65);
IkReal x274=(x262+x66);
IkReal x275=(x252+x65);
IkReal x276=(x212+x213);
IkReal x277=(x122+x120+x119);
IkReal x278=(x137+x139+x138);
IkReal x279=(x210+x211+x209+x73);
IkReal x280=(x273+(((-1.0)*x272)));
IkReal x281=(x275+(((-1.0)*x274)));
IkReal x282=(x214+x215+x216+x217);
IkReal x283=(x199+x202+x201+x200);
IkReal x284=(x260+x283);
IkReal x285=(x266+x283);
IkReal x286=(x193+x192+x191+x190+x189+x67);
IkReal x287=(x198+x197+x196+x195+x194+x68);
IkReal x288=(x184+x185+x186+x187+x188+x54);
IkReal x289=(x232+x233+x230+x231+x234+x80);
IkReal x290=(x229+x228+x225+x227+x226+x79);
IkReal x291=(x179+x180+x181+x182+x183+x53);
IkReal x292=(x243+x242+x241+x240+x244+x86);
IkReal x293=(x238+x239+x236+x237+x235+x85);
IkReal x294=(x218+x219+x221+x220+x223+x222);
IkReal x295=(x178+x173+x175+x174+x177+x176);
IkReal x296=(x171+x170+x172+x169+x111+x110+x51+x50);
IkReal x297=(x259+x287);
IkReal x298=(x255+x286);
IkReal x299=(x255+x287);
IkReal x300=(x259+x286);
IkReal x301=(x207+x206+x205+x204+x203+x208+x70+x69);
IkReal x302=(x301+x266);
IkReal x303=(x301+x260);
IkReal x304=((((2.00260752877987e-7)*r00))+(((-0.5519999999724)*x165))+(((0.5519999999724)*x162))+(((0.5519999999724)*x163))+(((-5.519999999724e-6)*x167))+(((-5.519999999724e-6)*x164))+(((1.1039999999448e-5)*px*x57))+(((1.1039999999448e-5)*px*x56))+(((5.519999999724e-6)*x166))+(((-0.0200260752877987)*r01))+(((-1.1039999999448)*py*x55))+(((-1.1039999999448)*py*x56)));
IkReal x305=(x302+(((-1.0)*x284)));
IkReal x306=(x285+(((-1.0)*x303)));
op[0]=x106;
op[1]=x224;
op[2]=x107;
op[3]=0;
op[4]=x159;
op[5]=0;
op[6]=x106;
op[7]=x168;
op[8]=x107;
op[9]=((((-1.0)*x296))+x160+x258+x295);
op[10]=(x291+x267+(((-1.0)*x288))+(((-1.0)*x261)));
op[11]=0;
op[12]=((((-1.0)*x49*x98))+(((-1.0)*x48*x98))+(((-0.0027235950756)*r02))+(((-0.0421783199978911)*px))+(((-4.21783199978911e-7)*py))+((x47*x98))+(((0.552)*pz*x55))+(((0.552)*pz*x57)));
op[13]=((((-0.0838488)*x99))+(((0.0838488)*x97)));
op[14]=0;
op[15]=((0.003203443404)+(((-1.0)*x295))+(((-1.0)*x111))+(((-1.0)*x110))+x171+x170+x172+x169+x258+x51+x50+(((-1.0)*x52)));
op[16]=(x291+x261+(((-1.0)*x288))+(((-1.0)*x267)));
op[17]=0;
op[18]=(x264+x58);
op[19]=0;
op[20]=0;
op[21]=((((-0.30379999998481)*r00))+(((-3.0379999998481e-6)*r01)));
op[22]=0;
op[23]=0;
op[24]=(x264+(((-1.0)*x58)));
op[25]=0;
op[26]=0;
op[27]=((-0.0013617975378)+x256+x250+(((-1.0)*x277))+(((-1.0)*x61))+(((-1.0)*x253)));
op[28]=x280;
op[29]=((-0.0013617975378)+x253+(((-1.0)*x277))+(((-1.0)*x61))+(((-1.0)*x250))+(((-1.0)*x256)));
op[30]=(x247+x64);
op[31]=((((-0.08435664)*x97))+(((0.08435664)*x99)));
op[32]=(x247+(((-1.0)*x64)));
op[33]=(x161+x256+(((-1.0)*x277))+(((-1.0)*x250))+(((-1.0)*x253)));
op[34]=x281;
op[35]=(x161+x250+x253+(((-1.0)*x277))+(((-1.0)*x256)));
op[36]=((((-1.0)*x297))+x298);
op[37]=x305;
op[38]=((((-1.0)*x298))+x297);
op[39]=((((-1.0)*x127))+x128);
op[40]=(((x101*x47))+(((-1.0)*x101*x49))+(((-1.0)*x101*x48))+(((8.0)*pz*x57))+(((8.0)*pz*x55))+(((0.0072355124)*r02)));
op[41]=((((-1.0)*x128))+x127);
op[42]=((((-1.0)*x299))+x300);
op[43]=x306;
op[44]=(x299+(((-1.0)*x300)));
op[45]=(x278+x279+(((-1.0)*x276))+(((-1.0)*x248)));
op[46]=x140;
op[47]=(x278+x279+x248+(((-1.0)*x276)));
op[48]=((((-1.0)*x74))+(((-1.0)*x294))+x282+(((-1.0)*x251)));
op[49]=0;
op[50]=((((-1.0)*x294))+x282+x74+(((-1.0)*x251)));
op[51]=(x276+x278+x248+(((-1.0)*x279)));
op[52]=x140;
op[53]=(x276+x278+(((-1.0)*x279))+(((-1.0)*x248)));
op[54]=x224;
op[55]=((((-1.0)*x77))+x78);
op[56]=x168;
op[57]=0;
op[58]=0;
op[59]=0;
op[60]=x224;
op[61]=((((-1.0)*x78))+x77);
op[62]=x168;
op[63]=((((-1.0)*x290))+x268+x289+(((-1.0)*x263)));
op[64]=((((-1.0)*x294))+x269+x246+x282+(((-1.0)*x254)));
op[65]=0;
op[66]=((((-0.0843566399957822)*py))+(((8.43566399957822e-7)*px)));
op[67]=0;
op[68]=0;
op[69]=(x290+x268+(((-1.0)*x289))+(((-1.0)*x263)));
op[70]=((((-1.0)*x294))+x254+x246+x282+(((-1.0)*x269)));
op[71]=0;
op[72]=0;
op[73]=0;
op[74]=0;
op[75]=((((-0.60759999996962)*r01))+(((6.0759999996962e-6)*r00)));
op[76]=0;
op[77]=0;
op[78]=0;
op[79]=0;
op[80]=0;
op[81]=x280;
op[82]=(x265+(((-1.0)*x249))+(((-1.0)*x257)));
op[83]=(x272+(((-1.0)*x273)));
op[84]=x149;
op[85]=0;
op[86]=x149;
op[87]=(x274+(((-1.0)*x275)));
op[88]=(x257+(((-1.0)*x249))+(((-1.0)*x265)));
op[89]=x281;
op[90]=x305;
op[91]=((((-1.0)*x293))+x292+x271+(((-1.0)*x270)));
op[92]=(x284+(((-1.0)*x302)));
op[93]=0;
op[94]=0;
op[95]=0;
op[96]=(x303+(((-1.0)*x285)));
op[97]=((((-1.0)*x292))+x293+x271+(((-1.0)*x270)));
op[98]=x306;
op[99]=x140;
op[100]=x245;
op[101]=x158;
op[102]=x304;
op[103]=0;
op[104]=x304;
op[105]=x158;
op[106]=x245;
op[107]=x140;
op[108]=x107;
op[109]=x168;
op[110]=x106;
op[111]=0;
op[112]=x159;
op[113]=0;
op[114]=x107;
op[115]=x224;
op[116]=x106;
op[117]=((((-1.0)*x295))+x160+x296+(((-1.0)*x258)));
IkReal x307=px*px;
IkReal x308=pz*pz;
IkReal x309=py*py;
IkReal x310=((0.00136179753773191)*r01);
IkReal x311=((1.36179753773191e-8)*r00);
IkReal x312=(px*r00);
IkReal x313=(pz*r02);
IkReal x314=(py*r01);
IkReal x315=((0.1519)*r02);
IkReal x316=((3.20344340383983e-8)*r01);
IkReal x317=((0.00320344340383983)*r00);
IkReal x318=((0.0419244)*pz);
IkReal x319=((0.0838487999958076)*px);
IkReal x320=((0.006406886808)*r02);
IkReal x321=((8.38487999958076e-7)*py);
IkReal x322=((6.40688680767965e-8)*r00);
IkReal x323=((0.00640688680767965)*r01);
IkReal x324=((0.00180887809990956)*r01);
IkReal x325=((1.80887809990956e-8)*r00);
IkReal x326=((3.61775619981911e-8)*r01);
IkReal x327=((0.00361775619981911)*r00);
IkReal x328=((0.0050065188222)*r02);
IkReal x329=((0.0210891599989455)*px);
IkReal x330=((2.10891599989455e-7)*py);
IkReal x331=((0.0100130376438993)*r00);
IkReal x332=((0.04217832)*pz);
IkReal x333=((1.00130376438993e-7)*r01);
IkReal x334=(px*r02);
IkReal x335=(pz*r01);
IkReal x336=(pz*r00);
IkReal x337=(px*py);
IkReal x338=((1.9999999999)*r00);
IkReal x339=(py*r02);
IkReal x340=((1.9999999999e-5)*r01);
IkReal x341=(px*r01);
IkReal x342=((0.276)*r02);
IkReal x343=(py*r00);
IkReal x344=((2.759999999862e-6)*pz);
IkReal x345=((4.0)*r02);
IkReal x346=((0.2759999999862)*pz);
IkReal x347=((4.19243999979038e-7)*x336);
IkReal x348=((0.0419243999979038)*x339);
IkReal x349=((0.0419243999979038)*x335);
IkReal x350=((4.19243999979038e-7)*x334);
IkReal x351=((0.0210891599989455)*x336);
IkReal x352=((2.10891599989455e-7)*x335);
IkReal x353=(r02*x330);
IkReal x354=(r02*x329);
IkReal x355=((0.138)*x307);
IkReal x356=((0.138)*x308);
IkReal x357=((0.138)*x309);
IkReal x358=((0.0421783199978911)*x335);
IkReal x359=((4.21783199978911e-7)*x334);
IkReal x360=((4.21783199978911e-7)*x336);
IkReal x361=((0.0421783199978911)*x339);
IkReal x362=((0.6076)*x341);
IkReal x363=((0.6076)*x343);
IkReal x364=((0.30379999998481)*x335);
IkReal x365=((3.0379999998481e-6)*x334);
IkReal x366=((0.30379999998481)*x339);
IkReal x367=((3.0379999998481e-6)*x336);
IkReal x368=((6.0759999996962e-6)*x335);
IkReal x369=((0.60759999996962)*x336);
IkReal x370=((0.60759999996962)*x334);
IkReal x371=((6.0759999996962e-6)*x339);
IkReal x372=((0.0419244)*x312);
IkReal x373=((0.0419244)*x314);
IkReal x374=((0.0419244)*x313);
IkReal x375=((((-4.21783199978911e-7)*px))+(((0.0421783199978911)*py)));
IkReal x376=(r01*x308);
IkReal x377=(r00*x308);
IkReal x378=(r00*x307);
IkReal x379=(r01*x309);
IkReal x380=(r00*x309);
IkReal x381=(r01*x307);
IkReal x382=((0.1379999999931)*x381);
IkReal x383=((1.379999999931e-6)*x378);
IkReal x384=((2.759999999862e-6)*px*x313);
IkReal x385=((2.759999999862e-6)*px*x314);
IkReal x386=((0.1379999999931)*x376);
IkReal x387=((1.379999999931e-6)*x377);
IkReal x388=((0.2759999999862)*py*x312);
IkReal x389=((0.1379999999931)*x379);
IkReal x390=((0.2759999999862)*py*x313);
IkReal x391=((1.379999999931e-6)*x380);
IkReal x392=((1.9999999999)*py*x313);
IkReal x393=((9.9999999995e-6)*x377);
IkReal x394=((0.99999999995)*x379);
IkReal x395=((9.9999999995e-6)*x380);
IkReal x396=((1.9999999999)*py*x312);
IkReal x397=((1.9999999999e-5)*px*x314);
IkReal x398=((0.99999999995)*x381);
IkReal x399=((1.9999999999e-5)*px*x313);
IkReal x400=((0.99999999995)*x376);
IkReal x401=((9.9999999995e-6)*x378);
IkReal x402=(x307*x338);
IkReal x403=((3.9999999998)*px*x313);
IkReal x404=(x309*x340);
IkReal x405=((3.9999999998e-5)*py*x313);
IkReal x406=((3.9999999998)*px*x314);
IkReal x407=((3.9999999998e-5)*py*x312);
IkReal x408=(x309*x338);
IkReal x409=(x308*x338);
IkReal x410=(x307*x340);
IkReal x411=(x308*x340);
IkReal x412=((0.276)*pz*x312);
IkReal x413=((0.276)*pz*x314);
IkReal x414=(r02*x356);
IkReal x415=(r02*x355);
IkReal x416=(r02*x357);
IkReal x417=((0.5519999999724)*px*x314);
IkReal x418=((5.519999999724e-6)*py*x313);
IkReal x419=((0.2759999999862)*x378);
IkReal x420=((5.519999999724e-6)*py*x312);
IkReal x421=((0.5519999999724)*px*x313);
IkReal x422=((2.759999999862e-6)*x379);
IkReal x423=((0.2759999999862)*x377);
IkReal x424=((2.759999999862e-6)*x381);
IkReal x425=((2.759999999862e-6)*x376);
IkReal x426=((0.2759999999862)*x380);
IkReal x427=(x321+x319);
IkReal x428=(x330+x329);
IkReal x429=(x317+x316);
IkReal x430=(x360+x361);
IkReal x431=(x353+x354);
IkReal x432=(x351+x352);
IkReal x433=(x364+x365);
IkReal x434=(x366+x367);
IkReal x435=(x368+x369);
IkReal x436=(x350+x349);
IkReal x437=(x318+x429);
IkReal x438=(x314+x313+x312);
IkReal x439=(x371+x370);
IkReal x440=(x347+x348);
IkReal x441=(x359+x358);
IkReal x442=(x416+x415);
IkReal x443=(x355+x357+x356);
IkReal x444=(x374+x373+x372);
IkReal x445=(x328+x412+x413+x414);
IkReal x446=(x426+x425+x424+x423);
IkReal x447=(x409+x408+x410+x411);
IkReal x448=(x324+x395+x394+x396+x393+x392);
IkReal x449=(x310+x386+x384+x385+x382+x383);
IkReal x450=(x325+x397+x399+x398+x401+x400);
IkReal x451=(x311+x387+x388+x389+x391+x390);
IkReal x452=(x433+x450);
IkReal x453=(x434+x448);
IkReal x454=(x434+x450);
IkReal x455=(x433+x448);
IkReal x456=(x326+x327+x403+x402+x405+x404+x407+x406);
IkReal x457=(x333+x331+x417+x418+x419+x422+x421+x420);
op[118]=((((-1.0)*x440))+(((-1.0)*x451))+x436+x449);
op[119]=0;
op[120]=((((-1.0)*x309*x342))+(((4.21783199978911e-7)*py))+(((-0.0027235950756)*r02))+(((-1.0)*x307*x342))+(((0.552)*pz*x314))+(((0.552)*pz*x312))+((x308*x342))+(((0.0421783199978911)*px)));
op[121]=((((0.0838488)*x341))+(((-0.0838488)*x343)));
op[122]=0;
op[123]=((0.003203443404)+(((-4.19243999979038e-7)*x339))+(((0.0419243999979038)*x336))+(((0.1379999999931)*x378))+(((-1.379999999931e-6)*x376))+(((-0.1379999999931)*x377))+(((0.2759999999862)*px*x313))+(((0.2759999999862)*px*x314))+(((4.19243999979038e-7)*x335))+(((-0.1379999999931)*x380))+(((1.379999999931e-6)*x379))+(((-1.36179753773191e-8)*r01))+(((-0.0419243999979038)*x334))+(((-0.02108916)*pz))+(((-1.379999999931e-6)*x381))+(((-0.00136179753773191)*r00))+(((2.759999999862e-6)*py*x313))+(((2.759999999862e-6)*py*x312)));
op[124]=((((-1.0)*x436))+(((-1.0)*x451))+x449+x440);
op[125]=0;
op[126]=(x315+x438);
op[127]=0;
op[128]=0;
op[129]=((((0.30379999998481)*r00))+(((3.0379999998481e-6)*r01)));
op[130]=0;
op[131]=0;
op[132]=((((-1.0)*x315))+x438);
op[133]=0;
op[134]=0;
op[135]=((-0.0013617975378)+(((-1.0)*x443))+(((-1.0)*x437))+(((-1.0)*x432))+x431);
op[136]=((((-1.0)*x441))+(((-1.0)*x323))+x322+x430);
op[137]=((-0.0013617975378)+(((-1.0)*x443))+(((-1.0)*x431))+(((-1.0)*x318))+x429+x432);
op[138]=((((-1.0)*x427))+x320);
op[139]=((((0.08435664)*x343))+(((-0.08435664)*x341)));
op[140]=((((-1.0)*x427))+(((-1.0)*x320)));
op[141]=((-0.0013617975378)+(((-1.0)*x443))+(((-1.0)*x432))+x431+x437);
op[142]=((((-1.0)*x430))+(((-1.0)*x323))+x322+x441);
op[143]=((-0.0013617975378)+(((-1.0)*x443))+(((-1.0)*x431))+(((-1.0)*x429))+x318+x432);
op[144]=((((-1.0)*x452))+x453);
op[145]=((((-1.0)*x439))+(((-1.0)*x456))+x435+x447);
op[146]=((((-1.0)*x453))+x452);
op[147]=((((-1.0)*x362))+x363);
op[148]=((((-1.0)*x309*x345))+(((-1.0)*x307*x345))+(((8.0)*pz*x312))+(((8.0)*pz*x314))+((x308*x345))+(((0.0072355124)*r02)));
op[149]=((((-1.0)*x363))+x362);
op[150]=((((-1.0)*x454))+x455);
op[151]=((((-1.0)*x447))+(((-1.0)*x439))+x435+x456);
op[152]=((((-1.0)*x455))+x454);
op[153]=((((-1.0)*x442))+x428+x445+x444);
op[154]=x375;
op[155]=((((-1.0)*x442))+(((-1.0)*x428))+x445+x444);
op[156]=((((-1.0)*x446))+x457+(((-1.0)*x332)));
op[157]=0;
op[158]=((((-1.0)*x446))+x332+x457);
op[159]=((((-1.0)*x445))+(((-1.0)*x428))+x444+x442);
op[160]=x375;
op[161]=((((-1.0)*x445))+x428+x444+x442);
solvedialyticpoly12qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj1 = zeror[ij0+1], htj2 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj1)||isnan(htj2)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x458=htj0*htj0;
CheckValue<IkReal> x459=IKPowWithIntegerCheck(((1.0)+x458),-1);
if(!x459.valid){
continue;
}
cj0array[numsolutions]=((x459.value)*(((1.0)+(((-1.0)*x458)))));
CheckValue<IkReal> x460=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x460.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x460.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x461=htj1*htj1;
CheckValue<IkReal> x462=IKPowWithIntegerCheck(((1.0)+x461),-1);
if(!x462.valid){
continue;
}
cj1array[numsolutions]=((x462.value)*(((1.0)+(((-1.0)*x461)))));
CheckValue<IkReal> x463=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x463.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x463.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x464=htj2*htj2;
CheckValue<IkReal> x465=IKPowWithIntegerCheck(((1.0)+x464),-1);
if(!x465.valid){
continue;
}
cj2array[numsolutions]=((x465.value)*(((1.0)+(((-1.0)*x464)))));
CheckValue<IkReal> x466=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x466.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x466.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj1 = 1;
_nj2 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij0]-cj2array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij0]-sj2array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij1[1] = 0; _ij2[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

    j2 = j2array[ij0]; cj2 = cj2array[ij0]; sj2 = sj2array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly12qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[24*24]) = {0};
    IkReal IKFAST_ALIGNED16(A[12*12]);
    IkReal IKFAST_ALIGNED16(work[24*24*23]);
    int ipiv[12];
    int info, coeffindex;
    const int worksize=24*24*23;
    const int matrixdim = 12;
    const int matrixdim2 = 24;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 3; ++k) {
            A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 6; ++j) {
            for(int k = 0; k < 9; ++k) {
                IkReal a = matcoeffs[coeffindex+108], b = matcoeffs[coeffindex+54], c = matcoeffs[coeffindex];
                A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 3; ++k) {
                A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[24]);
    IkReal IKFAST_ALIGNED16(wi[24]);
    IkReal IKFAST_ALIGNED16(vr[24*24]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency12(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[3]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[5]/ev[2];
                    rawroots[numroots++] = ev[2]/ev[1];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[9]/ev[6];
                    rawroots[numroots++] = ev[10]/ev[9];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[11]/ev[8];
                    rawroots[numroots++] = ev[11]/ev[10];
                }
            }
        }
    }
}inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x467=(cj1*sj0);
IkReal x468=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((0.99999999995)*r01*x467))+(((9.9999999995e-6)*r01*x468))+(((0.99999999995)*r00*x468))+((r02*sj1))+(((-9.9999999995e-6)*r00*x467)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x469=((9.9999999995e-6)*sj0);
IkReal x470=(r00*sj1);
IkReal x471=((0.99999999995)*cj0);
IkReal x472=(r01*sj1);
IkReal x473=((9.9999999995e-6)*cj0);
IkReal x474=((0.99999999995)*sj0);
if( IKabs((((x469*x470))+((cj1*r02))+(((-1.0)*x472*x474))+(((-1.0)*x472*x473))+(((-1.0)*x470*x471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x471))+((r01*x469))+((r00*x473))+((r00*x474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x469*x470))+((cj1*r02))+(((-1.0)*x472*x474))+(((-1.0)*x472*x473))+(((-1.0)*x470*x471))))+IKsqr(((((-1.0)*r01*x471))+((r01*x469))+((r00*x473))+((r00*x474))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x469*x470))+((cj1*r02))+(((-1.0)*x472*x474))+(((-1.0)*x472*x473))+(((-1.0)*x470*x471))), ((((-1.0)*r01*x471))+((r01*x469))+((r00*x473))+((r00*x474))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x475=((9.9999999995e-6)*sj0);
IkReal x476=(r00*sj1);
IkReal x477=((0.99999999995)*cj0);
IkReal x478=(r01*sj1);
IkReal x479=((9.9999999995e-6)*cj0);
IkReal x480=((0.99999999995)*sj0);
evalcond[0]=((((-1.0)*r00*x479))+(((-1.0)*r01*x475))+(IKcos(j3))+((r01*x477))+(((-1.0)*r00*x480)));
evalcond[1]=((((-1.0)*x478*x479))+(((-1.0)*x476*x477))+((cj1*r02))+(((-1.0)*(IKsin(j3))))+((x475*x476))+(((-1.0)*x478*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x481=((9.9999999995e-6)*r00);
IkReal x482=(cj1*sj0);
IkReal x483=(py*sj1);
IkReal x484=((9.9999999995e-6)*cj0);
IkReal x485=(sj0*sj1);
IkReal x486=((0.99999999995)*sj0);
IkReal x487=((0.99999999995)*r01);
IkReal x488=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x487))+(((-1.0)*cj0*x481))+(((-1.0)*r00*x486)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x488))+((cj1*r02))+((x481*x485))+(((-1.0)*r01*sj1*x484))+(((-1.0)*x485*x487)));
evalcond[3]=(((r02*sj1))+(((-1.0)*x481*x482))+((cj1*x488))+((x482*x487))+((cj1*r01*x484)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x483*x484))+(((-1.0)*x483*x486))+(((9.9999999995e-6)*px*x485))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x489=((7.24637681123188)*cj1);
IkReal x490=(cj0*px);
IkReal x491=(py*sj0);
IkReal x492=(px*sj0);
IkReal x493=((7.24637681123188e-5)*cj1);
IkReal x494=(cj0*py);
if( IKabs(((((7.2463768115942)*pz*sj1))+((x489*x491))+((x489*x490))+((x493*x494))+(((-1.0)*x492*x493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.24637681123188)*x492))+(((7.24637681123188e-5)*x491))+(((7.24637681123188e-5)*x490))+(((-7.24637681123188)*x494)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*pz*sj1))+((x489*x491))+((x489*x490))+((x493*x494))+(((-1.0)*x492*x493))))+IKsqr(((-0.553695652173913)+(((7.24637681123188)*x492))+(((7.24637681123188e-5)*x491))+(((7.24637681123188e-5)*x490))+(((-7.24637681123188)*x494))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*pz*sj1))+((x489*x491))+((x489*x490))+((x493*x494))+(((-1.0)*x492*x493))), ((-0.553695652173913)+(((7.24637681123188)*x492))+(((7.24637681123188e-5)*x491))+(((7.24637681123188e-5)*x490))+(((-7.24637681123188)*x494))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x495=((9.9999999995e-6)*px);
IkReal x496=((9.9999999995e-6)*py);
IkReal x497=((0.99999999995)*px);
IkReal x498=(cj1*sj0);
IkReal x499=(cj0*cj1);
IkReal x500=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*sj0*x497))+(((-1.0)*sj0*x496))+((cj0*x500))+(((-1.0)*cj0*x495)));
evalcond[1]=((((-1.0)*x495*x498))+((x496*x499))+((x497*x499))+((x498*x500))+((pz*sj1))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x501=((9.9999999995e-6)*r00);
IkReal x502=(cj1*sj0);
IkReal x503=(py*sj1);
IkReal x504=((9.9999999995e-6)*cj0);
IkReal x505=(sj0*sj1);
IkReal x506=((0.99999999995)*sj0);
IkReal x507=((0.99999999995)*r01);
IkReal x508=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x501))+(((-1.0)*r00*x506))+((cj0*x507)));
evalcond[2]=((1.0)+(((-1.0)*sj1*x508))+(((-1.0)*x505*x507))+((cj1*r02))+((x501*x505))+(((-1.0)*r01*sj1*x504)));
evalcond[3]=(((cj1*r01*x504))+((cj1*x508))+(((-1.0)*x501*x502))+((r02*sj1))+((x502*x507)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((-1.0)*x503*x506))+(((-1.0)*x503*x504))+(((9.9999999995e-6)*px*x505)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x509=((7.24637681123188)*px);
IkReal x510=(cj0*cj1);
IkReal x511=(cj1*sj0);
IkReal x512=((7.24637681123188)*py);
IkReal x513=((7.24637681123188e-5)*px);
IkReal x514=((7.24637681123188e-5)*py);
if( IKabs((((x511*x512))+(((-1.0)*x511*x513))+((x510*x514))+(((7.2463768115942)*pz*sj1))+((x509*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*sj0*x509))+((cj0*x512))+(((-1.0)*sj0*x514))+(((-1.0)*cj0*x513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x511*x512))+(((-1.0)*x511*x513))+((x510*x514))+(((7.2463768115942)*pz*sj1))+((x509*x510))))+IKsqr(((-0.553695652173913)+(((-1.0)*sj0*x509))+((cj0*x512))+(((-1.0)*sj0*x514))+(((-1.0)*cj0*x513))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x511*x512))+(((-1.0)*x511*x513))+((x510*x514))+(((7.2463768115942)*pz*sj1))+((x509*x510))), ((-0.553695652173913)+(((-1.0)*sj0*x509))+((cj0*x512))+(((-1.0)*sj0*x514))+(((-1.0)*cj0*x513))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x515=((9.9999999995e-6)*px);
IkReal x516=((9.9999999995e-6)*py);
IkReal x517=((0.99999999995)*px);
IkReal x518=(cj1*sj0);
IkReal x519=(cj0*cj1);
IkReal x520=((0.99999999995)*py);
evalcond[0]=((-0.07641)+((cj0*x520))+(((-1.0)*sj0*x516))+(((-1.0)*sj0*x517))+(((-0.138)*(IKcos(j4))))+(((-1.0)*cj0*x515)));
evalcond[1]=(((x518*x520))+((x517*x519))+(((-1.0)*x515*x518))+((x516*x519))+((pz*sj1))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x521=((9.9999999995e-6)*r00);
IkReal x522=(cj1*sj0);
IkReal x523=((0.99999999995)*sj0);
IkReal x524=(r01*sj1);
IkReal x525=((9.9999999995e-6)*sj0);
IkReal x526=((9.9999999995e-6)*cj0);
IkReal x527=((0.99999999995)*r01);
IkReal x528=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((cj0*x527))+(((-1.0)*r01*x525))+(((-1.0)*r00*x523))+(((-1.0)*cj0*x521)));
evalcond[2]=((((-1.0)*x524*x526))+(((-1.0)*sj1*x528))+(((-1.0)*x523*x524))+((cj1*r02))+((sj0*sj1*x521)));
evalcond[3]=(((x522*x527))+((cj1*r01*x526))+(((-1.0)*x521*x522))+((r02*sj1))+((cj1*x528)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*px*x523))+(((-1.0)*px*x526))+(((-1.0)*py*x525)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x529=((7.24637681123188)*cj1);
IkReal x530=(cj0*px);
IkReal x531=(py*sj0);
IkReal x532=((7.2463768115942)*pz);
IkReal x533=((7.24637681123188)*sj1);
IkReal x534=((7.24637681123188e-5)*px*sj0);
IkReal x535=((7.24637681123188e-5)*cj0*py);
if( IKabs((((sj1*x532))+(((-1.0)*cj1*x534))+((cj1*x535))+((x529*x531))+((x529*x530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*sj1*x534))+((sj1*x535))+(((-1.0)*cj1*x532))+((x531*x533))+((x530*x533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x532))+(((-1.0)*cj1*x534))+((cj1*x535))+((x529*x531))+((x529*x530))))+IKsqr(((-1.65442028985507)+(((-1.0)*sj1*x534))+((sj1*x535))+(((-1.0)*cj1*x532))+((x531*x533))+((x530*x533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x532))+(((-1.0)*cj1*x534))+((cj1*x535))+((x529*x531))+((x529*x530))), ((-1.65442028985507)+(((-1.0)*sj1*x534))+((sj1*x535))+(((-1.0)*cj1*x532))+((x531*x533))+((x530*x533))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x536=((0.99999999995)*sj1);
IkReal x537=(py*sj0);
IkReal x538=((9.9999999995e-6)*cj1);
IkReal x539=(px*sj0);
IkReal x540=(cj0*px);
IkReal x541=(cj0*py);
IkReal x542=((0.99999999995)*cj1);
IkReal x543=((9.9999999995e-6)*sj1);
evalcond[0]=((((-1.0)*x538*x539))+((x540*x542))+((x537*x542))+((pz*sj1))+((x538*x541))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((-1.0)*x541*x543))+((x539*x543))+(((0.138)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*x536*x540))+(((-1.0)*x536*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x544=((9.9999999995e-6)*r00);
IkReal x545=(cj1*sj0);
IkReal x546=((0.99999999995)*sj0);
IkReal x547=(r01*sj1);
IkReal x548=((9.9999999995e-6)*sj0);
IkReal x549=((9.9999999995e-6)*cj0);
IkReal x550=((0.99999999995)*r01);
IkReal x551=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((cj0*x550))+(((-1.0)*r00*x546))+(((-1.0)*r01*x548))+(((-1.0)*cj0*x544)));
evalcond[2]=((((-1.0)*sj1*x551))+((cj1*r02))+(((-1.0)*x547*x549))+((sj0*sj1*x544))+(((-1.0)*x546*x547)));
evalcond[3]=(((cj1*r01*x549))+(((-1.0)*x544*x545))+((cj1*x551))+((r02*sj1))+((x545*x550)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*px*x546))+(((-1.0)*px*x549))+(((-1.0)*py*x548)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x552=((7.24637681123188)*cj1);
IkReal x553=(cj0*px);
IkReal x554=(py*sj0);
IkReal x555=((7.2463768115942)*pz);
IkReal x556=((7.24637681123188)*sj1);
IkReal x557=((7.24637681123188e-5)*px*sj0);
IkReal x558=((7.24637681123188e-5)*cj0*py);
if( IKabs((((sj1*x555))+(((-1.0)*cj1*x557))+((cj1*x558))+((x552*x554))+((x552*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((sj1*x557))+(((-1.0)*x554*x556))+(((-1.0)*sj1*x558))+(((-1.0)*x553*x556))+((cj1*x555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x555))+(((-1.0)*cj1*x557))+((cj1*x558))+((x552*x554))+((x552*x553))))+IKsqr(((0.547028985507246)+((sj1*x557))+(((-1.0)*x554*x556))+(((-1.0)*sj1*x558))+(((-1.0)*x553*x556))+((cj1*x555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x555))+(((-1.0)*cj1*x557))+((cj1*x558))+((x552*x554))+((x552*x553))), ((0.547028985507246)+((sj1*x557))+(((-1.0)*x554*x556))+(((-1.0)*sj1*x558))+(((-1.0)*x553*x556))+((cj1*x555))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x559=((0.99999999995)*sj1);
IkReal x560=(py*sj0);
IkReal x561=((9.9999999995e-6)*cj1);
IkReal x562=(px*sj0);
IkReal x563=(cj0*px);
IkReal x564=(cj0*py);
IkReal x565=((0.99999999995)*cj1);
IkReal x566=((9.9999999995e-6)*sj1);
evalcond[0]=(((x563*x565))+((x561*x564))+((x560*x565))+((pz*sj1))+(((-1.0)*x561*x562))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07549)+(((-1.0)*x564*x566))+((x562*x566))+((cj1*pz))+(((-1.0)*x559*x560))+(((-1.0)*x559*x563))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x567=((7.24637681123188)*cj1);
IkReal x568=(cj0*px);
IkReal x569=(py*sj0);
IkReal x570=(px*sj0);
IkReal x571=((7.24637681123188e-5)*cj1);
IkReal x572=((499.999999975)*sj1);
IkReal x573=((0.00499999999975)*sj1);
IkReal x574=(cj0*py);
CheckValue<IkReal> x575=IKPowWithIntegerCheck(cj3,-1);
if(!x575.valid){
continue;
}
if( IKabs((((x571*x574))+(((7.2463768115942)*pz*sj1))+(((-1.0)*x570*x571))+((x567*x569))+((x567*x568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x575.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x570*x573))+((x573*x574))+((x569*x572))+((x568*x572))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x571*x574))+(((7.2463768115942)*pz*sj1))+(((-1.0)*x570*x571))+((x567*x569))+((x567*x568))))+IKsqr(((0.0144927536231884)*(x575.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x570*x573))+((x573*x574))+((x569*x572))+((x568*x572))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x571*x574))+(((7.2463768115942)*pz*sj1))+(((-1.0)*x570*x571))+((x567*x569))+((x567*x568))), ((0.0144927536231884)*(x575.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x570*x573))+((x573*x574))+((x569*x572))+((x568*x572))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x576=IKcos(j4);
IkReal x577=((9.9999999995e-6)*cj0);
IkReal x578=(py*sj1);
IkReal x579=(px*sj0);
IkReal x580=(py*sj0);
IkReal x581=((0.138)*x576);
IkReal x582=((0.99999999995)*cj0*px);
evalcond[0]=((((-1.0)*px*x577))+((sj3*x581))+(((0.99999999995)*cj0*py))+(((-0.99999999995)*x579))+(((0.07641)*sj3))+(((-9.9999999995e-6)*x580)));
evalcond[1]=((((-9.9999999995e-6)*cj1*x579))+((cj1*py*x577))+((pz*sj1))+(((-0.138)*(IKsin(j4))))+(((0.99999999995)*cj1*x580))+((cj1*x582)));
evalcond[2]=((0.1519)+(((9.9999999995e-6)*sj1*x579))+(((-1.0)*x577*x578))+((cj1*pz))+(((0.07641)*cj3))+(((-0.99999999995)*sj0*x578))+((cj3*x581))+(((-1.0)*sj1*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x583=((7.24637681123188)*cj1);
IkReal x584=(cj0*px);
IkReal x585=(py*sj0);
IkReal x586=((7.24637681123188e-5)*cj1);
IkReal x587=(px*sj0);
IkReal x588=(cj0*py);
CheckValue<IkReal> x589=IKPowWithIntegerCheck(sj3,-1);
if(!x589.valid){
continue;
}
if( IKabs((((x583*x584))+((x583*x585))+(((7.2463768115942)*pz*sj1))+(((-1.0)*x586*x587))+((x586*x588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x589.value)*(((((499.999999975)*x587))+(((-38.205)*sj3))+(((0.00499999999975)*x585))+(((0.00499999999975)*x584))+(((-499.999999975)*x588)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x583*x584))+((x583*x585))+(((7.2463768115942)*pz*sj1))+(((-1.0)*x586*x587))+((x586*x588))))+IKsqr(((0.0144927536231884)*(x589.value)*(((((499.999999975)*x587))+(((-38.205)*sj3))+(((0.00499999999975)*x585))+(((0.00499999999975)*x584))+(((-499.999999975)*x588))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x583*x584))+((x583*x585))+(((7.2463768115942)*pz*sj1))+(((-1.0)*x586*x587))+((x586*x588))), ((0.0144927536231884)*(x589.value)*(((((499.999999975)*x587))+(((-38.205)*sj3))+(((0.00499999999975)*x585))+(((0.00499999999975)*x584))+(((-499.999999975)*x588))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x590=IKcos(j4);
IkReal x591=((9.9999999995e-6)*cj0);
IkReal x592=(py*sj1);
IkReal x593=(px*sj0);
IkReal x594=(py*sj0);
IkReal x595=((0.138)*x590);
IkReal x596=((0.99999999995)*cj0*px);
evalcond[0]=((((-0.99999999995)*x593))+(((-1.0)*px*x591))+(((0.99999999995)*cj0*py))+(((-9.9999999995e-6)*x594))+(((0.07641)*sj3))+((sj3*x595)));
evalcond[1]=(((cj1*x596))+((cj1*py*x591))+(((0.99999999995)*cj1*x594))+((pz*sj1))+(((-0.138)*(IKsin(j4))))+(((-9.9999999995e-6)*cj1*x593)));
evalcond[2]=((0.1519)+(((-0.99999999995)*sj0*x592))+(((-1.0)*sj1*x596))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x595))+(((9.9999999995e-6)*sj1*x593))+(((-1.0)*x591*x592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x597=(cj1*sj0);
IkReal x598=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r02*sj1))+(((9.9999999995e-6)*r01*x598))+(((0.99999999995)*r00*x598))+(((0.99999999995)*r01*x597))+(((-9.9999999995e-6)*r00*x597)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x599=((9.9999999995e-6)*sj0);
IkReal x600=(r00*sj1);
IkReal x601=((0.99999999995)*cj0);
IkReal x602=(r01*sj1);
IkReal x603=((9.9999999995e-6)*cj0);
IkReal x604=((0.99999999995)*sj0);
if( IKabs(((((-1.0)*x602*x603))+(((-1.0)*x602*x604))+((cj1*r02))+(((-1.0)*x600*x601))+((x599*x600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x599))+(((-1.0)*r00*x603))+(((-1.0)*r00*x604))+((r01*x601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x602*x603))+(((-1.0)*x602*x604))+((cj1*r02))+(((-1.0)*x600*x601))+((x599*x600))))+IKsqr(((((-1.0)*r01*x599))+(((-1.0)*r00*x603))+(((-1.0)*r00*x604))+((r01*x601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x602*x603))+(((-1.0)*x602*x604))+((cj1*r02))+(((-1.0)*x600*x601))+((x599*x600))), ((((-1.0)*r01*x599))+(((-1.0)*r00*x603))+(((-1.0)*r00*x604))+((r01*x601))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x605=((9.9999999995e-6)*sj0);
IkReal x606=(r00*sj1);
IkReal x607=((0.99999999995)*cj0);
IkReal x608=(r01*sj1);
IkReal x609=((9.9999999995e-6)*cj0);
IkReal x610=((0.99999999995)*sj0);
evalcond[0]=((((-1.0)*r01*x605))+(((-1.0)*r00*x609))+(((-1.0)*r00*x610))+(((-1.0)*(IKcos(j3))))+((r01*x607)));
evalcond[1]=(((x605*x606))+(((-1.0)*x608*x609))+((cj1*r02))+(((-1.0)*(IKsin(j3))))+(((-1.0)*x606*x607))+(((-1.0)*x608*x610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x611=((9.9999999995e-6)*r00);
IkReal x612=(cj1*sj0);
IkReal x613=(py*sj1);
IkReal x614=((9.9999999995e-6)*cj0);
IkReal x615=(sj0*sj1);
IkReal x616=((0.99999999995)*sj0);
IkReal x617=((0.99999999995)*r01);
IkReal x618=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x617))+(((-1.0)*cj0*x611))+(((-1.0)*r00*x616)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x618))+((cj1*r02))+((x611*x615))+(((-1.0)*r01*sj1*x614))+(((-1.0)*x615*x617)));
evalcond[3]=((((-1.0)*x611*x612))+((r02*sj1))+((x612*x617))+((cj1*x618))+((cj1*r01*x614)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((-1.0)*x613*x614))+(((-1.0)*x613*x616))+(((9.9999999995e-6)*px*x615)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x619=((7.24637681123188)*px);
IkReal x620=(cj0*cj1);
IkReal x621=(cj1*sj0);
IkReal x622=((7.24637681123188)*py);
IkReal x623=((7.24637681123188e-5)*px);
IkReal x624=((7.24637681123188e-5)*py);
if( IKabs(((((-1.0)*x621*x622))+(((-1.0)*x620*x624))+(((-1.0)*x619*x620))+((x621*x623))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*cj0*x623))+((cj0*x622))+(((-1.0)*sj0*x619))+(((-1.0)*sj0*x624)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x621*x622))+(((-1.0)*x620*x624))+(((-1.0)*x619*x620))+((x621*x623))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+(((-1.0)*cj0*x623))+((cj0*x622))+(((-1.0)*sj0*x619))+(((-1.0)*sj0*x624))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x621*x622))+(((-1.0)*x620*x624))+(((-1.0)*x619*x620))+((x621*x623))+(((-7.2463768115942)*pz*sj1))), ((-0.553695652173913)+(((-1.0)*cj0*x623))+((cj0*x622))+(((-1.0)*sj0*x619))+(((-1.0)*sj0*x624))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x625=((9.9999999995e-6)*px);
IkReal x626=((9.9999999995e-6)*py);
IkReal x627=((0.99999999995)*px);
IkReal x628=(cj1*sj0);
IkReal x629=(cj0*cj1);
IkReal x630=((0.99999999995)*py);
evalcond[0]=((-0.07641)+(((-1.0)*cj0*x625))+((cj0*x630))+(((-0.138)*(IKcos(j4))))+(((-1.0)*sj0*x626))+(((-1.0)*sj0*x627)));
evalcond[1]=(((x628*x630))+(((-1.0)*x625*x628))+(((0.138)*(IKsin(j4))))+((pz*sj1))+((x627*x629))+((x626*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x631=((9.9999999995e-6)*r00);
IkReal x632=(cj1*sj0);
IkReal x633=(py*sj1);
IkReal x634=((9.9999999995e-6)*cj0);
IkReal x635=(sj0*sj1);
IkReal x636=((0.99999999995)*sj0);
IkReal x637=((0.99999999995)*r01);
IkReal x638=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x636))+(((-1.0)*cj0*x631))+((cj0*x637)));
evalcond[2]=((1.0)+((cj1*r02))+(((-1.0)*x635*x637))+(((-1.0)*sj1*x638))+(((-1.0)*r01*sj1*x634))+((x631*x635)));
evalcond[3]=((((-1.0)*x631*x632))+((cj1*r01*x634))+((r02*sj1))+((x632*x637))+((cj1*x638)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x633*x634))+(((-1.0)*x633*x636))+(((9.9999999995e-6)*px*x635))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x639=((7.24637681123188)*cj1);
IkReal x640=(cj0*px);
IkReal x641=(py*sj0);
IkReal x642=(px*sj0);
IkReal x643=((7.24637681123188e-5)*cj1);
IkReal x644=(cj0*py);
if( IKabs(((((-1.0)*x639*x641))+(((-1.0)*x639*x640))+(((-1.0)*x643*x644))+(((-7.2463768115942)*pz*sj1))+((x642*x643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.24637681123188e-5)*x640))+(((7.24637681123188e-5)*x641))+(((7.24637681123188)*x642))+(((-7.24637681123188)*x644)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x639*x641))+(((-1.0)*x639*x640))+(((-1.0)*x643*x644))+(((-7.2463768115942)*pz*sj1))+((x642*x643))))+IKsqr(((-0.553695652173913)+(((7.24637681123188e-5)*x640))+(((7.24637681123188e-5)*x641))+(((7.24637681123188)*x642))+(((-7.24637681123188)*x644))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x639*x641))+(((-1.0)*x639*x640))+(((-1.0)*x643*x644))+(((-7.2463768115942)*pz*sj1))+((x642*x643))), ((-0.553695652173913)+(((7.24637681123188e-5)*x640))+(((7.24637681123188e-5)*x641))+(((7.24637681123188)*x642))+(((-7.24637681123188)*x644))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x645=((9.9999999995e-6)*px);
IkReal x646=((9.9999999995e-6)*py);
IkReal x647=((0.99999999995)*px);
IkReal x648=(cj1*sj0);
IkReal x649=(cj0*cj1);
IkReal x650=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*cj0*x645))+(((-1.0)*sj0*x646))+(((-1.0)*sj0*x647))+((cj0*x650)));
evalcond[1]=(((x648*x650))+(((0.138)*(IKsin(j4))))+((pz*sj1))+(((-1.0)*x645*x648))+((x646*x649))+((x647*x649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x651=((9.9999999995e-6)*r00);
IkReal x652=(cj1*sj0);
IkReal x653=((0.99999999995)*sj0);
IkReal x654=(r01*sj1);
IkReal x655=((9.9999999995e-6)*sj0);
IkReal x656=((9.9999999995e-6)*cj0);
IkReal x657=((0.99999999995)*r01);
IkReal x658=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x653))+(((-1.0)*r01*x655))+(((-1.0)*cj0*x651))+((cj0*x657)));
evalcond[2]=((((-1.0)*sj1*x658))+((sj0*sj1*x651))+((cj1*r02))+(((-1.0)*x653*x654))+(((-1.0)*x654*x656)));
evalcond[3]=(((cj1*r01*x656))+(((-1.0)*x651*x652))+((x652*x657))+((cj1*x658))+((r02*sj1)));
evalcond[4]=((((-1.0)*px*x656))+(((-1.0)*px*x653))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x655)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x659=((7.24637681123188)*cj1);
IkReal x660=(cj0*px);
IkReal x661=(py*sj0);
IkReal x662=((7.2463768115942)*pz);
IkReal x663=((7.24637681123188)*sj1);
IkReal x664=((7.24637681123188e-5)*px*sj0);
IkReal x665=((7.24637681123188e-5)*cj0*py);
if( IKabs(((((-1.0)*sj1*x662))+(((-1.0)*x659*x661))+(((-1.0)*x659*x660))+(((-1.0)*cj1*x665))+((cj1*x664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*sj1*x664))+((sj1*x665))+(((-1.0)*cj1*x662))+((x660*x663))+((x661*x663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x662))+(((-1.0)*x659*x661))+(((-1.0)*x659*x660))+(((-1.0)*cj1*x665))+((cj1*x664))))+IKsqr(((-1.65442028985507)+(((-1.0)*sj1*x664))+((sj1*x665))+(((-1.0)*cj1*x662))+((x660*x663))+((x661*x663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj1*x662))+(((-1.0)*x659*x661))+(((-1.0)*x659*x660))+(((-1.0)*cj1*x665))+((cj1*x664))), ((-1.65442028985507)+(((-1.0)*sj1*x664))+((sj1*x665))+(((-1.0)*cj1*x662))+((x660*x663))+((x661*x663))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x666=((0.99999999995)*sj1);
IkReal x667=(py*sj0);
IkReal x668=((9.9999999995e-6)*cj1);
IkReal x669=(px*sj0);
IkReal x670=(cj0*px);
IkReal x671=(cj0*py);
IkReal x672=((0.99999999995)*cj1);
IkReal x673=((9.9999999995e-6)*sj1);
evalcond[0]=(((x670*x672))+((x667*x672))+(((-1.0)*x668*x669))+((x668*x671))+(((0.138)*(IKsin(j4))))+((pz*sj1)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((x669*x673))+(((-1.0)*x666*x670))+(((-1.0)*x671*x673))+(((-1.0)*x666*x667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x674=((9.9999999995e-6)*r00);
IkReal x675=(cj1*sj0);
IkReal x676=((0.99999999995)*sj0);
IkReal x677=(r01*sj1);
IkReal x678=((9.9999999995e-6)*sj0);
IkReal x679=((9.9999999995e-6)*cj0);
IkReal x680=((0.99999999995)*r01);
IkReal x681=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*cj0*x674))+((cj0*x680))+(((-1.0)*r01*x678))+(((-1.0)*r00*x676)));
evalcond[2]=(((cj1*r02))+(((-1.0)*sj1*x681))+(((-1.0)*x676*x677))+(((-1.0)*x677*x679))+((sj0*sj1*x674)));
evalcond[3]=(((cj1*x681))+((cj1*r01*x679))+((r02*sj1))+(((-1.0)*x674*x675))+((x675*x680)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*py*x678))+(((-1.0)*px*x676))+(((-1.0)*px*x679)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x682=((7.24637681123188)*cj1);
IkReal x683=(cj0*px);
IkReal x684=(py*sj0);
IkReal x685=((7.2463768115942)*pz);
IkReal x686=((7.24637681123188)*sj1);
IkReal x687=((7.24637681123188e-5)*px*sj0);
IkReal x688=((7.24637681123188e-5)*cj0*py);
if( IKabs((((cj1*x687))+(((-1.0)*cj1*x688))+(((-1.0)*sj1*x685))+(((-1.0)*x682*x683))+(((-1.0)*x682*x684)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((cj1*x685))+(((-1.0)*x684*x686))+(((-1.0)*sj1*x688))+((sj1*x687))+(((-1.0)*x683*x686)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x687))+(((-1.0)*cj1*x688))+(((-1.0)*sj1*x685))+(((-1.0)*x682*x683))+(((-1.0)*x682*x684))))+IKsqr(((0.547028985507246)+((cj1*x685))+(((-1.0)*x684*x686))+(((-1.0)*sj1*x688))+((sj1*x687))+(((-1.0)*x683*x686))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x687))+(((-1.0)*cj1*x688))+(((-1.0)*sj1*x685))+(((-1.0)*x682*x683))+(((-1.0)*x682*x684))), ((0.547028985507246)+((cj1*x685))+(((-1.0)*x684*x686))+(((-1.0)*sj1*x688))+((sj1*x687))+(((-1.0)*x683*x686))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x689=((0.99999999995)*sj1);
IkReal x690=(py*sj0);
IkReal x691=((9.9999999995e-6)*cj1);
IkReal x692=(px*sj0);
IkReal x693=(cj0*px);
IkReal x694=(cj0*py);
IkReal x695=((0.99999999995)*cj1);
IkReal x696=((9.9999999995e-6)*sj1);
evalcond[0]=(((x690*x695))+((x691*x694))+((x693*x695))+(((0.138)*(IKsin(j4))))+((pz*sj1))+(((-1.0)*x691*x692)));
evalcond[1]=((0.07549)+((cj1*pz))+((x692*x696))+(((-1.0)*x694*x696))+(((-1.0)*x689*x690))+(((-1.0)*x689*x693))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x697=((7.24637681123188)*cj1);
IkReal x698=(cj0*px);
IkReal x699=(py*sj0);
IkReal x700=(px*sj0);
IkReal x701=((7.24637681123188e-5)*cj1);
IkReal x702=((499.999999975)*sj1);
IkReal x703=((0.00499999999975)*sj1);
IkReal x704=(cj0*py);
CheckValue<IkReal> x705=IKPowWithIntegerCheck(cj3,-1);
if(!x705.valid){
continue;
}
if( IKabs((((x700*x701))+(((-1.0)*x697*x699))+(((-1.0)*x697*x698))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x701*x704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x705.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x703*x704))+((x698*x702))+(((-38.205)*cj3))+((x699*x702))+(((-1.0)*x700*x703)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x700*x701))+(((-1.0)*x697*x699))+(((-1.0)*x697*x698))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x701*x704))))+IKsqr(((0.0144927536231884)*(x705.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x703*x704))+((x698*x702))+(((-38.205)*cj3))+((x699*x702))+(((-1.0)*x700*x703))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x700*x701))+(((-1.0)*x697*x699))+(((-1.0)*x697*x698))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x701*x704))), ((0.0144927536231884)*(x705.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x703*x704))+((x698*x702))+(((-38.205)*cj3))+((x699*x702))+(((-1.0)*x700*x703))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x706=IKcos(j4);
IkReal x707=((9.9999999995e-6)*cj0);
IkReal x708=(py*sj1);
IkReal x709=((9.9999999995e-6)*sj0);
IkReal x710=((0.99999999995)*sj0);
IkReal x711=(cj1*px);
IkReal x712=(cj1*py);
IkReal x713=(px*sj1);
IkReal x714=((0.99999999995)*cj0);
IkReal x715=((0.138)*x706);
evalcond[0]=((((-1.0)*py*x709))+(((-0.07641)*sj3))+(((-1.0)*px*x707))+(((-1.0)*px*x710))+((py*x714))+(((-1.0)*sj3*x715)));
evalcond[1]=(((x707*x712))+((x711*x714))+(((-1.0)*x709*x711))+((x710*x712))+(((0.138)*(IKsin(j4))))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x707*x708))+((x709*x713))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x708*x710))+(((-1.0)*x713*x714))+((cj3*x715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x716=((7.24637681123188)*cj1);
IkReal x717=(cj0*px);
IkReal x718=(py*sj0);
IkReal x719=((7.24637681123188e-5)*cj1);
IkReal x720=(px*sj0);
IkReal x721=(cj0*py);
CheckValue<IkReal> x722=IKPowWithIntegerCheck(sj3,-1);
if(!x722.valid){
continue;
}
if( IKabs(((((-1.0)*x716*x718))+(((-1.0)*x716*x717))+((x719*x720))+(((-1.0)*x719*x721))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x722.value)*(((((-0.00499999999975)*x717))+(((-0.00499999999975)*x718))+(((-38.205)*sj3))+(((-499.999999975)*x720))+(((499.999999975)*x721)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x716*x718))+(((-1.0)*x716*x717))+((x719*x720))+(((-1.0)*x719*x721))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x722.value)*(((((-0.00499999999975)*x717))+(((-0.00499999999975)*x718))+(((-38.205)*sj3))+(((-499.999999975)*x720))+(((499.999999975)*x721))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x716*x718))+(((-1.0)*x716*x717))+((x719*x720))+(((-1.0)*x719*x721))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x722.value)*(((((-0.00499999999975)*x717))+(((-0.00499999999975)*x718))+(((-38.205)*sj3))+(((-499.999999975)*x720))+(((499.999999975)*x721))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x723=IKcos(j4);
IkReal x724=((9.9999999995e-6)*cj0);
IkReal x725=(py*sj1);
IkReal x726=((9.9999999995e-6)*sj0);
IkReal x727=((0.99999999995)*sj0);
IkReal x728=(cj1*px);
IkReal x729=(cj1*py);
IkReal x730=(px*sj1);
IkReal x731=((0.99999999995)*cj0);
IkReal x732=((0.138)*x723);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*px*x727))+(((-1.0)*px*x724))+(((-1.0)*sj3*x732))+((py*x731))+(((-1.0)*py*x726)));
evalcond[1]=(((x728*x731))+((x727*x729))+(((0.138)*(IKsin(j4))))+(((-1.0)*x726*x728))+((pz*sj1))+((x724*x729)));
evalcond[2]=((0.1519)+(((-1.0)*x724*x725))+((x726*x730))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x725*x727))+(((-1.0)*x730*x731))+((cj3*x732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((0.99999999995)*cj0*r01))+(((-0.99999999995)*r00*sj0))+(((-9.9999999995e-6)*cj0*r00)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x733=(cj0*sj1);
IkReal x734=((0.99999999995)*r00);
IkReal x735=((9.9999999995e-6)*r01);
IkReal x736=(cj0*cj1);
IkReal x737=((9.9999999995e-6)*r00*sj0);
IkReal x738=((0.99999999995)*r01*sj0);
if( IKabs((((cj1*r02))+(((-1.0)*x733*x734))+(((-1.0)*x733*x735))+(((-1.0)*sj1*x738))+((sj1*x737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x735*x736))+(((-1.0)*x734*x736))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x738))+((cj1*x737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+(((-1.0)*x733*x734))+(((-1.0)*x733*x735))+(((-1.0)*sj1*x738))+((sj1*x737))))+IKsqr(((((-1.0)*x735*x736))+(((-1.0)*x734*x736))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x738))+((cj1*x737))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r02))+(((-1.0)*x733*x734))+(((-1.0)*x733*x735))+(((-1.0)*sj1*x738))+((sj1*x737))), ((((-1.0)*x735*x736))+(((-1.0)*x734*x736))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x738))+((cj1*x737))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x739=((0.99999999995)*sj1);
IkReal x740=(cj0*r00);
IkReal x741=(r01*sj0);
IkReal x742=((0.99999999995)*cj1);
IkReal x743=((9.9999999995e-6)*r00*sj0);
IkReal x744=((9.9999999995e-6)*cj0*r01);
evalcond[0]=(((cj1*x744))+((r02*sj1))+((x740*x742))+(IKcos(j3))+((x741*x742))+(((-1.0)*cj1*x743)));
evalcond[1]=((((-1.0)*sj1*x744))+((cj1*r02))+(((-1.0)*(IKsin(j3))))+((sj1*x743))+(((-1.0)*x739*x741))+(((-1.0)*x739*x740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x745=((9.9999999995e-6)*r00);
IkReal x746=(cj1*sj0);
IkReal x747=(py*sj1);
IkReal x748=((9.9999999995e-6)*cj0);
IkReal x749=(sj0*sj1);
IkReal x750=((0.99999999995)*sj0);
IkReal x751=((0.99999999995)*r01);
IkReal x752=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x745))+(((-1.0)*r00*x750))+((cj0*x751)));
evalcond[2]=((-1.0)+((x745*x749))+(((-1.0)*sj1*x752))+(((-1.0)*r01*sj1*x748))+((cj1*r02))+(((-1.0)*x749*x751)));
evalcond[3]=(((cj1*r01*x748))+((cj1*x752))+(((-1.0)*x745*x746))+((r02*sj1))+((x746*x751)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x749))+(((-1.0)*x747*x748))+((cj1*pz))+(((-1.0)*x747*x750)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x753=((7.24637681123188)*cj1);
IkReal x754=(cj0*px);
IkReal x755=(py*sj0);
IkReal x756=(px*sj0);
IkReal x757=((7.24637681123188e-5)*cj1);
IkReal x758=(cj0*py);
if( IKabs(((((7.24637681123188e-5)*x755))+(((7.24637681123188e-5)*x754))+(((7.24637681123188)*x756))+(((-7.24637681123188)*x758)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((x756*x757))+(((-1.0)*x753*x754))+(((-1.0)*x753*x755))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x757*x758)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188e-5)*x755))+(((7.24637681123188e-5)*x754))+(((7.24637681123188)*x756))+(((-7.24637681123188)*x758))))+IKsqr(((-0.553695652173913)+((x756*x757))+(((-1.0)*x753*x754))+(((-1.0)*x753*x755))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x757*x758))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188e-5)*x755))+(((7.24637681123188e-5)*x754))+(((7.24637681123188)*x756))+(((-7.24637681123188)*x758))), ((-0.553695652173913)+((x756*x757))+(((-1.0)*x753*x754))+(((-1.0)*x753*x755))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x757*x758))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x759=((9.9999999995e-6)*px);
IkReal x760=((9.9999999995e-6)*py);
IkReal x761=((0.99999999995)*px);
IkReal x762=(cj1*sj0);
IkReal x763=(cj0*cj1);
IkReal x764=((0.99999999995)*py);
evalcond[0]=((((-1.0)*sj0*x761))+(((-1.0)*sj0*x760))+(((-1.0)*cj0*x759))+((cj0*x764))+(((0.138)*(IKsin(j4)))));
evalcond[1]=((0.07641)+(((0.138)*(IKcos(j4))))+((x760*x763))+((x761*x763))+((x762*x764))+((pz*sj1))+(((-1.0)*x759*x762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x765=((9.9999999995e-6)*r00);
IkReal x766=(cj1*sj0);
IkReal x767=(py*sj1);
IkReal x768=((9.9999999995e-6)*cj0);
IkReal x769=(sj0*sj1);
IkReal x770=((0.99999999995)*sj0);
IkReal x771=((0.99999999995)*r01);
IkReal x772=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x770))+((cj0*x771))+(((-1.0)*cj0*x765)));
evalcond[2]=((1.0)+((cj1*r02))+(((-1.0)*x769*x771))+((x765*x769))+(((-1.0)*r01*sj1*x768))+(((-1.0)*sj1*x772)));
evalcond[3]=(((cj1*r01*x768))+(((-1.0)*x765*x766))+((cj1*x772))+((r02*sj1))+((x766*x771)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x767*x770))+((cj1*pz))+(((-1.0)*x767*x768))+(((9.9999999995e-6)*px*x769)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x773=((7.24637681123188)*cj1);
IkReal x774=(cj0*px);
IkReal x775=(py*sj0);
IkReal x776=(px*sj0);
IkReal x777=((7.24637681123188e-5)*cj1);
IkReal x778=(cj0*py);
if( IKabs(((((7.24637681123188e-5)*x775))+(((7.24637681123188e-5)*x774))+(((7.24637681123188)*x776))+(((-7.24637681123188)*x778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x777*x778))+((x773*x774))+((x773*x775))+(((-1.0)*x776*x777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188e-5)*x775))+(((7.24637681123188e-5)*x774))+(((7.24637681123188)*x776))+(((-7.24637681123188)*x778))))+IKsqr(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x777*x778))+((x773*x774))+((x773*x775))+(((-1.0)*x776*x777))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188e-5)*x775))+(((7.24637681123188e-5)*x774))+(((7.24637681123188)*x776))+(((-7.24637681123188)*x778))), ((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x777*x778))+((x773*x774))+((x773*x775))+(((-1.0)*x776*x777))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x779=((9.9999999995e-6)*px);
IkReal x780=((9.9999999995e-6)*py);
IkReal x781=((0.99999999995)*px);
IkReal x782=(cj1*sj0);
IkReal x783=(cj0*cj1);
IkReal x784=((0.99999999995)*py);
evalcond[0]=((((-1.0)*sj0*x780))+(((-1.0)*sj0*x781))+(((-1.0)*cj0*x779))+(((0.138)*(IKsin(j4))))+((cj0*x784)));
evalcond[1]=((-0.07641)+((x781*x783))+((x782*x784))+((x780*x783))+((pz*sj1))+(((-0.138)*(IKcos(j4))))+(((-1.0)*x779*x782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x785=((9.9999999995e-6)*r00);
IkReal x786=(cj1*sj0);
IkReal x787=(sj0*sj1);
IkReal x788=((0.99999999995)*r01);
IkReal x789=(cj0*cj1);
IkReal x790=((9.9999999995e-6)*r01);
IkReal x791=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x785))+(((-1.0)*sj0*x790))+((cj0*x788))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=(((x785*x787))+((cj1*r02))+(((-1.0)*x787*x788))+(((-1.0)*sj1*x791))+(((-1.0)*cj0*sj1*x790)));
evalcond[3]=((1.0)+((x786*x788))+((r02*sj1))+(((0.99999999995)*r00*x789))+(((-1.0)*x785*x786))+((x789*x790)));
evalcond[4]=((((-9.9999999995e-6)*px*x786))+(((0.99999999995)*py*x786))+(((9.9999999995e-6)*py*x789))+(((0.99999999995)*px*x789))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x792=(py*sj1);
IkReal x793=((7.24637681123188)*sj0);
IkReal x794=((7.24637681123188e-5)*cj0);
IkReal x795=(px*sj1);
IkReal x796=((7.24637681123188)*cj0);
IkReal x797=((7.24637681123188e-5)*sj0);
if( IKabs((((px*x793))+((px*x794))+((py*x797))+(((-1.0)*py*x796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x795*x797))+(((-7.2463768115942)*cj1*pz))+((x792*x794))+((x792*x793))+((x795*x796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x793))+((px*x794))+((py*x797))+(((-1.0)*py*x796))))+IKsqr(((-1.65442028985507)+(((-1.0)*x795*x797))+(((-7.2463768115942)*cj1*pz))+((x792*x794))+((x792*x793))+((x795*x796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x793))+((px*x794))+((py*x797))+(((-1.0)*py*x796))), ((-1.65442028985507)+(((-1.0)*x795*x797))+(((-7.2463768115942)*cj1*pz))+((x792*x794))+((x792*x793))+((x795*x796))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x798=(cj0*px);
IkReal x799=(py*sj0);
IkReal x800=((0.99999999995)*sj1);
IkReal x801=(px*sj0);
IkReal x802=((9.9999999995e-6)*sj1);
IkReal x803=(cj0*py);
evalcond[0]=((((-0.99999999995)*x801))+(((0.99999999995)*x803))+(((0.138)*(IKsin(j4))))+(((-9.9999999995e-6)*x798))+(((-9.9999999995e-6)*x799)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+(((-1.0)*x798*x800))+(((-1.0)*x799*x800))+((cj1*pz))+((x801*x802))+(((-1.0)*x802*x803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x804=((9.9999999995e-6)*r00);
IkReal x805=(cj1*sj0);
IkReal x806=(sj0*sj1);
IkReal x807=((0.99999999995)*r01);
IkReal x808=(cj0*cj1);
IkReal x809=((9.9999999995e-6)*r01);
IkReal x810=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj0*x807))+(((-1.0)*cj0*x804))+(((-1.0)*sj0*x809))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=(((x804*x806))+(((-1.0)*cj0*sj1*x809))+(((-1.0)*x806*x807))+((cj1*r02))+(((-1.0)*sj1*x810)));
evalcond[3]=((-1.0)+(((0.99999999995)*r00*x808))+(((-1.0)*x804*x805))+((x805*x807))+((r02*sj1))+((x808*x809)));
evalcond[4]=((((0.99999999995)*py*x805))+(((-9.9999999995e-6)*px*x805))+(((9.9999999995e-6)*py*x808))+((pz*sj1))+(((0.99999999995)*px*x808)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x811=(py*sj1);
IkReal x812=((7.24637681123188)*sj0);
IkReal x813=((7.24637681123188e-5)*cj0);
IkReal x814=(px*sj1);
IkReal x815=((7.24637681123188)*cj0);
IkReal x816=((7.24637681123188e-5)*sj0);
if( IKabs((((py*x816))+((px*x812))+((px*x813))+(((-1.0)*py*x815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((-1.0)*x811*x812))+(((-1.0)*x811*x813))+((x814*x816))+(((-1.0)*x814*x815))+(((7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x816))+((px*x812))+((px*x813))+(((-1.0)*py*x815))))+IKsqr(((0.547028985507246)+(((-1.0)*x811*x812))+(((-1.0)*x811*x813))+((x814*x816))+(((-1.0)*x814*x815))+(((7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((py*x816))+((px*x812))+((px*x813))+(((-1.0)*py*x815))), ((0.547028985507246)+(((-1.0)*x811*x812))+(((-1.0)*x811*x813))+((x814*x816))+(((-1.0)*x814*x815))+(((7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x817=(cj0*px);
IkReal x818=(py*sj0);
IkReal x819=((0.99999999995)*sj1);
IkReal x820=(px*sj0);
IkReal x821=((9.9999999995e-6)*sj1);
IkReal x822=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x817))+(((-9.9999999995e-6)*x818))+(((0.99999999995)*x822))+(((0.138)*(IKsin(j4))))+(((-0.99999999995)*x820)));
evalcond[1]=((0.07549)+(((-1.0)*x818*x819))+((x820*x821))+(((-1.0)*x817*x819))+((cj1*pz))+(((-1.0)*x821*x822))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x823=((499.999999975)*sj1);
IkReal x824=(py*sj0);
IkReal x825=(cj0*py);
IkReal x826=(cj0*px);
IkReal x827=(px*sj0);
IkReal x828=((0.00499999999975)*sj1);
CheckValue<IkReal> x829=IKPowWithIntegerCheck(cj3,-1);
if(!x829.valid){
continue;
}
if( IKabs(((((7.24637681123188e-5)*x826))+(((7.24637681123188e-5)*x824))+(((7.24637681123188)*x827))+(((-7.24637681123188)*x825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x829.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x827*x828))+((x825*x828))+((x823*x824))+((x823*x826))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188e-5)*x826))+(((7.24637681123188e-5)*x824))+(((7.24637681123188)*x827))+(((-7.24637681123188)*x825))))+IKsqr(((0.0144927536231884)*(x829.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x827*x828))+((x825*x828))+((x823*x824))+((x823*x826))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188e-5)*x826))+(((7.24637681123188e-5)*x824))+(((7.24637681123188)*x827))+(((-7.24637681123188)*x825))), ((0.0144927536231884)*(x829.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x827*x828))+((x825*x828))+((x823*x824))+((x823*x826))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x830=IKcos(j4);
IkReal x831=((9.9999999995e-6)*cj0);
IkReal x832=(py*sj1);
IkReal x833=((9.9999999995e-6)*sj0);
IkReal x834=((0.99999999995)*sj0);
IkReal x835=(cj1*px);
IkReal x836=(cj1*py);
IkReal x837=(px*sj1);
IkReal x838=((0.99999999995)*cj0);
IkReal x839=((0.138)*x830);
evalcond[0]=((((-1.0)*py*x833))+(((-1.0)*px*x831))+(((-1.0)*px*x834))+((py*x838))+(((0.138)*(IKsin(j4)))));
evalcond[1]=(((x831*x836))+(((-1.0)*x833*x835))+((x835*x838))+((x834*x836))+((pz*sj1))+(((0.07641)*sj3))+((sj3*x839)));
evalcond[2]=((0.1519)+(((-1.0)*x832*x834))+((x833*x837))+(((-1.0)*x837*x838))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x839))+(((-1.0)*x831*x832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x840=(cj0*cj1);
IkReal x841=(px*sj0);
IkReal x842=(py*sj0);
CheckValue<IkReal> x843=IKPowWithIntegerCheck(sj3,-1);
if(!x843.valid){
continue;
}
if( IKabs(((((7.24637681123188)*x841))+(((-7.24637681123188)*cj0*py))+(((7.24637681123188e-5)*x842))+(((7.24637681123188e-5)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x843.value)*(((((0.00499999999975)*cj1*x841))+(((-38.205)*sj3))+(((-0.00499999999975)*py*x840))+(((-499.999999975)*cj1*x842))+(((-500.0)*pz*sj1))+(((-499.999999975)*px*x840)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x841))+(((-7.24637681123188)*cj0*py))+(((7.24637681123188e-5)*x842))+(((7.24637681123188e-5)*cj0*px))))+IKsqr(((0.0144927536231884)*(x843.value)*(((((0.00499999999975)*cj1*x841))+(((-38.205)*sj3))+(((-0.00499999999975)*py*x840))+(((-499.999999975)*cj1*x842))+(((-500.0)*pz*sj1))+(((-499.999999975)*px*x840))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x841))+(((-7.24637681123188)*cj0*py))+(((7.24637681123188e-5)*x842))+(((7.24637681123188e-5)*cj0*px))), ((0.0144927536231884)*(x843.value)*(((((0.00499999999975)*cj1*x841))+(((-38.205)*sj3))+(((-0.00499999999975)*py*x840))+(((-499.999999975)*cj1*x842))+(((-500.0)*pz*sj1))+(((-499.999999975)*px*x840))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x844=IKcos(j4);
IkReal x845=((9.9999999995e-6)*cj0);
IkReal x846=(py*sj1);
IkReal x847=((9.9999999995e-6)*sj0);
IkReal x848=((0.99999999995)*sj0);
IkReal x849=(cj1*px);
IkReal x850=(cj1*py);
IkReal x851=(px*sj1);
IkReal x852=((0.99999999995)*cj0);
IkReal x853=((0.138)*x844);
evalcond[0]=((((-1.0)*py*x847))+(((-1.0)*px*x845))+(((-1.0)*px*x848))+(((0.138)*(IKsin(j4))))+((py*x852)));
evalcond[1]=(((x848*x850))+(((-1.0)*x847*x849))+((x845*x850))+((sj3*x853))+((pz*sj1))+(((0.07641)*sj3))+((x849*x852)));
evalcond[2]=((0.1519)+((cj3*x853))+((x847*x851))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x846*x848))+(((-1.0)*x845*x846))+(((-1.0)*x851*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((0.99999999995)*cj0*r01))+(((-0.99999999995)*r00*sj0))+(((-9.9999999995e-6)*cj0*r00)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x854=(cj0*sj1);
IkReal x855=((0.99999999995)*r00);
IkReal x856=((9.9999999995e-6)*r01);
IkReal x857=(cj0*cj1);
IkReal x858=((9.9999999995e-6)*r00*sj0);
IkReal x859=((0.99999999995)*r01*sj0);
if( IKabs((((cj1*r02))+((sj1*x858))+(((-1.0)*sj1*x859))+(((-1.0)*x854*x855))+(((-1.0)*x854*x856)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x855*x857))+((r02*sj1))+((cj1*x859))+(((-1.0)*cj1*x858))+((x856*x857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x858))+(((-1.0)*sj1*x859))+(((-1.0)*x854*x855))+(((-1.0)*x854*x856))))+IKsqr((((x855*x857))+((r02*sj1))+((cj1*x859))+(((-1.0)*cj1*x858))+((x856*x857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r02))+((sj1*x858))+(((-1.0)*sj1*x859))+(((-1.0)*x854*x855))+(((-1.0)*x854*x856))), (((x855*x857))+((r02*sj1))+((cj1*x859))+(((-1.0)*cj1*x858))+((x856*x857))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x860=(cj0*sj1);
IkReal x861=((0.99999999995)*r00);
IkReal x862=((9.9999999995e-6)*r01);
IkReal x863=(cj0*cj1);
IkReal x864=((9.9999999995e-6)*r00*sj0);
IkReal x865=((0.99999999995)*r01*sj0);
evalcond[0]=(((cj1*r02))+(((-1.0)*x860*x861))+(((-1.0)*x860*x862))+(((-1.0)*sj1*x865))+(((-1.0)*(IKsin(j3))))+((sj1*x864)));
evalcond[1]=(((r02*sj1))+((cj1*x865))+(((-1.0)*cj1*x864))+((x862*x863))+((x861*x863))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x866=((9.9999999995e-6)*r00);
IkReal x867=(cj1*sj0);
IkReal x868=(py*sj1);
IkReal x869=((9.9999999995e-6)*cj0);
IkReal x870=(sj0*sj1);
IkReal x871=((0.99999999995)*sj0);
IkReal x872=((0.99999999995)*r01);
IkReal x873=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x866))+(((-1.0)*r00*x871))+((cj0*x872)));
evalcond[2]=((-1.0)+((cj1*r02))+(((-1.0)*sj1*x873))+((x866*x870))+(((-1.0)*r01*sj1*x869))+(((-1.0)*x870*x872)));
evalcond[3]=(((x867*x872))+(((-1.0)*x866*x867))+((r02*sj1))+((cj1*r01*x869))+((cj1*x873)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x868*x871))+(((-1.0)*x868*x869))+((cj1*pz))+(((9.9999999995e-6)*px*x870)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x874=((7.24637681123188)*cj1);
IkReal x875=(cj0*px);
IkReal x876=(py*sj0);
IkReal x877=(px*sj0);
IkReal x878=((7.24637681123188e-5)*cj1);
IkReal x879=(cj0*py);
if( IKabs(((((-7.24637681123188e-5)*x875))+(((-7.24637681123188e-5)*x876))+(((-7.24637681123188)*x877))+(((7.24637681123188)*x879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*x877*x878))+(((7.2463768115942)*pz*sj1))+((x878*x879))+((x874*x876))+((x874*x875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188e-5)*x875))+(((-7.24637681123188e-5)*x876))+(((-7.24637681123188)*x877))+(((7.24637681123188)*x879))))+IKsqr(((-0.553695652173913)+(((-1.0)*x877*x878))+(((7.2463768115942)*pz*sj1))+((x878*x879))+((x874*x876))+((x874*x875))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188e-5)*x875))+(((-7.24637681123188e-5)*x876))+(((-7.24637681123188)*x877))+(((7.24637681123188)*x879))), ((-0.553695652173913)+(((-1.0)*x877*x878))+(((7.2463768115942)*pz*sj1))+((x878*x879))+((x874*x876))+((x874*x875))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x880=((9.9999999995e-6)*px);
IkReal x881=((9.9999999995e-6)*py);
IkReal x882=((0.99999999995)*px);
IkReal x883=(cj1*sj0);
IkReal x884=(cj0*cj1);
IkReal x885=((0.99999999995)*py);
evalcond[0]=((((-1.0)*cj0*x880))+((cj0*x885))+(((-1.0)*sj0*x882))+(((-1.0)*sj0*x881))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((-0.07641)+((x881*x884))+((x883*x885))+((x882*x884))+((pz*sj1))+(((-0.138)*(IKcos(j4))))+(((-1.0)*x880*x883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x886=((9.9999999995e-6)*r00);
IkReal x887=(cj1*sj0);
IkReal x888=(py*sj1);
IkReal x889=((9.9999999995e-6)*cj0);
IkReal x890=(sj0*sj1);
IkReal x891=((0.99999999995)*sj0);
IkReal x892=((0.99999999995)*r01);
IkReal x893=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x892))+(((-1.0)*cj0*x886))+(((-1.0)*r00*x891)));
evalcond[2]=((1.0)+((x886*x890))+(((-1.0)*r01*sj1*x889))+((cj1*r02))+(((-1.0)*sj1*x893))+(((-1.0)*x890*x892)));
evalcond[3]=((((-1.0)*x886*x887))+((r02*sj1))+((cj1*x893))+((x887*x892))+((cj1*r01*x889)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x890))+((cj1*pz))+(((-1.0)*x888*x891))+(((-1.0)*x888*x889)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x894=((7.24637681123188)*cj1);
IkReal x895=(cj0*px);
IkReal x896=(py*sj0);
IkReal x897=(px*sj0);
IkReal x898=((7.24637681123188e-5)*cj1);
IkReal x899=(cj0*py);
if( IKabs(((((-7.24637681123188)*x897))+(((7.24637681123188)*x899))+(((-7.24637681123188e-5)*x896))+(((-7.24637681123188e-5)*x895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*x898*x899))+((x897*x898))+(((-1.0)*x894*x896))+(((-1.0)*x894*x895))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188)*x897))+(((7.24637681123188)*x899))+(((-7.24637681123188e-5)*x896))+(((-7.24637681123188e-5)*x895))))+IKsqr(((-0.553695652173913)+(((-1.0)*x898*x899))+((x897*x898))+(((-1.0)*x894*x896))+(((-1.0)*x894*x895))+(((-7.2463768115942)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188)*x897))+(((7.24637681123188)*x899))+(((-7.24637681123188e-5)*x896))+(((-7.24637681123188e-5)*x895))), ((-0.553695652173913)+(((-1.0)*x898*x899))+((x897*x898))+(((-1.0)*x894*x896))+(((-1.0)*x894*x895))+(((-7.2463768115942)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x900=((9.9999999995e-6)*px);
IkReal x901=((9.9999999995e-6)*py);
IkReal x902=((0.99999999995)*px);
IkReal x903=(cj1*sj0);
IkReal x904=(cj0*cj1);
IkReal x905=((0.99999999995)*py);
evalcond[0]=((((-1.0)*sj0*x901))+(((-1.0)*sj0*x902))+(((-1.0)*cj0*x900))+((cj0*x905))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07641)+(((-1.0)*x900*x903))+(((0.138)*(IKcos(j4))))+((x903*x905))+((x901*x904))+((x902*x904))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x906=((9.9999999995e-6)*r00);
IkReal x907=(cj1*sj0);
IkReal x908=(sj0*sj1);
IkReal x909=((0.99999999995)*r01);
IkReal x910=(cj0*cj1);
IkReal x911=((9.9999999995e-6)*r01);
IkReal x912=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj0*x911))+(((-1.0)*cj0*x906))+((cj0*x909))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*x908*x909))+(((-1.0)*cj0*sj1*x911))+((cj1*r02))+((x906*x908))+(((-1.0)*sj1*x912)));
evalcond[3]=((-1.0)+((x910*x911))+((x907*x909))+((r02*sj1))+(((0.99999999995)*r00*x910))+(((-1.0)*x906*x907)));
evalcond[4]=((((9.9999999995e-6)*py*x910))+(((0.99999999995)*py*x907))+(((0.99999999995)*px*x910))+((pz*sj1))+(((-9.9999999995e-6)*px*x907)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x913=(py*sj1);
IkReal x914=((7.24637681123188)*sj0);
IkReal x915=((7.24637681123188e-5)*cj0);
IkReal x916=(px*sj1);
IkReal x917=((7.24637681123188)*cj0);
IkReal x918=((7.24637681123188e-5)*sj0);
if( IKabs(((((-1.0)*px*x914))+(((-1.0)*px*x915))+(((-1.0)*py*x918))+((py*x917)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-7.2463768115942)*cj1*pz))+((x916*x917))+((x913*x914))+((x913*x915))+(((-1.0)*x916*x918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x914))+(((-1.0)*px*x915))+(((-1.0)*py*x918))+((py*x917))))+IKsqr(((-1.65442028985507)+(((-7.2463768115942)*cj1*pz))+((x916*x917))+((x913*x914))+((x913*x915))+(((-1.0)*x916*x918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*px*x914))+(((-1.0)*px*x915))+(((-1.0)*py*x918))+((py*x917))), ((-1.65442028985507)+(((-7.2463768115942)*cj1*pz))+((x916*x917))+((x913*x914))+((x913*x915))+(((-1.0)*x916*x918))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x919=(cj0*px);
IkReal x920=(py*sj0);
IkReal x921=((0.99999999995)*sj1);
IkReal x922=(px*sj0);
IkReal x923=((9.9999999995e-6)*sj1);
IkReal x924=(cj0*py);
evalcond[0]=((((-0.99999999995)*x922))+(((0.99999999995)*x924))+(((-9.9999999995e-6)*x919))+(((-9.9999999995e-6)*x920))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+(((-1.0)*x920*x921))+((cj1*pz))+(((-1.0)*x919*x921))+((x922*x923))+(((-1.0)*x923*x924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x925=((9.9999999995e-6)*r00);
IkReal x926=(cj1*sj0);
IkReal x927=(sj0*sj1);
IkReal x928=((0.99999999995)*r01);
IkReal x929=(cj0*cj1);
IkReal x930=((9.9999999995e-6)*r01);
IkReal x931=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x925))+((cj0*x928))+(((-1.0)*sj0*x930))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj1*x931))+((cj1*r02))+(((-1.0)*x927*x928))+((x925*x927))+(((-1.0)*cj0*sj1*x930)));
evalcond[3]=((1.0)+(((-1.0)*x925*x926))+((r02*sj1))+(((0.99999999995)*r00*x929))+((x926*x928))+((x929*x930)));
evalcond[4]=((((0.99999999995)*py*x926))+(((9.9999999995e-6)*py*x929))+(((0.99999999995)*px*x929))+(((-9.9999999995e-6)*px*x926))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x932=(py*sj1);
IkReal x933=((7.24637681123188)*sj0);
IkReal x934=((7.24637681123188e-5)*cj0);
IkReal x935=(px*sj1);
IkReal x936=((7.24637681123188)*cj0);
IkReal x937=((7.24637681123188e-5)*sj0);
if( IKabs(((((-1.0)*px*x933))+(((-1.0)*px*x934))+((py*x936))+(((-1.0)*py*x937)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((-1.0)*x935*x936))+((x935*x937))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x932*x933))+(((-1.0)*x932*x934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x933))+(((-1.0)*px*x934))+((py*x936))+(((-1.0)*py*x937))))+IKsqr(((0.547028985507246)+(((-1.0)*x935*x936))+((x935*x937))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x932*x933))+(((-1.0)*x932*x934))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*px*x933))+(((-1.0)*px*x934))+((py*x936))+(((-1.0)*py*x937))), ((0.547028985507246)+(((-1.0)*x935*x936))+((x935*x937))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x932*x933))+(((-1.0)*x932*x934))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x938=(cj0*px);
IkReal x939=(py*sj0);
IkReal x940=((0.99999999995)*sj1);
IkReal x941=(px*sj0);
IkReal x942=((9.9999999995e-6)*sj1);
IkReal x943=(cj0*py);
evalcond[0]=((((-0.99999999995)*x941))+(((0.99999999995)*x943))+(((-9.9999999995e-6)*x938))+(((-9.9999999995e-6)*x939))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07549)+(((-1.0)*x939*x940))+(((-1.0)*x938*x940))+(((-1.0)*x942*x943))+((x941*x942))+((cj1*pz))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x944=((499.999999975)*sj1);
IkReal x945=(py*sj0);
IkReal x946=(cj0*py);
IkReal x947=(cj0*px);
IkReal x948=(px*sj0);
IkReal x949=((0.00499999999975)*sj1);
CheckValue<IkReal> x950=IKPowWithIntegerCheck(cj3,-1);
if(!x950.valid){
continue;
}
if( IKabs(((((-7.24637681123188e-5)*x945))+(((-7.24637681123188e-5)*x947))+(((7.24637681123188)*x946))+(((-7.24637681123188)*x948)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x950.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x946*x949))+(((-1.0)*x948*x949))+((x944*x947))+((x944*x945))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188e-5)*x945))+(((-7.24637681123188e-5)*x947))+(((7.24637681123188)*x946))+(((-7.24637681123188)*x948))))+IKsqr(((0.0144927536231884)*(x950.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x946*x949))+(((-1.0)*x948*x949))+((x944*x947))+((x944*x945))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188e-5)*x945))+(((-7.24637681123188e-5)*x947))+(((7.24637681123188)*x946))+(((-7.24637681123188)*x948))), ((0.0144927536231884)*(x950.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x946*x949))+(((-1.0)*x948*x949))+((x944*x947))+((x944*x945))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x951=IKcos(j4);
IkReal x952=((9.9999999995e-6)*cj0);
IkReal x953=(py*sj1);
IkReal x954=((9.9999999995e-6)*sj0);
IkReal x955=((0.99999999995)*sj0);
IkReal x956=(cj1*px);
IkReal x957=(cj1*py);
IkReal x958=(px*sj1);
IkReal x959=((0.99999999995)*cj0);
IkReal x960=((0.138)*x951);
evalcond[0]=((((-1.0)*py*x954))+((py*x959))+(((-1.0)*px*x952))+(((-1.0)*px*x955))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((((-0.07641)*sj3))+((x955*x957))+((x952*x957))+((x956*x959))+(((-1.0)*sj3*x960))+((pz*sj1))+(((-1.0)*x954*x956)));
evalcond[2]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x960))+(((-1.0)*x958*x959))+(((-1.0)*x953*x955))+(((-1.0)*x952*x953))+((x954*x958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x961=(cj0*cj1);
IkReal x962=(px*sj0);
IkReal x963=(py*sj0);
CheckValue<IkReal> x964=IKPowWithIntegerCheck(sj3,-1);
if(!x964.valid){
continue;
}
if( IKabs(((((-7.24637681123188)*x962))+(((7.24637681123188)*cj0*py))+(((-7.24637681123188e-5)*cj0*px))+(((-7.24637681123188e-5)*x963)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x964.value)*(((((-38.205)*sj3))+(((500.0)*pz*sj1))+(((-0.00499999999975)*cj1*x962))+(((499.999999975)*cj1*x963))+(((0.00499999999975)*py*x961))+(((499.999999975)*px*x961)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188)*x962))+(((7.24637681123188)*cj0*py))+(((-7.24637681123188e-5)*cj0*px))+(((-7.24637681123188e-5)*x963))))+IKsqr(((0.0144927536231884)*(x964.value)*(((((-38.205)*sj3))+(((500.0)*pz*sj1))+(((-0.00499999999975)*cj1*x962))+(((499.999999975)*cj1*x963))+(((0.00499999999975)*py*x961))+(((499.999999975)*px*x961))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188)*x962))+(((7.24637681123188)*cj0*py))+(((-7.24637681123188e-5)*cj0*px))+(((-7.24637681123188e-5)*x963))), ((0.0144927536231884)*(x964.value)*(((((-38.205)*sj3))+(((500.0)*pz*sj1))+(((-0.00499999999975)*cj1*x962))+(((499.999999975)*cj1*x963))+(((0.00499999999975)*py*x961))+(((499.999999975)*px*x961))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x965=IKcos(j4);
IkReal x966=((9.9999999995e-6)*cj0);
IkReal x967=(py*sj1);
IkReal x968=((9.9999999995e-6)*sj0);
IkReal x969=((0.99999999995)*sj0);
IkReal x970=(cj1*px);
IkReal x971=(cj1*py);
IkReal x972=(px*sj1);
IkReal x973=((0.99999999995)*cj0);
IkReal x974=((0.138)*x965);
evalcond[0]=((((-1.0)*py*x968))+((py*x973))+(((-1.0)*px*x969))+(((-1.0)*px*x966))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((((-0.07641)*sj3))+((x969*x971))+((x966*x971))+((pz*sj1))+((x970*x973))+(((-1.0)*sj3*x974))+(((-1.0)*x968*x970)));
evalcond[2]=((0.1519)+(((-1.0)*x967*x969))+((x968*x972))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x966*x967))+(((-1.0)*x972*x973))+((cj3*x974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x975=(cj0*sj1);
IkReal x976=((0.99999999995)*r00);
IkReal x977=((9.9999999995e-6)*r01);
IkReal x978=(cj0*cj1);
IkReal x979=((9.9999999995e-6)*r00*sj0);
IkReal x980=((0.99999999995)*r01*sj0);
CheckValue<IkReal> x981=IKPowWithIntegerCheck(cj2,-1);
if(!x981.valid){
continue;
}
if( IKabs((((cj1*r02))+((sj1*x979))+(((-1.0)*sj1*x980))+(((-1.0)*x975*x977))+(((-1.0)*x975*x976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x981.value)*(((((-1.0)*cj1*x980))+((cj1*x979))+(((-1.0)*r02*sj1))+(((-1.0)*x976*x978))+(((-1.0)*x977*x978)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x979))+(((-1.0)*sj1*x980))+(((-1.0)*x975*x977))+(((-1.0)*x975*x976))))+IKsqr(((x981.value)*(((((-1.0)*cj1*x980))+((cj1*x979))+(((-1.0)*r02*sj1))+(((-1.0)*x976*x978))+(((-1.0)*x977*x978))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r02))+((sj1*x979))+(((-1.0)*sj1*x980))+(((-1.0)*x975*x977))+(((-1.0)*x975*x976))), ((x981.value)*(((((-1.0)*cj1*x980))+((cj1*x979))+(((-1.0)*r02*sj1))+(((-1.0)*x976*x978))+(((-1.0)*x977*x978))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x982=IKcos(j3);
IkReal x983=((9.9999999995e-6)*sj0);
IkReal x984=(cj1*r00);
IkReal x985=(r00*sj1);
IkReal x986=((0.99999999995)*cj0);
IkReal x987=(r01*sj1);
IkReal x988=((9.9999999995e-6)*cj0);
IkReal x989=((0.99999999995)*sj0);
IkReal x990=(cj1*r01);
evalcond[0]=((((-1.0)*r00*x988))+(((-1.0)*r00*x989))+(((-1.0)*r01*x983))+((r01*x986))+((sj2*x982)));
evalcond[1]=(((x983*x985))+((cj1*r02))+(((-1.0)*(IKsin(j3))))+(((-1.0)*x987*x989))+(((-1.0)*x987*x988))+(((-1.0)*x985*x986)));
evalcond[2]=(((x989*x990))+((x988*x990))+((r02*sj1))+((cj2*x982))+((x984*x986))+(((-1.0)*x983*x984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x991=((9.9999999995e-6)*r00);
IkReal x992=(cj1*sj0);
IkReal x993=(py*sj1);
IkReal x994=((9.9999999995e-6)*cj0);
IkReal x995=(sj0*sj1);
IkReal x996=((0.99999999995)*sj0);
IkReal x997=((0.99999999995)*r01);
IkReal x998=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x991))+(((-1.0)*r00*x996))+((cj0*x997)));
evalcond[2]=((-1.0)+((x991*x995))+(((-1.0)*x995*x997))+(((-1.0)*sj1*x998))+((cj1*r02))+(((-1.0)*r01*sj1*x994)));
evalcond[3]=(((cj1*x998))+((x992*x997))+(((-1.0)*x991*x992))+((cj1*r01*x994))+((r02*sj1)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x995))+((cj1*pz))+(((-1.0)*x993*x996))+(((-1.0)*x993*x994)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x999=(cj1*px);
IkReal x1000=((7.24637681123188)*cj0);
IkReal x1001=(sj0*sj2);
IkReal x1002=(cj1*py);
IkReal x1003=((7.24637681123188)*px);
IkReal x1004=(cj2*sj0);
IkReal x1005=((7.24637681123188e-5)*py);
IkReal x1006=((7.2463768115942)*pz*sj1);
IkReal x1007=((7.24637681123188e-5)*cj0*cj2);
IkReal x1008=((7.24637681123188e-5)*cj0*sj2);
if( IKabs(((((-1.0)*cj2*py*x1000))+((px*x1007))+((x1004*x1005))+((sj2*x1006))+((sj2*x1000*x999))+(((-7.24637681123188e-5)*x1001*x999))+(((7.24637681123188)*x1001*x1002))+((x1002*x1008))+((x1003*x1004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((px*x1008))+(((-1.0)*cj2*x1006))+(((-1.0)*x1002*x1007))+(((-7.24637681123188)*x1002*x1004))+(((-1.0)*py*sj2*x1000))+(((-1.0)*cj2*x1000*x999))+((x1001*x1005))+((x1001*x1003))+(((7.24637681123188e-5)*x1004*x999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*py*x1000))+((px*x1007))+((x1004*x1005))+((sj2*x1006))+((sj2*x1000*x999))+(((-7.24637681123188e-5)*x1001*x999))+(((7.24637681123188)*x1001*x1002))+((x1002*x1008))+((x1003*x1004))))+IKsqr(((-0.553695652173913)+((px*x1008))+(((-1.0)*cj2*x1006))+(((-1.0)*x1002*x1007))+(((-7.24637681123188)*x1002*x1004))+(((-1.0)*py*sj2*x1000))+(((-1.0)*cj2*x1000*x999))+((x1001*x1005))+((x1001*x1003))+(((7.24637681123188e-5)*x1004*x999))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj2*py*x1000))+((px*x1007))+((x1004*x1005))+((sj2*x1006))+((sj2*x1000*x999))+(((-7.24637681123188e-5)*x1001*x999))+(((7.24637681123188)*x1001*x1002))+((x1002*x1008))+((x1003*x1004))), ((-0.553695652173913)+((px*x1008))+(((-1.0)*cj2*x1006))+(((-1.0)*x1002*x1007))+(((-7.24637681123188)*x1002*x1004))+(((-1.0)*py*sj2*x1000))+(((-1.0)*cj2*x1000*x999))+((x1001*x1005))+((x1001*x1003))+(((7.24637681123188e-5)*x1004*x999))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1009=IKcos(j4);
IkReal x1010=IKsin(j4);
IkReal x1011=((9.9999999995e-6)*px);
IkReal x1012=((9.9999999995e-6)*py);
IkReal x1013=((0.138)*sj2);
IkReal x1014=((0.99999999995)*px);
IkReal x1015=(cj1*sj0);
IkReal x1016=((0.138)*cj2);
IkReal x1017=(cj0*cj1);
IkReal x1018=((0.99999999995)*py);
evalcond[0]=(((x1009*x1013))+(((-1.0)*sj0*x1014))+(((-1.0)*sj0*x1012))+((cj0*x1018))+(((0.07641)*sj2))+(((-1.0)*cj0*x1011))+((x1010*x1016)));
evalcond[1]=(((x1014*x1017))+(((-1.0)*x1011*x1015))+(((-1.0)*x1010*x1013))+((x1009*x1016))+(((0.07641)*cj2))+((x1012*x1017))+((x1015*x1018))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1019=((9.9999999995e-6)*r00);
IkReal x1020=(cj1*sj0);
IkReal x1021=(py*sj1);
IkReal x1022=((9.9999999995e-6)*cj0);
IkReal x1023=(sj0*sj1);
IkReal x1024=((0.99999999995)*sj0);
IkReal x1025=((0.99999999995)*r01);
IkReal x1026=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1025))+(((-1.0)*r00*x1024))+(((-1.0)*cj0*x1019)));
evalcond[2]=((1.0)+(((-1.0)*sj1*x1026))+(((-1.0)*x1023*x1025))+(((-1.0)*r01*sj1*x1022))+((cj1*r02))+((x1019*x1023)));
evalcond[3]=(((cj1*r01*x1022))+(((-1.0)*x1019*x1020))+((r02*sj1))+((x1020*x1025))+((cj1*x1026)));
evalcond[4]=((0.1519)+(((9.9999999995e-6)*px*x1023))+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x1021*x1024))+(((-1.0)*x1021*x1022))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1027=(cj1*px);
IkReal x1028=((7.24637681123188)*cj0);
IkReal x1029=(sj0*sj2);
IkReal x1030=(cj1*py);
IkReal x1031=((7.24637681123188)*px);
IkReal x1032=(cj2*sj0);
IkReal x1033=((7.24637681123188e-5)*py);
IkReal x1034=((7.2463768115942)*pz*sj1);
IkReal x1035=((7.24637681123188e-5)*cj0*cj2);
IkReal x1036=((7.24637681123188e-5)*cj0*sj2);
if( IKabs((((x1031*x1032))+((x1030*x1036))+((px*x1035))+(((-1.0)*cj2*py*x1028))+(((-7.24637681123188e-5)*x1027*x1029))+((sj2*x1034))+(((7.24637681123188)*x1029*x1030))+((x1032*x1033))+((sj2*x1027*x1028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((cj2*x1034))+((x1030*x1035))+((py*sj2*x1028))+(((-1.0)*x1029*x1031))+(((-1.0)*x1029*x1033))+(((-7.24637681123188e-5)*x1027*x1032))+((cj2*x1027*x1028))+(((7.24637681123188)*x1030*x1032))+(((-1.0)*px*x1036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1031*x1032))+((x1030*x1036))+((px*x1035))+(((-1.0)*cj2*py*x1028))+(((-7.24637681123188e-5)*x1027*x1029))+((sj2*x1034))+(((7.24637681123188)*x1029*x1030))+((x1032*x1033))+((sj2*x1027*x1028))))+IKsqr(((-0.553695652173913)+((cj2*x1034))+((x1030*x1035))+((py*sj2*x1028))+(((-1.0)*x1029*x1031))+(((-1.0)*x1029*x1033))+(((-7.24637681123188e-5)*x1027*x1032))+((cj2*x1027*x1028))+(((7.24637681123188)*x1030*x1032))+(((-1.0)*px*x1036))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1031*x1032))+((x1030*x1036))+((px*x1035))+(((-1.0)*cj2*py*x1028))+(((-7.24637681123188e-5)*x1027*x1029))+((sj2*x1034))+(((7.24637681123188)*x1029*x1030))+((x1032*x1033))+((sj2*x1027*x1028))), ((-0.553695652173913)+((cj2*x1034))+((x1030*x1035))+((py*sj2*x1028))+(((-1.0)*x1029*x1031))+(((-1.0)*x1029*x1033))+(((-7.24637681123188e-5)*x1027*x1032))+((cj2*x1027*x1028))+(((7.24637681123188)*x1030*x1032))+(((-1.0)*px*x1036))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1037=IKsin(j4);
IkReal x1038=IKcos(j4);
IkReal x1039=((9.9999999995e-6)*px);
IkReal x1040=((9.9999999995e-6)*py);
IkReal x1041=((0.99999999995)*px);
IkReal x1042=(cj1*sj0);
IkReal x1043=(cj0*cj1);
IkReal x1044=((0.99999999995)*py);
IkReal x1045=((0.138)*x1038);
IkReal x1046=((0.138)*x1037);
evalcond[0]=((((-1.0)*cj0*x1039))+(((-0.07641)*sj2))+((cj0*x1044))+((cj2*x1046))+(((-1.0)*sj2*x1045))+(((-1.0)*sj0*x1040))+(((-1.0)*sj0*x1041)));
evalcond[1]=(((x1042*x1044))+((x1040*x1043))+((x1041*x1043))+(((-1.0)*x1039*x1042))+(((-1.0)*sj2*x1046))+(((-0.07641)*cj2))+((pz*sj1))+(((-1.0)*cj2*x1045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1047=((9.9999999995e-6)*r00);
IkReal x1048=(cj1*sj0);
IkReal x1049=(sj0*sj1);
IkReal x1050=((0.99999999995)*r01);
IkReal x1051=((0.99999999995)*cj0*r00);
IkReal x1052=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1050))+(((-1.0)*cj0*x1047))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj3))+((cj1*r02))+(((-1.0)*sj1*x1052))+(((-1.0)*sj1*x1051))+((x1047*x1049))+(((-1.0)*x1049*x1050)));
evalcond[3]=(cj3+((cj1*x1051))+((cj1*x1052))+((x1048*x1050))+((r02*sj1))+(((-1.0)*x1047*x1048)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1053=((9.9999999995e-6)*r00);
IkReal x1054=(cj1*sj0);
IkReal x1055=(py*sj1);
IkReal x1056=((9.9999999995e-6)*cj0);
IkReal x1057=(sj0*sj1);
IkReal x1058=((0.99999999995)*sj0);
IkReal x1059=((0.99999999995)*r01);
IkReal x1060=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1058))+(((-9.9999999995e-6)*r01*sj0))+((cj0*x1059))+(((-1.0)*cj0*x1053)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x1060))+((cj1*r02))+((x1053*x1057))+(((-1.0)*x1057*x1059))+(((-1.0)*r01*sj1*x1056)));
evalcond[3]=(((x1054*x1059))+((r02*sj1))+((cj1*x1060))+((cj1*r01*x1056))+(((-1.0)*x1053*x1054)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1057))+((cj1*pz))+(((-1.0)*x1055*x1058))+(((-1.0)*x1055*x1056)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1061=((7.24637681123188)*cj1);
IkReal x1062=(cj0*px);
IkReal x1063=(py*sj0);
IkReal x1064=(px*sj0);
IkReal x1065=((7.24637681123188e-5)*cj1);
IkReal x1066=(cj0*py);
if( IKabs(((((7.24637681123188)*x1064))+(((-7.24637681123188)*x1066))+(((7.24637681123188e-5)*x1063))+(((7.24637681123188e-5)*x1062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*x1061*x1062))+(((-1.0)*x1061*x1063))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x1065*x1066))+((x1064*x1065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x1064))+(((-7.24637681123188)*x1066))+(((7.24637681123188e-5)*x1063))+(((7.24637681123188e-5)*x1062))))+IKsqr(((-0.553695652173913)+(((-1.0)*x1061*x1062))+(((-1.0)*x1061*x1063))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x1065*x1066))+((x1064*x1065))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x1064))+(((-7.24637681123188)*x1066))+(((7.24637681123188e-5)*x1063))+(((7.24637681123188e-5)*x1062))), ((-0.553695652173913)+(((-1.0)*x1061*x1062))+(((-1.0)*x1061*x1063))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x1065*x1066))+((x1064*x1065))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1067=((9.9999999995e-6)*px);
IkReal x1068=((9.9999999995e-6)*py);
IkReal x1069=((0.99999999995)*px);
IkReal x1070=(cj1*sj0);
IkReal x1071=(cj0*cj1);
IkReal x1072=((0.99999999995)*py);
evalcond[0]=(((cj0*x1072))+(((-1.0)*cj0*x1067))+(((0.138)*(IKsin(j4))))+(((-1.0)*sj0*x1069))+(((-1.0)*sj0*x1068)));
evalcond[1]=((0.07641)+((x1068*x1071))+(((0.138)*(IKcos(j4))))+((x1069*x1071))+((x1070*x1072))+(((-1.0)*x1067*x1070))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1073=((9.9999999995e-6)*r00);
IkReal x1074=(cj1*sj0);
IkReal x1075=(py*sj1);
IkReal x1076=((9.9999999995e-6)*cj0);
IkReal x1077=(sj0*sj1);
IkReal x1078=((0.99999999995)*sj0);
IkReal x1079=((0.99999999995)*r01);
IkReal x1080=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1078))+((cj0*x1079))+(((-1.0)*cj0*x1073)));
evalcond[2]=((1.0)+(((-1.0)*sj1*x1080))+(((-1.0)*x1077*x1079))+((cj1*r02))+((x1073*x1077))+(((-1.0)*r01*sj1*x1076)));
evalcond[3]=(((x1074*x1079))+(((-1.0)*x1073*x1074))+((cj1*x1080))+((r02*sj1))+((cj1*r01*x1076)));
evalcond[4]=((0.1519)+(((-1.0)*x1075*x1078))+(((-1.0)*x1075*x1076))+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((9.9999999995e-6)*px*x1077)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1081=((7.24637681123188)*cj1);
IkReal x1082=(cj0*px);
IkReal x1083=(py*sj0);
IkReal x1084=(px*sj0);
IkReal x1085=((7.24637681123188e-5)*cj1);
IkReal x1086=(cj0*py);
if( IKabs(((((7.24637681123188)*x1084))+(((-7.24637681123188)*x1086))+(((7.24637681123188e-5)*x1083))+(((7.24637681123188e-5)*x1082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x1081*x1083))+((x1081*x1082))+(((-1.0)*x1084*x1085))+((x1085*x1086)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x1084))+(((-7.24637681123188)*x1086))+(((7.24637681123188e-5)*x1083))+(((7.24637681123188e-5)*x1082))))+IKsqr(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x1081*x1083))+((x1081*x1082))+(((-1.0)*x1084*x1085))+((x1085*x1086))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x1084))+(((-7.24637681123188)*x1086))+(((7.24637681123188e-5)*x1083))+(((7.24637681123188e-5)*x1082))), ((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x1081*x1083))+((x1081*x1082))+(((-1.0)*x1084*x1085))+((x1085*x1086))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1087=((9.9999999995e-6)*px);
IkReal x1088=((9.9999999995e-6)*py);
IkReal x1089=((0.99999999995)*px);
IkReal x1090=(cj1*sj0);
IkReal x1091=(cj0*cj1);
IkReal x1092=((0.99999999995)*py);
evalcond[0]=((((-1.0)*cj0*x1087))+(((-1.0)*sj0*x1089))+(((-1.0)*sj0*x1088))+(((0.138)*(IKsin(j4))))+((cj0*x1092)));
evalcond[1]=((-0.07641)+((x1089*x1091))+((x1088*x1091))+(((-1.0)*x1087*x1090))+((pz*sj1))+(((-0.138)*(IKcos(j4))))+((x1090*x1092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1093=((9.9999999995e-6)*r00);
IkReal x1094=(cj1*sj0);
IkReal x1095=(sj0*sj1);
IkReal x1096=((0.99999999995)*r01);
IkReal x1097=(cj0*cj1);
IkReal x1098=((9.9999999995e-6)*r01);
IkReal x1099=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj0*x1096))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj0*x1093))+(((-1.0)*sj0*x1098)));
evalcond[2]=(((cj1*r02))+(((-1.0)*cj0*sj1*x1098))+(((-1.0)*x1095*x1096))+(((-1.0)*sj1*x1099))+((x1093*x1095)));
evalcond[3]=((1.0)+((x1094*x1096))+((r02*sj1))+(((-1.0)*x1093*x1094))+(((0.99999999995)*r00*x1097))+((x1097*x1098)));
evalcond[4]=((((-9.9999999995e-6)*px*x1094))+(((0.99999999995)*py*x1094))+(((9.9999999995e-6)*py*x1097))+(((0.99999999995)*px*x1097))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1100=(py*sj1);
IkReal x1101=((7.24637681123188)*sj0);
IkReal x1102=((7.24637681123188e-5)*cj0);
IkReal x1103=(px*sj1);
IkReal x1104=((7.24637681123188)*cj0);
IkReal x1105=((7.24637681123188e-5)*sj0);
if( IKabs(((((-1.0)*py*x1104))+((py*x1105))+((px*x1102))+((px*x1101)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x1103*x1105))+(((-7.2463768115942)*cj1*pz))+((x1100*x1102))+((x1100*x1101))+((x1103*x1104)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x1104))+((py*x1105))+((px*x1102))+((px*x1101))))+IKsqr(((-1.65442028985507)+(((-1.0)*x1103*x1105))+(((-7.2463768115942)*cj1*pz))+((x1100*x1102))+((x1100*x1101))+((x1103*x1104))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*py*x1104))+((py*x1105))+((px*x1102))+((px*x1101))), ((-1.65442028985507)+(((-1.0)*x1103*x1105))+(((-7.2463768115942)*cj1*pz))+((x1100*x1102))+((x1100*x1101))+((x1103*x1104))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1106=(cj0*px);
IkReal x1107=(py*sj0);
IkReal x1108=((0.99999999995)*sj1);
IkReal x1109=(px*sj0);
IkReal x1110=((9.9999999995e-6)*sj1);
IkReal x1111=(cj0*py);
evalcond[0]=((((0.99999999995)*x1111))+(((-0.99999999995)*x1109))+(((-9.9999999995e-6)*x1107))+(((-9.9999999995e-6)*x1106))+(((0.138)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((x1109*x1110))+((cj1*pz))+(((-1.0)*x1107*x1108))+(((-1.0)*x1106*x1108))+(((-1.0)*x1110*x1111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1112=((9.9999999995e-6)*r00);
IkReal x1113=(cj1*sj0);
IkReal x1114=(sj0*sj1);
IkReal x1115=((0.99999999995)*r01);
IkReal x1116=(cj0*cj1);
IkReal x1117=((9.9999999995e-6)*r01);
IkReal x1118=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj0*x1117))+(((-0.99999999995)*r00*sj0))+((cj0*x1115))+(((-1.0)*cj0*x1112)));
evalcond[2]=((((-1.0)*x1114*x1115))+((x1112*x1114))+((cj1*r02))+(((-1.0)*sj1*x1118))+(((-1.0)*cj0*sj1*x1117)));
evalcond[3]=((-1.0)+((x1113*x1115))+(((-1.0)*x1112*x1113))+((r02*sj1))+(((0.99999999995)*r00*x1116))+((x1116*x1117)));
evalcond[4]=((((9.9999999995e-6)*py*x1116))+(((0.99999999995)*px*x1116))+(((0.99999999995)*py*x1113))+((pz*sj1))+(((-9.9999999995e-6)*px*x1113)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1119=(py*sj1);
IkReal x1120=((7.24637681123188)*sj0);
IkReal x1121=((7.24637681123188e-5)*cj0);
IkReal x1122=(px*sj1);
IkReal x1123=((7.24637681123188)*cj0);
IkReal x1124=((7.24637681123188e-5)*sj0);
if( IKabs((((px*x1121))+((px*x1120))+((py*x1124))+(((-1.0)*py*x1123)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((-1.0)*x1122*x1123))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x1119*x1120))+(((-1.0)*x1119*x1121))+((x1122*x1124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1121))+((px*x1120))+((py*x1124))+(((-1.0)*py*x1123))))+IKsqr(((0.547028985507246)+(((-1.0)*x1122*x1123))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x1119*x1120))+(((-1.0)*x1119*x1121))+((x1122*x1124))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x1121))+((px*x1120))+((py*x1124))+(((-1.0)*py*x1123))), ((0.547028985507246)+(((-1.0)*x1122*x1123))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x1119*x1120))+(((-1.0)*x1119*x1121))+((x1122*x1124))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1125=(cj0*px);
IkReal x1126=(py*sj0);
IkReal x1127=((0.99999999995)*sj1);
IkReal x1128=(px*sj0);
IkReal x1129=((9.9999999995e-6)*sj1);
IkReal x1130=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x1126))+(((-9.9999999995e-6)*x1125))+(((0.138)*(IKsin(j4))))+(((-0.99999999995)*x1128))+(((0.99999999995)*x1130)));
evalcond[1]=((0.07549)+(((-1.0)*x1126*x1127))+((cj1*pz))+((x1128*x1129))+(((-0.138)*(IKcos(j4))))+(((-1.0)*x1125*x1127))+(((-1.0)*x1129*x1130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1131=((499.999999975)*sj1);
IkReal x1132=(py*sj0);
IkReal x1133=(cj0*py);
IkReal x1134=(cj0*px);
IkReal x1135=(px*sj0);
IkReal x1136=((0.00499999999975)*sj1);
CheckValue<IkReal> x1137=IKPowWithIntegerCheck(cj3,-1);
if(!x1137.valid){
continue;
}
if( IKabs(((((7.24637681123188e-5)*x1132))+(((7.24637681123188e-5)*x1134))+(((7.24637681123188)*x1135))+(((-7.24637681123188)*x1133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1137.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1131*x1134))+((x1131*x1132))+(((-1.0)*x1135*x1136))+((x1133*x1136))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188e-5)*x1132))+(((7.24637681123188e-5)*x1134))+(((7.24637681123188)*x1135))+(((-7.24637681123188)*x1133))))+IKsqr(((0.0144927536231884)*(x1137.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1131*x1134))+((x1131*x1132))+(((-1.0)*x1135*x1136))+((x1133*x1136))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188e-5)*x1132))+(((7.24637681123188e-5)*x1134))+(((7.24637681123188)*x1135))+(((-7.24637681123188)*x1133))), ((0.0144927536231884)*(x1137.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1131*x1134))+((x1131*x1132))+(((-1.0)*x1135*x1136))+((x1133*x1136))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1138=IKcos(j4);
IkReal x1139=((9.9999999995e-6)*cj0);
IkReal x1140=(py*sj1);
IkReal x1141=((9.9999999995e-6)*sj0);
IkReal x1142=((0.99999999995)*sj0);
IkReal x1143=(cj1*px);
IkReal x1144=(cj1*py);
IkReal x1145=(px*sj1);
IkReal x1146=((0.99999999995)*cj0);
IkReal x1147=((0.138)*x1138);
evalcond[0]=(((py*x1146))+(((-1.0)*px*x1142))+(((0.138)*(IKsin(j4))))+(((-1.0)*py*x1141))+(((-1.0)*px*x1139)));
evalcond[1]=(((x1143*x1146))+(((-1.0)*x1141*x1143))+((x1142*x1144))+((sj3*x1147))+((x1139*x1144))+((pz*sj1))+(((0.07641)*sj3)));
evalcond[2]=((0.1519)+(((-1.0)*x1145*x1146))+(((-1.0)*x1140*x1142))+((x1141*x1145))+((cj3*x1147))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1139*x1140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1148=(cj0*cj1);
IkReal x1149=(px*sj0);
IkReal x1150=(py*sj0);
CheckValue<IkReal> x1151=IKPowWithIntegerCheck(sj3,-1);
if(!x1151.valid){
continue;
}
if( IKabs(((((-7.24637681123188)*cj0*py))+(((7.24637681123188e-5)*x1150))+(((7.24637681123188)*x1149))+(((7.24637681123188e-5)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1151.value)*(((((-499.999999975)*cj1*x1150))+(((-38.205)*sj3))+(((-0.00499999999975)*py*x1148))+(((0.00499999999975)*cj1*x1149))+(((-500.0)*pz*sj1))+(((-499.999999975)*px*x1148)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188)*cj0*py))+(((7.24637681123188e-5)*x1150))+(((7.24637681123188)*x1149))+(((7.24637681123188e-5)*cj0*px))))+IKsqr(((0.0144927536231884)*(x1151.value)*(((((-499.999999975)*cj1*x1150))+(((-38.205)*sj3))+(((-0.00499999999975)*py*x1148))+(((0.00499999999975)*cj1*x1149))+(((-500.0)*pz*sj1))+(((-499.999999975)*px*x1148))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188)*cj0*py))+(((7.24637681123188e-5)*x1150))+(((7.24637681123188)*x1149))+(((7.24637681123188e-5)*cj0*px))), ((0.0144927536231884)*(x1151.value)*(((((-499.999999975)*cj1*x1150))+(((-38.205)*sj3))+(((-0.00499999999975)*py*x1148))+(((0.00499999999975)*cj1*x1149))+(((-500.0)*pz*sj1))+(((-499.999999975)*px*x1148))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1152=IKcos(j4);
IkReal x1153=((9.9999999995e-6)*cj0);
IkReal x1154=(py*sj1);
IkReal x1155=((9.9999999995e-6)*sj0);
IkReal x1156=((0.99999999995)*sj0);
IkReal x1157=(cj1*px);
IkReal x1158=(cj1*py);
IkReal x1159=(px*sj1);
IkReal x1160=((0.99999999995)*cj0);
IkReal x1161=((0.138)*x1152);
evalcond[0]=((((-1.0)*px*x1156))+(((-1.0)*px*x1153))+(((-1.0)*py*x1155))+(((0.138)*(IKsin(j4))))+((py*x1160)));
evalcond[1]=((((-1.0)*x1155*x1157))+((x1157*x1160))+((x1153*x1158))+((pz*sj1))+(((0.07641)*sj3))+((x1156*x1158))+((sj3*x1161)));
evalcond[2]=((0.1519)+(((-1.0)*x1154*x1156))+(((-1.0)*x1159*x1160))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x1161))+(((-1.0)*x1153*x1154))+((x1155*x1159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1162=((9.9999999995e-6)*r00);
IkReal x1163=(cj1*sj0);
IkReal x1164=(sj0*sj1);
IkReal x1165=((0.99999999995)*r01);
IkReal x1166=((0.99999999995)*cj0*r00);
IkReal x1167=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1162))+((cj0*x1165))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj3))+((x1162*x1164))+(((-1.0)*sj1*x1167))+(((-1.0)*sj1*x1166))+((cj1*r02))+(((-1.0)*x1164*x1165)));
evalcond[3]=(((cj1*x1167))+((cj1*x1166))+((x1163*x1165))+(((-1.0)*x1162*x1163))+((r02*sj1))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1168=((9.9999999995e-6)*r00);
IkReal x1169=(cj1*sj0);
IkReal x1170=(py*sj1);
IkReal x1171=((9.9999999995e-6)*cj0);
IkReal x1172=(sj0*sj1);
IkReal x1173=((0.99999999995)*sj0);
IkReal x1174=((0.99999999995)*r01);
IkReal x1175=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1168))+((cj0*x1174))+(((-1.0)*r00*x1173)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj1*x1171))+((x1168*x1172))+(((-1.0)*sj1*x1175))+(((-1.0)*x1172*x1174))+((cj1*r02)));
evalcond[3]=(((cj1*x1175))+(((-1.0)*x1168*x1169))+((r02*sj1))+((cj1*r01*x1171))+((x1169*x1174)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((9.9999999995e-6)*px*x1172))+(((-1.0)*x1170*x1171))+(((-1.0)*x1170*x1173)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1176=((7.24637681123188)*cj1);
IkReal x1177=(cj0*px);
IkReal x1178=(py*sj0);
IkReal x1179=(px*sj0);
IkReal x1180=((7.24637681123188e-5)*cj1);
IkReal x1181=(cj0*py);
if( IKabs(((((-7.24637681123188e-5)*x1178))+(((-7.24637681123188e-5)*x1177))+(((7.24637681123188)*x1181))+(((-7.24637681123188)*x1179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x1180*x1181))+(((-1.0)*x1179*x1180))+((x1176*x1178))+((x1176*x1177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188e-5)*x1178))+(((-7.24637681123188e-5)*x1177))+(((7.24637681123188)*x1181))+(((-7.24637681123188)*x1179))))+IKsqr(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x1180*x1181))+(((-1.0)*x1179*x1180))+((x1176*x1178))+((x1176*x1177))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188e-5)*x1178))+(((-7.24637681123188e-5)*x1177))+(((7.24637681123188)*x1181))+(((-7.24637681123188)*x1179))), ((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x1180*x1181))+(((-1.0)*x1179*x1180))+((x1176*x1178))+((x1176*x1177))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1182=((9.9999999995e-6)*px);
IkReal x1183=((9.9999999995e-6)*py);
IkReal x1184=((0.99999999995)*px);
IkReal x1185=(cj1*sj0);
IkReal x1186=(cj0*cj1);
IkReal x1187=((0.99999999995)*py);
evalcond[0]=(((cj0*x1187))+(((-1.0)*sj0*x1184))+(((-1.0)*sj0*x1183))+(((-0.138)*(IKsin(j4))))+(((-1.0)*cj0*x1182)));
evalcond[1]=((-0.07641)+((x1184*x1186))+((x1183*x1186))+((x1185*x1187))+(((-1.0)*x1182*x1185))+((pz*sj1))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1188=((9.9999999995e-6)*r00);
IkReal x1189=(cj1*sj0);
IkReal x1190=(py*sj1);
IkReal x1191=((9.9999999995e-6)*cj0);
IkReal x1192=(sj0*sj1);
IkReal x1193=((0.99999999995)*sj0);
IkReal x1194=((0.99999999995)*r01);
IkReal x1195=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1193))+(((-9.9999999995e-6)*r01*sj0))+((cj0*x1194))+(((-1.0)*cj0*x1188)));
evalcond[2]=((1.0)+((cj1*r02))+((x1188*x1192))+(((-1.0)*x1192*x1194))+(((-1.0)*r01*sj1*x1191))+(((-1.0)*sj1*x1195)));
evalcond[3]=((((-1.0)*x1188*x1189))+((x1189*x1194))+((r02*sj1))+((cj1*r01*x1191))+((cj1*x1195)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x1190*x1191))+(((-1.0)*x1190*x1193))+((cj1*pz))+(((9.9999999995e-6)*px*x1192)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1196=((7.24637681123188)*cj1);
IkReal x1197=(cj0*px);
IkReal x1198=(py*sj0);
IkReal x1199=(px*sj0);
IkReal x1200=((7.24637681123188e-5)*cj1);
IkReal x1201=(cj0*py);
if( IKabs(((((7.24637681123188)*x1201))+(((-7.24637681123188)*x1199))+(((-7.24637681123188e-5)*x1197))+(((-7.24637681123188e-5)*x1198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((x1199*x1200))+(((-1.0)*x1200*x1201))+(((-1.0)*x1196*x1198))+(((-1.0)*x1196*x1197))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x1201))+(((-7.24637681123188)*x1199))+(((-7.24637681123188e-5)*x1197))+(((-7.24637681123188e-5)*x1198))))+IKsqr(((-0.553695652173913)+((x1199*x1200))+(((-1.0)*x1200*x1201))+(((-1.0)*x1196*x1198))+(((-1.0)*x1196*x1197))+(((-7.2463768115942)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x1201))+(((-7.24637681123188)*x1199))+(((-7.24637681123188e-5)*x1197))+(((-7.24637681123188e-5)*x1198))), ((-0.553695652173913)+((x1199*x1200))+(((-1.0)*x1200*x1201))+(((-1.0)*x1196*x1198))+(((-1.0)*x1196*x1197))+(((-7.2463768115942)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1202=((9.9999999995e-6)*px);
IkReal x1203=((9.9999999995e-6)*py);
IkReal x1204=((0.99999999995)*px);
IkReal x1205=(cj1*sj0);
IkReal x1206=(cj0*cj1);
IkReal x1207=((0.99999999995)*py);
evalcond[0]=(((cj0*x1207))+(((-1.0)*sj0*x1203))+(((-1.0)*sj0*x1204))+(((-1.0)*cj0*x1202))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07641)+((x1204*x1206))+(((0.138)*(IKcos(j4))))+(((-1.0)*x1202*x1205))+((x1203*x1206))+((x1205*x1207))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1208=((9.9999999995e-6)*r00);
IkReal x1209=(cj1*sj0);
IkReal x1210=(sj0*sj1);
IkReal x1211=((0.99999999995)*r01);
IkReal x1212=(cj0*cj1);
IkReal x1213=((9.9999999995e-6)*r01);
IkReal x1214=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj0*x1211))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj0*x1208))+(((-1.0)*sj0*x1213)));
evalcond[2]=(((cj1*r02))+(((-1.0)*cj0*sj1*x1213))+(((-1.0)*x1210*x1211))+((x1208*x1210))+(((-1.0)*sj1*x1214)));
evalcond[3]=((-1.0)+((x1212*x1213))+(((0.99999999995)*r00*x1212))+((r02*sj1))+((x1209*x1211))+(((-1.0)*x1208*x1209)));
evalcond[4]=((((-9.9999999995e-6)*px*x1209))+(((0.99999999995)*py*x1209))+(((0.99999999995)*px*x1212))+((pz*sj1))+(((9.9999999995e-6)*py*x1212)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1215=(py*sj1);
IkReal x1216=((7.24637681123188)*sj0);
IkReal x1217=((7.24637681123188e-5)*cj0);
IkReal x1218=(px*sj1);
IkReal x1219=((7.24637681123188)*cj0);
IkReal x1220=((7.24637681123188e-5)*sj0);
if( IKabs(((((-1.0)*px*x1217))+(((-1.0)*px*x1216))+(((-1.0)*py*x1220))+((py*x1219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+((x1218*x1219))+(((-1.0)*x1218*x1220))+(((-7.2463768115942)*cj1*pz))+((x1215*x1216))+((x1215*x1217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x1217))+(((-1.0)*px*x1216))+(((-1.0)*py*x1220))+((py*x1219))))+IKsqr(((-1.65442028985507)+((x1218*x1219))+(((-1.0)*x1218*x1220))+(((-7.2463768115942)*cj1*pz))+((x1215*x1216))+((x1215*x1217))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*px*x1217))+(((-1.0)*px*x1216))+(((-1.0)*py*x1220))+((py*x1219))), ((-1.65442028985507)+((x1218*x1219))+(((-1.0)*x1218*x1220))+(((-7.2463768115942)*cj1*pz))+((x1215*x1216))+((x1215*x1217))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1221=(cj0*px);
IkReal x1222=(py*sj0);
IkReal x1223=((0.99999999995)*sj1);
IkReal x1224=(px*sj0);
IkReal x1225=((9.9999999995e-6)*sj1);
IkReal x1226=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x1221))+(((-9.9999999995e-6)*x1222))+(((-0.99999999995)*x1224))+(((0.99999999995)*x1226))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+(((-1.0)*x1225*x1226))+((x1224*x1225))+(((-1.0)*x1221*x1223))+(((-1.0)*x1222*x1223))+((cj1*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1227=((9.9999999995e-6)*r00);
IkReal x1228=(cj1*sj0);
IkReal x1229=(sj0*sj1);
IkReal x1230=((0.99999999995)*r01);
IkReal x1231=(cj0*cj1);
IkReal x1232=((9.9999999995e-6)*r01);
IkReal x1233=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x1227))+((cj0*x1230))+(((-1.0)*sj0*x1232))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=(((cj1*r02))+(((-1.0)*x1229*x1230))+((x1227*x1229))+(((-1.0)*sj1*x1233))+(((-1.0)*cj0*sj1*x1232)));
evalcond[3]=((1.0)+(((-1.0)*x1227*x1228))+((r02*sj1))+(((0.99999999995)*r00*x1231))+((x1231*x1232))+((x1228*x1230)));
evalcond[4]=((((0.99999999995)*py*x1228))+(((9.9999999995e-6)*py*x1231))+(((0.99999999995)*px*x1231))+(((-9.9999999995e-6)*px*x1228))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1234=(py*sj1);
IkReal x1235=((7.24637681123188)*sj0);
IkReal x1236=((7.24637681123188e-5)*cj0);
IkReal x1237=(px*sj1);
IkReal x1238=((7.24637681123188)*cj0);
IkReal x1239=((7.24637681123188e-5)*sj0);
if( IKabs(((((-1.0)*px*x1236))+(((-1.0)*px*x1235))+((py*x1238))+(((-1.0)*py*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((-1.0)*x1237*x1238))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x1234*x1236))+(((-1.0)*x1234*x1235))+((x1237*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x1236))+(((-1.0)*px*x1235))+((py*x1238))+(((-1.0)*py*x1239))))+IKsqr(((0.547028985507246)+(((-1.0)*x1237*x1238))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x1234*x1236))+(((-1.0)*x1234*x1235))+((x1237*x1239))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*px*x1236))+(((-1.0)*px*x1235))+((py*x1238))+(((-1.0)*py*x1239))), ((0.547028985507246)+(((-1.0)*x1237*x1238))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x1234*x1236))+(((-1.0)*x1234*x1235))+((x1237*x1239))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1240=(cj0*px);
IkReal x1241=(py*sj0);
IkReal x1242=((0.99999999995)*sj1);
IkReal x1243=(px*sj0);
IkReal x1244=((9.9999999995e-6)*sj1);
IkReal x1245=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x1240))+(((-9.9999999995e-6)*x1241))+(((0.99999999995)*x1245))+(((-0.99999999995)*x1243))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07549)+(((-1.0)*x1244*x1245))+((cj1*pz))+(((-1.0)*x1240*x1242))+((x1243*x1244))+(((-0.138)*(IKcos(j4))))+(((-1.0)*x1241*x1242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1246=((499.999999975)*sj1);
IkReal x1247=(py*sj0);
IkReal x1248=(cj0*py);
IkReal x1249=(cj0*px);
IkReal x1250=(px*sj0);
IkReal x1251=((0.00499999999975)*sj1);
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(cj3,-1);
if(!x1252.valid){
continue;
}
if( IKabs(((((7.24637681123188)*x1248))+(((-7.24637681123188e-5)*x1247))+(((-7.24637681123188e-5)*x1249))+(((-7.24637681123188)*x1250)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1252.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1246*x1247))+((x1246*x1249))+(((-1.0)*x1250*x1251))+(((-38.205)*cj3))+((x1248*x1251)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x1248))+(((-7.24637681123188e-5)*x1247))+(((-7.24637681123188e-5)*x1249))+(((-7.24637681123188)*x1250))))+IKsqr(((0.0144927536231884)*(x1252.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1246*x1247))+((x1246*x1249))+(((-1.0)*x1250*x1251))+(((-38.205)*cj3))+((x1248*x1251))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x1248))+(((-7.24637681123188e-5)*x1247))+(((-7.24637681123188e-5)*x1249))+(((-7.24637681123188)*x1250))), ((0.0144927536231884)*(x1252.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1246*x1247))+((x1246*x1249))+(((-1.0)*x1250*x1251))+(((-38.205)*cj3))+((x1248*x1251))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1253=IKcos(j4);
IkReal x1254=((9.9999999995e-6)*cj0);
IkReal x1255=(py*sj1);
IkReal x1256=((9.9999999995e-6)*sj0);
IkReal x1257=((0.99999999995)*sj0);
IkReal x1258=(cj1*px);
IkReal x1259=(cj1*py);
IkReal x1260=(px*sj1);
IkReal x1261=((0.99999999995)*cj0);
IkReal x1262=((0.138)*x1253);
evalcond[0]=((((-1.0)*px*x1254))+(((-1.0)*px*x1257))+(((-0.138)*(IKsin(j4))))+(((-1.0)*py*x1256))+((py*x1261)));
evalcond[1]=((((-0.07641)*sj3))+((x1258*x1261))+(((-1.0)*sj3*x1262))+(((-1.0)*x1256*x1258))+((x1254*x1259))+((x1257*x1259))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x1260*x1261))+((cj3*x1262))+(((-1.0)*x1255*x1257))+((x1256*x1260))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1254*x1255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1263=(cj0*cj1);
IkReal x1264=(px*sj0);
IkReal x1265=(py*sj0);
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(sj3,-1);
if(!x1266.valid){
continue;
}
if( IKabs(((((7.24637681123188)*cj0*py))+(((-7.24637681123188e-5)*cj0*px))+(((-7.24637681123188e-5)*x1265))+(((-7.24637681123188)*x1264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1266.value)*(((((499.999999975)*cj1*x1265))+(((-38.205)*sj3))+(((0.00499999999975)*py*x1263))+(((500.0)*pz*sj1))+(((-0.00499999999975)*cj1*x1264))+(((499.999999975)*px*x1263)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*cj0*py))+(((-7.24637681123188e-5)*cj0*px))+(((-7.24637681123188e-5)*x1265))+(((-7.24637681123188)*x1264))))+IKsqr(((0.0144927536231884)*(x1266.value)*(((((499.999999975)*cj1*x1265))+(((-38.205)*sj3))+(((0.00499999999975)*py*x1263))+(((500.0)*pz*sj1))+(((-0.00499999999975)*cj1*x1264))+(((499.999999975)*px*x1263))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*cj0*py))+(((-7.24637681123188e-5)*cj0*px))+(((-7.24637681123188e-5)*x1265))+(((-7.24637681123188)*x1264))), ((0.0144927536231884)*(x1266.value)*(((((499.999999975)*cj1*x1265))+(((-38.205)*sj3))+(((0.00499999999975)*py*x1263))+(((500.0)*pz*sj1))+(((-0.00499999999975)*cj1*x1264))+(((499.999999975)*px*x1263))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1267=IKcos(j4);
IkReal x1268=((9.9999999995e-6)*cj0);
IkReal x1269=(py*sj1);
IkReal x1270=((9.9999999995e-6)*sj0);
IkReal x1271=((0.99999999995)*sj0);
IkReal x1272=(cj1*px);
IkReal x1273=(cj1*py);
IkReal x1274=(px*sj1);
IkReal x1275=((0.99999999995)*cj0);
IkReal x1276=((0.138)*x1267);
evalcond[0]=((((-1.0)*py*x1270))+((py*x1275))+(((-1.0)*px*x1268))+(((-1.0)*px*x1271))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((((-0.07641)*sj3))+(((-1.0)*x1270*x1272))+((x1272*x1275))+(((-1.0)*sj3*x1276))+((x1268*x1273))+((x1271*x1273))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x1268*x1269))+(((-1.0)*x1269*x1271))+((cj1*pz))+((cj3*x1276))+(((0.07641)*cj3))+(((-1.0)*x1274*x1275))+((x1270*x1274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1277=((9.9999999995e-6)*r00);
IkReal x1278=(cj1*sj0);
IkReal x1279=(sj0*sj1);
IkReal x1280=((0.99999999995)*r01);
IkReal x1281=((0.99999999995)*cj0*r00);
IkReal x1282=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x1277))+(((-9.9999999995e-6)*r01*sj0))+cj3+((cj0*x1280))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj3))+((x1277*x1279))+((cj1*r02))+(((-1.0)*sj1*x1281))+(((-1.0)*sj1*x1282))+(((-1.0)*x1279*x1280)));
evalcond[3]=(((x1278*x1280))+(((-1.0)*x1277*x1278))+((r02*sj1))+((cj1*x1281))+((cj1*x1282)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1283=((9.9999999995e-6)*r00);
IkReal x1284=(cj1*sj0);
IkReal x1285=(py*sj1);
IkReal x1286=((9.9999999995e-6)*cj0);
IkReal x1287=(sj0*sj1);
IkReal x1288=((0.99999999995)*sj0);
IkReal x1289=((0.99999999995)*r01);
IkReal x1290=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1289))+(((-1.0)*r00*x1288))+(((-1.0)*cj0*x1283)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x1290))+((cj1*r02))+((x1283*x1287))+(((-1.0)*x1287*x1289))+(((-1.0)*r01*sj1*x1286)));
evalcond[3]=(((x1284*x1289))+((cj1*x1290))+((r02*sj1))+((cj1*r01*x1286))+(((-1.0)*x1283*x1284)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x1285*x1288))+(((-1.0)*x1285*x1286))+((cj1*pz))+(((9.9999999995e-6)*px*x1287)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1291=((7.24637681123188)*cj1);
IkReal x1292=(cj0*px);
IkReal x1293=(py*sj0);
IkReal x1294=(px*sj0);
IkReal x1295=((7.24637681123188e-5)*cj1);
IkReal x1296=(cj0*py);
if( IKabs(((((7.2463768115942)*pz*sj1))+((x1295*x1296))+((x1291*x1293))+((x1291*x1292))+(((-1.0)*x1294*x1295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-7.24637681123188)*x1296))+(((7.24637681123188e-5)*x1292))+(((7.24637681123188e-5)*x1293))+(((7.24637681123188)*x1294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*pz*sj1))+((x1295*x1296))+((x1291*x1293))+((x1291*x1292))+(((-1.0)*x1294*x1295))))+IKsqr(((-0.553695652173913)+(((-7.24637681123188)*x1296))+(((7.24637681123188e-5)*x1292))+(((7.24637681123188e-5)*x1293))+(((7.24637681123188)*x1294))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*pz*sj1))+((x1295*x1296))+((x1291*x1293))+((x1291*x1292))+(((-1.0)*x1294*x1295))), ((-0.553695652173913)+(((-7.24637681123188)*x1296))+(((7.24637681123188e-5)*x1292))+(((7.24637681123188e-5)*x1293))+(((7.24637681123188)*x1294))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1297=((9.9999999995e-6)*px);
IkReal x1298=((9.9999999995e-6)*py);
IkReal x1299=((0.99999999995)*px);
IkReal x1300=(cj1*sj0);
IkReal x1301=(cj0*cj1);
IkReal x1302=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*sj0*x1299))+(((-1.0)*sj0*x1298))+(((-1.0)*cj0*x1297))+((cj0*x1302)));
evalcond[1]=(((x1299*x1301))+((x1300*x1302))+(((-1.0)*x1297*x1300))+((pz*sj1))+((x1298*x1301))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1303=((9.9999999995e-6)*r00);
IkReal x1304=(cj1*sj0);
IkReal x1305=(py*sj1);
IkReal x1306=((9.9999999995e-6)*cj0);
IkReal x1307=(sj0*sj1);
IkReal x1308=((0.99999999995)*sj0);
IkReal x1309=((0.99999999995)*r01);
IkReal x1310=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1308))+(((-1.0)*cj0*x1303))+((cj0*x1309)));
evalcond[2]=((1.0)+(((-1.0)*x1307*x1309))+(((-1.0)*r01*sj1*x1306))+((cj1*r02))+((x1303*x1307))+(((-1.0)*sj1*x1310)));
evalcond[3]=(((cj1*r01*x1306))+(((-1.0)*x1303*x1304))+((r02*sj1))+((x1304*x1309))+((cj1*x1310)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((-1.0)*x1305*x1306))+(((-1.0)*x1305*x1308))+(((9.9999999995e-6)*px*x1307)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1311=((7.24637681123188)*px);
IkReal x1312=(cj0*cj1);
IkReal x1313=(cj1*sj0);
IkReal x1314=((7.24637681123188)*py);
IkReal x1315=((7.24637681123188e-5)*px);
IkReal x1316=((7.24637681123188e-5)*py);
if( IKabs((((x1311*x1312))+(((7.2463768115942)*pz*sj1))+(((-1.0)*x1313*x1315))+((x1313*x1314))+((x1312*x1316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*sj0*x1316))+(((-1.0)*sj0*x1311))+(((-1.0)*cj0*x1315))+((cj0*x1314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1311*x1312))+(((7.2463768115942)*pz*sj1))+(((-1.0)*x1313*x1315))+((x1313*x1314))+((x1312*x1316))))+IKsqr(((-0.553695652173913)+(((-1.0)*sj0*x1316))+(((-1.0)*sj0*x1311))+(((-1.0)*cj0*x1315))+((cj0*x1314))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1311*x1312))+(((7.2463768115942)*pz*sj1))+(((-1.0)*x1313*x1315))+((x1313*x1314))+((x1312*x1316))), ((-0.553695652173913)+(((-1.0)*sj0*x1316))+(((-1.0)*sj0*x1311))+(((-1.0)*cj0*x1315))+((cj0*x1314))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1317=((9.9999999995e-6)*px);
IkReal x1318=((9.9999999995e-6)*py);
IkReal x1319=((0.99999999995)*px);
IkReal x1320=(cj1*sj0);
IkReal x1321=(cj0*cj1);
IkReal x1322=((0.99999999995)*py);
evalcond[0]=((-0.07641)+(((-1.0)*sj0*x1318))+(((-1.0)*sj0*x1319))+(((-1.0)*cj0*x1317))+(((-0.138)*(IKcos(j4))))+((cj0*x1322)));
evalcond[1]=(((x1320*x1322))+((x1319*x1321))+((pz*sj1))+(((-0.138)*(IKsin(j4))))+((x1318*x1321))+(((-1.0)*x1317*x1320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1323=((9.9999999995e-6)*r00);
IkReal x1324=(cj1*sj0);
IkReal x1325=((0.99999999995)*sj0);
IkReal x1326=(r01*sj1);
IkReal x1327=((9.9999999995e-6)*sj0);
IkReal x1328=((9.9999999995e-6)*cj0);
IkReal x1329=((0.99999999995)*r01);
IkReal x1330=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r01*x1327))+(((-1.0)*r00*x1325))+(((-1.0)*cj0*x1323))+((cj0*x1329)));
evalcond[2]=(((cj1*r02))+(((-1.0)*x1326*x1328))+((sj0*sj1*x1323))+(((-1.0)*x1325*x1326))+(((-1.0)*sj1*x1330)));
evalcond[3]=((((-1.0)*x1323*x1324))+((x1324*x1329))+((r02*sj1))+((cj1*r01*x1328))+((cj1*x1330)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*py*x1327))+(((-1.0)*px*x1325))+(((-1.0)*px*x1328)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1331=((7.24637681123188)*cj1);
IkReal x1332=(cj0*px);
IkReal x1333=(py*sj0);
IkReal x1334=((7.2463768115942)*pz);
IkReal x1335=((7.24637681123188)*sj1);
IkReal x1336=((7.24637681123188e-5)*px*sj0);
IkReal x1337=((7.24637681123188e-5)*cj0*py);
if( IKabs((((x1331*x1333))+((x1331*x1332))+(((-1.0)*cj1*x1336))+((cj1*x1337))+((sj1*x1334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*cj1*x1334))+((sj1*x1337))+(((-1.0)*sj1*x1336))+((x1333*x1335))+((x1332*x1335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1331*x1333))+((x1331*x1332))+(((-1.0)*cj1*x1336))+((cj1*x1337))+((sj1*x1334))))+IKsqr(((-1.65442028985507)+(((-1.0)*cj1*x1334))+((sj1*x1337))+(((-1.0)*sj1*x1336))+((x1333*x1335))+((x1332*x1335))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1331*x1333))+((x1331*x1332))+(((-1.0)*cj1*x1336))+((cj1*x1337))+((sj1*x1334))), ((-1.65442028985507)+(((-1.0)*cj1*x1334))+((sj1*x1337))+(((-1.0)*sj1*x1336))+((x1333*x1335))+((x1332*x1335))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1338=((0.99999999995)*sj1);
IkReal x1339=(py*sj0);
IkReal x1340=((9.9999999995e-6)*cj1);
IkReal x1341=(px*sj0);
IkReal x1342=(cj0*px);
IkReal x1343=(cj0*py);
IkReal x1344=((0.99999999995)*cj1);
IkReal x1345=((9.9999999995e-6)*sj1);
evalcond[0]=((((-1.0)*x1340*x1341))+((x1339*x1344))+((x1340*x1343))+((x1342*x1344))+((pz*sj1))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+(((-1.0)*x1338*x1342))+((x1341*x1345))+((cj1*pz))+(((-1.0)*x1338*x1339))+(((-1.0)*x1343*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1346=((9.9999999995e-6)*r00);
IkReal x1347=(cj1*sj0);
IkReal x1348=((0.99999999995)*sj0);
IkReal x1349=(r01*sj1);
IkReal x1350=((9.9999999995e-6)*sj0);
IkReal x1351=((9.9999999995e-6)*cj0);
IkReal x1352=((0.99999999995)*r01);
IkReal x1353=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*cj0*x1346))+(((-1.0)*r00*x1348))+(((-1.0)*r01*x1350))+((cj0*x1352)));
evalcond[2]=(((sj0*sj1*x1346))+(((-1.0)*sj1*x1353))+((cj1*r02))+(((-1.0)*x1348*x1349))+(((-1.0)*x1349*x1351)));
evalcond[3]=((((-1.0)*x1346*x1347))+((cj1*x1353))+((r02*sj1))+((x1347*x1352))+((cj1*r01*x1351)));
evalcond[4]=((((-1.0)*px*x1351))+(((0.99999999995)*cj0*py))+(((-1.0)*px*x1348))+(((-1.0)*py*x1350)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1354=((7.24637681123188)*cj1);
IkReal x1355=(cj0*px);
IkReal x1356=(py*sj0);
IkReal x1357=((7.2463768115942)*pz);
IkReal x1358=((7.24637681123188)*sj1);
IkReal x1359=((7.24637681123188e-5)*px*sj0);
IkReal x1360=((7.24637681123188e-5)*cj0*py);
if( IKabs((((sj1*x1357))+((cj1*x1360))+((x1354*x1356))+((x1354*x1355))+(((-1.0)*cj1*x1359)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((-1.0)*sj1*x1360))+((sj1*x1359))+((cj1*x1357))+(((-1.0)*x1355*x1358))+(((-1.0)*x1356*x1358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1357))+((cj1*x1360))+((x1354*x1356))+((x1354*x1355))+(((-1.0)*cj1*x1359))))+IKsqr(((0.547028985507246)+(((-1.0)*sj1*x1360))+((sj1*x1359))+((cj1*x1357))+(((-1.0)*x1355*x1358))+(((-1.0)*x1356*x1358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x1357))+((cj1*x1360))+((x1354*x1356))+((x1354*x1355))+(((-1.0)*cj1*x1359))), ((0.547028985507246)+(((-1.0)*sj1*x1360))+((sj1*x1359))+((cj1*x1357))+(((-1.0)*x1355*x1358))+(((-1.0)*x1356*x1358))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1361=((0.99999999995)*sj1);
IkReal x1362=(py*sj0);
IkReal x1363=((9.9999999995e-6)*cj1);
IkReal x1364=(px*sj0);
IkReal x1365=(cj0*px);
IkReal x1366=(cj0*py);
IkReal x1367=((0.99999999995)*cj1);
IkReal x1368=((9.9999999995e-6)*sj1);
evalcond[0]=(((x1363*x1366))+((x1365*x1367))+((pz*sj1))+(((-1.0)*x1363*x1364))+(((-0.138)*(IKsin(j4))))+((x1362*x1367)));
evalcond[1]=((0.07549)+(((-1.0)*x1366*x1368))+((cj1*pz))+((x1364*x1368))+(((-0.138)*(IKcos(j4))))+(((-1.0)*x1361*x1365))+(((-1.0)*x1361*x1362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1369=((7.24637681123188)*cj1);
IkReal x1370=(cj0*px);
IkReal x1371=(py*sj0);
IkReal x1372=(px*sj0);
IkReal x1373=((7.24637681123188e-5)*cj1);
IkReal x1374=((499.999999975)*sj1);
IkReal x1375=((0.00499999999975)*sj1);
IkReal x1376=(cj0*py);
CheckValue<IkReal> x1377=IKPowWithIntegerCheck(cj3,-1);
if(!x1377.valid){
continue;
}
if( IKabs(((((7.2463768115942)*pz*sj1))+(((-1.0)*x1372*x1373))+((x1369*x1371))+((x1369*x1370))+((x1373*x1376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1377.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1375*x1376))+(((-1.0)*x1372*x1375))+((x1371*x1374))+((x1370*x1374))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*pz*sj1))+(((-1.0)*x1372*x1373))+((x1369*x1371))+((x1369*x1370))+((x1373*x1376))))+IKsqr(((0.0144927536231884)*(x1377.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1375*x1376))+(((-1.0)*x1372*x1375))+((x1371*x1374))+((x1370*x1374))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*pz*sj1))+(((-1.0)*x1372*x1373))+((x1369*x1371))+((x1369*x1370))+((x1373*x1376))), ((0.0144927536231884)*(x1377.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1375*x1376))+(((-1.0)*x1372*x1375))+((x1371*x1374))+((x1370*x1374))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1378=IKcos(j4);
IkReal x1379=((9.9999999995e-6)*cj0);
IkReal x1380=(py*sj1);
IkReal x1381=(px*sj0);
IkReal x1382=(py*sj0);
IkReal x1383=((0.138)*x1378);
IkReal x1384=((0.99999999995)*cj0*px);
evalcond[0]=((((-1.0)*px*x1379))+(((-0.99999999995)*x1381))+(((0.99999999995)*cj0*py))+(((-9.9999999995e-6)*x1382))+((sj3*x1383))+(((0.07641)*sj3)));
evalcond[1]=((((0.99999999995)*cj1*x1382))+((cj1*py*x1379))+(((-9.9999999995e-6)*cj1*x1381))+((pz*sj1))+((cj1*x1384))+(((-0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj3*x1383))+(((9.9999999995e-6)*sj1*x1381))+(((-0.99999999995)*sj0*x1380))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1379*x1380))+(((-1.0)*sj1*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1385=((7.24637681123188)*cj1);
IkReal x1386=(cj0*px);
IkReal x1387=(py*sj0);
IkReal x1388=((7.24637681123188e-5)*cj1);
IkReal x1389=(px*sj0);
IkReal x1390=(cj0*py);
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(sj3,-1);
if(!x1391.valid){
continue;
}
if( IKabs(((((7.2463768115942)*pz*sj1))+((x1388*x1390))+(((-1.0)*x1388*x1389))+((x1385*x1387))+((x1385*x1386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1391.value)*(((((-38.205)*sj3))+(((-499.999999975)*x1390))+(((0.00499999999975)*x1387))+(((0.00499999999975)*x1386))+(((499.999999975)*x1389)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*pz*sj1))+((x1388*x1390))+(((-1.0)*x1388*x1389))+((x1385*x1387))+((x1385*x1386))))+IKsqr(((0.0144927536231884)*(x1391.value)*(((((-38.205)*sj3))+(((-499.999999975)*x1390))+(((0.00499999999975)*x1387))+(((0.00499999999975)*x1386))+(((499.999999975)*x1389))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*pz*sj1))+((x1388*x1390))+(((-1.0)*x1388*x1389))+((x1385*x1387))+((x1385*x1386))), ((0.0144927536231884)*(x1391.value)*(((((-38.205)*sj3))+(((-499.999999975)*x1390))+(((0.00499999999975)*x1387))+(((0.00499999999975)*x1386))+(((499.999999975)*x1389))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1392=IKcos(j4);
IkReal x1393=((9.9999999995e-6)*cj0);
IkReal x1394=(py*sj1);
IkReal x1395=(px*sj0);
IkReal x1396=(py*sj0);
IkReal x1397=((0.138)*x1392);
IkReal x1398=((0.99999999995)*cj0*px);
evalcond[0]=((((-0.99999999995)*x1395))+(((0.99999999995)*cj0*py))+(((-9.9999999995e-6)*x1396))+(((-1.0)*px*x1393))+((sj3*x1397))+(((0.07641)*sj3)));
evalcond[1]=((((-9.9999999995e-6)*cj1*x1395))+(((0.99999999995)*cj1*x1396))+((cj1*py*x1393))+((pz*sj1))+(((-0.138)*(IKsin(j4))))+((cj1*x1398)));
evalcond[2]=((0.1519)+((cj3*x1397))+(((-1.0)*x1393*x1394))+(((9.9999999995e-6)*sj1*x1395))+((cj1*pz))+(((-0.99999999995)*sj0*x1394))+(((0.07641)*cj3))+(((-1.0)*sj1*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1399=((9.9999999995e-6)*r00);
IkReal x1400=(cj1*sj0);
IkReal x1401=(sj0*sj1);
IkReal x1402=((9.9999999995e-6)*r01);
IkReal x1403=((0.99999999995)*r01);
IkReal x1404=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x1399))+(((-1.0)*sj0*x1402))+((cj0*x1403))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj3)));
evalcond[2]=((((-1.0)*cj0*sj1*x1402))+(((-1.0)*sj1*x1404))+(((-1.0)*sj3))+((cj1*r02))+((x1399*x1401))+(((-1.0)*x1401*x1403)));
evalcond[3]=((((-1.0)*x1399*x1400))+((r02*sj1))+((cj0*cj1*x1402))+((cj1*x1404))+((x1400*x1403)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1405=((9.9999999995e-6)*r00);
IkReal x1406=(cj1*sj0);
IkReal x1407=(py*sj1);
IkReal x1408=((9.9999999995e-6)*cj0);
IkReal x1409=(sj0*sj1);
IkReal x1410=((0.99999999995)*sj0);
IkReal x1411=((0.99999999995)*r01);
IkReal x1412=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1411))+(((-1.0)*r00*x1410))+(((-1.0)*cj0*x1405)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj1*x1408))+((cj1*r02))+((x1405*x1409))+(((-1.0)*sj1*x1412))+(((-1.0)*x1409*x1411)));
evalcond[3]=(((r02*sj1))+(((-1.0)*x1405*x1406))+((x1406*x1411))+((cj1*r01*x1408))+((cj1*x1412)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((-1.0)*x1407*x1410))+(((9.9999999995e-6)*px*x1409))+(((-1.0)*x1407*x1408)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1413=((7.24637681123188)*px);
IkReal x1414=(cj0*cj1);
IkReal x1415=(cj1*sj0);
IkReal x1416=((7.24637681123188)*py);
IkReal x1417=((7.24637681123188e-5)*px);
IkReal x1418=((7.24637681123188e-5)*py);
if( IKabs(((((-1.0)*x1415*x1416))+((x1415*x1417))+(((-1.0)*x1413*x1414))+(((-1.0)*x1414*x1418))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((cj0*x1416))+(((-1.0)*sj0*x1418))+(((-1.0)*sj0*x1413))+(((-1.0)*cj0*x1417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1415*x1416))+((x1415*x1417))+(((-1.0)*x1413*x1414))+(((-1.0)*x1414*x1418))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+((cj0*x1416))+(((-1.0)*sj0*x1418))+(((-1.0)*sj0*x1413))+(((-1.0)*cj0*x1417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1415*x1416))+((x1415*x1417))+(((-1.0)*x1413*x1414))+(((-1.0)*x1414*x1418))+(((-7.2463768115942)*pz*sj1))), ((-0.553695652173913)+((cj0*x1416))+(((-1.0)*sj0*x1418))+(((-1.0)*sj0*x1413))+(((-1.0)*cj0*x1417))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1419=((9.9999999995e-6)*px);
IkReal x1420=((9.9999999995e-6)*py);
IkReal x1421=((0.99999999995)*px);
IkReal x1422=(cj1*sj0);
IkReal x1423=(cj0*cj1);
IkReal x1424=((0.99999999995)*py);
evalcond[0]=((-0.07641)+(((-1.0)*sj0*x1421))+(((-1.0)*sj0*x1420))+(((-1.0)*cj0*x1419))+(((-0.138)*(IKcos(j4))))+((cj0*x1424)));
evalcond[1]=(((x1420*x1423))+((x1422*x1424))+(((-1.0)*x1419*x1422))+(((0.138)*(IKsin(j4))))+((pz*sj1))+((x1421*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1425=((9.9999999995e-6)*r00);
IkReal x1426=(cj1*sj0);
IkReal x1427=(py*sj1);
IkReal x1428=((9.9999999995e-6)*cj0);
IkReal x1429=(sj0*sj1);
IkReal x1430=((0.99999999995)*sj0);
IkReal x1431=((0.99999999995)*r01);
IkReal x1432=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1425))+((cj0*x1431))+(((-1.0)*r00*x1430)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj1*x1428))+((x1425*x1429))+(((-1.0)*x1429*x1431))+((cj1*r02))+(((-1.0)*sj1*x1432)));
evalcond[3]=((((-1.0)*x1425*x1426))+((r02*sj1))+((x1426*x1431))+((cj1*x1432))+((cj1*r01*x1428)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x1427*x1428))+((cj1*pz))+(((-1.0)*x1427*x1430))+(((9.9999999995e-6)*px*x1429)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1433=((7.24637681123188)*cj1);
IkReal x1434=(cj0*px);
IkReal x1435=(py*sj0);
IkReal x1436=(px*sj0);
IkReal x1437=((7.24637681123188e-5)*cj1);
IkReal x1438=(cj0*py);
if( IKabs(((((-1.0)*x1437*x1438))+((x1436*x1437))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x1433*x1435))+(((-1.0)*x1433*x1434)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.24637681123188e-5)*x1434))+(((7.24637681123188e-5)*x1435))+(((7.24637681123188)*x1436))+(((-7.24637681123188)*x1438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1437*x1438))+((x1436*x1437))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x1433*x1435))+(((-1.0)*x1433*x1434))))+IKsqr(((-0.553695652173913)+(((7.24637681123188e-5)*x1434))+(((7.24637681123188e-5)*x1435))+(((7.24637681123188)*x1436))+(((-7.24637681123188)*x1438))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1437*x1438))+((x1436*x1437))+(((-7.2463768115942)*pz*sj1))+(((-1.0)*x1433*x1435))+(((-1.0)*x1433*x1434))), ((-0.553695652173913)+(((7.24637681123188e-5)*x1434))+(((7.24637681123188e-5)*x1435))+(((7.24637681123188)*x1436))+(((-7.24637681123188)*x1438))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1439=((9.9999999995e-6)*px);
IkReal x1440=((9.9999999995e-6)*py);
IkReal x1441=((0.99999999995)*px);
IkReal x1442=(cj1*sj0);
IkReal x1443=(cj0*cj1);
IkReal x1444=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+((cj0*x1444))+(((-1.0)*cj0*x1439))+(((-1.0)*sj0*x1440))+(((-1.0)*sj0*x1441)));
evalcond[1]=(((x1442*x1444))+((x1441*x1443))+((x1440*x1443))+(((-1.0)*x1439*x1442))+(((0.138)*(IKsin(j4))))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1445=((9.9999999995e-6)*r00);
IkReal x1446=(cj1*sj0);
IkReal x1447=((0.99999999995)*sj0);
IkReal x1448=(r01*sj1);
IkReal x1449=((9.9999999995e-6)*sj0);
IkReal x1450=((9.9999999995e-6)*cj0);
IkReal x1451=((0.99999999995)*r01);
IkReal x1452=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x1447))+(((-1.0)*cj0*x1445))+(((-1.0)*r01*x1449))+((cj0*x1451)));
evalcond[2]=((((-1.0)*x1448*x1450))+((cj1*r02))+(((-1.0)*x1447*x1448))+((sj0*sj1*x1445))+(((-1.0)*sj1*x1452)));
evalcond[3]=(((cj1*x1452))+((x1446*x1451))+(((-1.0)*x1445*x1446))+((r02*sj1))+((cj1*r01*x1450)));
evalcond[4]=((((-1.0)*px*x1447))+(((-1.0)*px*x1450))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x1449)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1453=((7.24637681123188)*cj1);
IkReal x1454=(cj0*px);
IkReal x1455=(py*sj0);
IkReal x1456=((7.2463768115942)*pz);
IkReal x1457=((7.24637681123188)*sj1);
IkReal x1458=((7.24637681123188e-5)*px*sj0);
IkReal x1459=((7.24637681123188e-5)*cj0*py);
if( IKabs((((cj1*x1458))+(((-1.0)*cj1*x1459))+(((-1.0)*x1453*x1455))+(((-1.0)*x1453*x1454))+(((-1.0)*sj1*x1456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+((x1455*x1457))+((x1454*x1457))+(((-1.0)*cj1*x1456))+((sj1*x1459))+(((-1.0)*sj1*x1458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1458))+(((-1.0)*cj1*x1459))+(((-1.0)*x1453*x1455))+(((-1.0)*x1453*x1454))+(((-1.0)*sj1*x1456))))+IKsqr(((-1.65442028985507)+((x1455*x1457))+((x1454*x1457))+(((-1.0)*cj1*x1456))+((sj1*x1459))+(((-1.0)*sj1*x1458))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x1458))+(((-1.0)*cj1*x1459))+(((-1.0)*x1453*x1455))+(((-1.0)*x1453*x1454))+(((-1.0)*sj1*x1456))), ((-1.65442028985507)+((x1455*x1457))+((x1454*x1457))+(((-1.0)*cj1*x1456))+((sj1*x1459))+(((-1.0)*sj1*x1458))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1460=((0.99999999995)*sj1);
IkReal x1461=(py*sj0);
IkReal x1462=((9.9999999995e-6)*cj1);
IkReal x1463=(px*sj0);
IkReal x1464=(cj0*px);
IkReal x1465=(cj0*py);
IkReal x1466=((0.99999999995)*cj1);
IkReal x1467=((9.9999999995e-6)*sj1);
evalcond[0]=(((x1461*x1466))+(((-1.0)*x1462*x1463))+((x1464*x1466))+((x1462*x1465))+(((0.138)*(IKsin(j4))))+((pz*sj1)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((x1463*x1467))+((cj1*pz))+(((-1.0)*x1460*x1464))+(((-1.0)*x1460*x1461))+(((-1.0)*x1465*x1467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1468=((9.9999999995e-6)*r00);
IkReal x1469=(cj1*sj0);
IkReal x1470=((0.99999999995)*sj0);
IkReal x1471=(r01*sj1);
IkReal x1472=((9.9999999995e-6)*sj0);
IkReal x1473=((9.9999999995e-6)*cj0);
IkReal x1474=((0.99999999995)*r01);
IkReal x1475=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r01*x1472))+(((-1.0)*r00*x1470))+(((-1.0)*cj0*x1468))+((cj0*x1474)));
evalcond[2]=(((sj0*sj1*x1468))+(((-1.0)*x1471*x1473))+(((-1.0)*x1470*x1471))+(((-1.0)*sj1*x1475))+((cj1*r02)));
evalcond[3]=(((cj1*x1475))+((cj1*r01*x1473))+((r02*sj1))+((x1469*x1474))+(((-1.0)*x1468*x1469)));
evalcond[4]=((((-1.0)*px*x1470))+(((-1.0)*px*x1473))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x1472)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1476=((7.24637681123188)*cj1);
IkReal x1477=(cj0*px);
IkReal x1478=(py*sj0);
IkReal x1479=((7.2463768115942)*pz);
IkReal x1480=((7.24637681123188)*sj1);
IkReal x1481=((7.24637681123188e-5)*px*sj0);
IkReal x1482=((7.24637681123188e-5)*cj0*py);
if( IKabs(((((-1.0)*sj1*x1479))+(((-1.0)*x1476*x1477))+(((-1.0)*x1476*x1478))+((cj1*x1481))+(((-1.0)*cj1*x1482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((cj1*x1479))+((sj1*x1481))+(((-1.0)*sj1*x1482))+(((-1.0)*x1477*x1480))+(((-1.0)*x1478*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x1479))+(((-1.0)*x1476*x1477))+(((-1.0)*x1476*x1478))+((cj1*x1481))+(((-1.0)*cj1*x1482))))+IKsqr(((0.547028985507246)+((cj1*x1479))+((sj1*x1481))+(((-1.0)*sj1*x1482))+(((-1.0)*x1477*x1480))+(((-1.0)*x1478*x1480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj1*x1479))+(((-1.0)*x1476*x1477))+(((-1.0)*x1476*x1478))+((cj1*x1481))+(((-1.0)*cj1*x1482))), ((0.547028985507246)+((cj1*x1479))+((sj1*x1481))+(((-1.0)*sj1*x1482))+(((-1.0)*x1477*x1480))+(((-1.0)*x1478*x1480))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1483=((0.99999999995)*sj1);
IkReal x1484=(py*sj0);
IkReal x1485=((9.9999999995e-6)*cj1);
IkReal x1486=(px*sj0);
IkReal x1487=(cj0*px);
IkReal x1488=(cj0*py);
IkReal x1489=((0.99999999995)*cj1);
IkReal x1490=((9.9999999995e-6)*sj1);
evalcond[0]=((((-1.0)*x1485*x1486))+((x1487*x1489))+((x1484*x1489))+((x1485*x1488))+(((0.138)*(IKsin(j4))))+((pz*sj1)));
evalcond[1]=((0.07549)+((x1486*x1490))+((cj1*pz))+(((-1.0)*x1483*x1487))+(((-1.0)*x1483*x1484))+(((-1.0)*x1488*x1490))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1491=((7.24637681123188)*cj1);
IkReal x1492=(cj0*px);
IkReal x1493=(py*sj0);
IkReal x1494=(px*sj0);
IkReal x1495=((7.24637681123188e-5)*cj1);
IkReal x1496=((499.999999975)*sj1);
IkReal x1497=((0.00499999999975)*sj1);
IkReal x1498=(cj0*py);
CheckValue<IkReal> x1499=IKPowWithIntegerCheck(cj3,-1);
if(!x1499.valid){
continue;
}
if( IKabs((((x1494*x1495))+(((-1.0)*x1495*x1498))+(((-1.0)*x1491*x1493))+(((-1.0)*x1491*x1492))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1499.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x1494*x1497))+((x1497*x1498))+((x1492*x1496))+((x1493*x1496))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1494*x1495))+(((-1.0)*x1495*x1498))+(((-1.0)*x1491*x1493))+(((-1.0)*x1491*x1492))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x1499.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x1494*x1497))+((x1497*x1498))+((x1492*x1496))+((x1493*x1496))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1494*x1495))+(((-1.0)*x1495*x1498))+(((-1.0)*x1491*x1493))+(((-1.0)*x1491*x1492))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x1499.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x1494*x1497))+((x1497*x1498))+((x1492*x1496))+((x1493*x1496))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1500=IKcos(j4);
IkReal x1501=((9.9999999995e-6)*cj0);
IkReal x1502=(py*sj1);
IkReal x1503=((9.9999999995e-6)*sj0);
IkReal x1504=((0.99999999995)*sj0);
IkReal x1505=(cj1*px);
IkReal x1506=(cj1*py);
IkReal x1507=(px*sj1);
IkReal x1508=((0.99999999995)*cj0);
IkReal x1509=((0.138)*x1500);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x1509))+(((-1.0)*px*x1501))+(((-1.0)*px*x1504))+((py*x1508))+(((-1.0)*py*x1503)));
evalcond[1]=(((x1504*x1506))+((x1501*x1506))+(((0.138)*(IKsin(j4))))+((pz*sj1))+(((-1.0)*x1503*x1505))+((x1505*x1508)));
evalcond[2]=((0.1519)+(((-1.0)*x1507*x1508))+((cj3*x1509))+(((-1.0)*x1501*x1502))+((cj1*pz))+(((0.07641)*cj3))+((x1503*x1507))+(((-1.0)*x1502*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1510=((7.24637681123188)*cj1);
IkReal x1511=(cj0*px);
IkReal x1512=(py*sj0);
IkReal x1513=((7.24637681123188e-5)*cj1);
IkReal x1514=(px*sj0);
IkReal x1515=(cj0*py);
CheckValue<IkReal> x1516=IKPowWithIntegerCheck(sj3,-1);
if(!x1516.valid){
continue;
}
if( IKabs((((x1513*x1514))+(((-1.0)*x1513*x1515))+(((-1.0)*x1510*x1512))+(((-1.0)*x1510*x1511))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1516.value)*(((((-499.999999975)*x1514))+(((-38.205)*sj3))+(((-0.00499999999975)*x1512))+(((-0.00499999999975)*x1511))+(((499.999999975)*x1515)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1513*x1514))+(((-1.0)*x1513*x1515))+(((-1.0)*x1510*x1512))+(((-1.0)*x1510*x1511))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x1516.value)*(((((-499.999999975)*x1514))+(((-38.205)*sj3))+(((-0.00499999999975)*x1512))+(((-0.00499999999975)*x1511))+(((499.999999975)*x1515))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1513*x1514))+(((-1.0)*x1513*x1515))+(((-1.0)*x1510*x1512))+(((-1.0)*x1510*x1511))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x1516.value)*(((((-499.999999975)*x1514))+(((-38.205)*sj3))+(((-0.00499999999975)*x1512))+(((-0.00499999999975)*x1511))+(((499.999999975)*x1515))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1517=IKcos(j4);
IkReal x1518=((9.9999999995e-6)*cj0);
IkReal x1519=(py*sj1);
IkReal x1520=((9.9999999995e-6)*sj0);
IkReal x1521=((0.99999999995)*sj0);
IkReal x1522=(cj1*px);
IkReal x1523=(cj1*py);
IkReal x1524=(px*sj1);
IkReal x1525=((0.99999999995)*cj0);
IkReal x1526=((0.138)*x1517);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x1526))+(((-1.0)*px*x1518))+(((-1.0)*px*x1521))+((py*x1525))+(((-1.0)*py*x1520)));
evalcond[1]=(((x1522*x1525))+((x1518*x1523))+((x1521*x1523))+(((0.138)*(IKsin(j4))))+((pz*sj1))+(((-1.0)*x1520*x1522)));
evalcond[2]=((0.1519)+(((-1.0)*x1524*x1525))+(((-1.0)*x1519*x1521))+((cj3*x1526))+(((-1.0)*x1518*x1519))+((cj1*pz))+(((0.07641)*cj3))+((x1520*x1524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1527=((9.9999999995e-6)*r00);
IkReal x1528=(cj1*sj0);
IkReal x1529=(sj0*sj1);
IkReal x1530=((0.99999999995)*r01);
IkReal x1531=((0.99999999995)*cj0*r00);
IkReal x1532=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+sj2+(((-1.0)*cj0*x1527))+(((-0.99999999995)*r00*sj0))+((cj0*x1530)));
evalcond[2]=((((-1.0)*x1529*x1530))+(((-1.0)*sj1*x1532))+(((-1.0)*sj1*x1531))+((cj1*r02))+((x1527*x1529)));
evalcond[3]=(cj2+((x1528*x1530))+((cj1*x1532))+((cj1*x1531))+((r02*sj1))+(((-1.0)*x1527*x1528)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1533=((7.24637681123188e-5)*sj1);
IkReal x1534=(px*sj0);
IkReal x1535=(cj0*py);
IkReal x1536=(cj0*px);
IkReal x1537=((7.24637681123188)*sj1);
IkReal x1538=((499.999999975)*cj1);
IkReal x1539=((0.00499999999975)*cj1);
IkReal x1540=(py*sj0);
CheckValue<IkReal> x1541=IKPowWithIntegerCheck(sj2,-1);
if(!x1541.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x1541.value)*((((x1538*x1540))+(((500.0)*pz*sj1))+((x1536*x1538))+((x1535*x1539))+(((-1.0)*x1534*x1539)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+((x1537*x1540))+((x1536*x1537))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*x1533*x1534))+((x1533*x1535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x1541.value)*((((x1538*x1540))+(((500.0)*pz*sj1))+((x1536*x1538))+((x1535*x1539))+(((-1.0)*x1534*x1539))))))+IKsqr(((-1.65442028985507)+((x1537*x1540))+((x1536*x1537))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*x1533*x1534))+((x1533*x1535))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x1541.value)*((((x1538*x1540))+(((500.0)*pz*sj1))+((x1536*x1538))+((x1535*x1539))+(((-1.0)*x1534*x1539))))), ((-1.65442028985507)+((x1537*x1540))+((x1536*x1537))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*x1533*x1534))+((x1533*x1535))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1542=IKsin(j4);
IkReal x1543=((9.9999999995e-6)*px);
IkReal x1544=(py*sj0);
IkReal x1545=((0.99999999995)*sj1);
IkReal x1546=((0.99999999995)*px);
IkReal x1547=(cj0*cj1);
IkReal x1548=((9.9999999995e-6)*py);
IkReal x1549=((0.138)*x1542);
evalcond[0]=((((-9.9999999995e-6)*x1544))+(((0.99999999995)*cj0*py))+((cj2*x1549))+(((-1.0)*sj0*x1546))+(((-1.0)*cj0*x1543)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+(((-1.0)*cj0*px*x1545))+((cj1*pz))+(((-1.0)*cj0*sj1*x1548))+((sj0*sj1*x1543))+(((-1.0)*x1544*x1545)));
evalcond[2]=((((-1.0)*sj2*x1549))+((x1547*x1548))+(((-1.0)*cj1*sj0*x1543))+((x1546*x1547))+((pz*sj1))+(((0.99999999995)*cj1*x1544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1550=(px*sj1);
IkReal x1551=(cj0*py);
IkReal x1552=(py*sj0);
CheckValue<IkReal> x1553=IKPowWithIntegerCheck(cj2,-1);
if(!x1553.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x1553.value)*(((((0.00499999999975)*x1552))+(((-499.999999975)*x1551))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((7.24637681123188e-5)*sj1*x1551))+(((7.24637681123188)*sj1*x1552))+(((-7.2463768115942)*cj1*pz))+(((-7.24637681123188e-5)*sj0*x1550))+(((7.24637681123188)*cj0*x1550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x1553.value)*(((((0.00499999999975)*x1552))+(((-499.999999975)*x1551))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0))))))+IKsqr(((-1.65442028985507)+(((7.24637681123188e-5)*sj1*x1551))+(((7.24637681123188)*sj1*x1552))+(((-7.2463768115942)*cj1*pz))+(((-7.24637681123188e-5)*sj0*x1550))+(((7.24637681123188)*cj0*x1550))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x1553.value)*(((((0.00499999999975)*x1552))+(((-499.999999975)*x1551))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0))))), ((-1.65442028985507)+(((7.24637681123188e-5)*sj1*x1551))+(((7.24637681123188)*sj1*x1552))+(((-7.2463768115942)*cj1*pz))+(((-7.24637681123188e-5)*sj0*x1550))+(((7.24637681123188)*cj0*x1550))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1554=IKsin(j4);
IkReal x1555=((9.9999999995e-6)*px);
IkReal x1556=(py*sj0);
IkReal x1557=((0.99999999995)*sj1);
IkReal x1558=((0.99999999995)*px);
IkReal x1559=(cj0*cj1);
IkReal x1560=((9.9999999995e-6)*py);
IkReal x1561=((0.138)*x1554);
evalcond[0]=((((-1.0)*cj0*x1555))+(((0.99999999995)*cj0*py))+((cj2*x1561))+(((-1.0)*sj0*x1558))+(((-9.9999999995e-6)*x1556)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*cj0*px*x1557))+(((-1.0)*cj0*sj1*x1560))+((sj0*sj1*x1555))+(((-1.0)*x1556*x1557)));
evalcond[2]=((((-1.0)*sj2*x1561))+(((-1.0)*cj1*sj0*x1555))+(((0.99999999995)*cj1*x1556))+((pz*sj1))+((x1558*x1559))+((x1559*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1562=((9.9999999995e-6)*r00);
IkReal x1563=(cj1*sj0);
IkReal x1564=(sj0*sj1);
IkReal x1565=((0.99999999995)*r01);
IkReal x1566=((0.99999999995)*cj0*r00);
IkReal x1567=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x1562))+(((-9.9999999995e-6)*r01*sj0))+(((-1.0)*sj2))+((cj0*x1565))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj1*x1566))+(((-1.0)*sj1*x1567))+((cj1*r02))+(((-1.0)*x1564*x1565))+((x1562*x1564)));
evalcond[3]=(((cj1*x1566))+((cj1*x1567))+(((-1.0)*x1562*x1563))+((r02*sj1))+((x1563*x1565))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1568=((7.24637681123188e-5)*sj1);
IkReal x1569=(px*sj0);
IkReal x1570=(cj0*py);
IkReal x1571=(cj0*px);
IkReal x1572=((7.24637681123188)*sj1);
IkReal x1573=((499.999999975)*cj1);
IkReal x1574=((0.00499999999975)*cj1);
IkReal x1575=(py*sj0);
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(sj2,-1);
if(!x1576.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x1576.value)*((((x1571*x1573))+((x1570*x1574))+(((500.0)*pz*sj1))+((x1573*x1575))+(((-1.0)*x1569*x1574)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((-1.0)*x1571*x1572))+(((-1.0)*x1572*x1575))+((x1568*x1569))+(((-1.0)*x1568*x1570))+(((7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x1576.value)*((((x1571*x1573))+((x1570*x1574))+(((500.0)*pz*sj1))+((x1573*x1575))+(((-1.0)*x1569*x1574))))))+IKsqr(((0.547028985507246)+(((-1.0)*x1571*x1572))+(((-1.0)*x1572*x1575))+((x1568*x1569))+(((-1.0)*x1568*x1570))+(((7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x1576.value)*((((x1571*x1573))+((x1570*x1574))+(((500.0)*pz*sj1))+((x1573*x1575))+(((-1.0)*x1569*x1574))))), ((0.547028985507246)+(((-1.0)*x1571*x1572))+(((-1.0)*x1572*x1575))+((x1568*x1569))+(((-1.0)*x1568*x1570))+(((7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1577=IKsin(j4);
IkReal x1578=((9.9999999995e-6)*px);
IkReal x1579=(py*sj0);
IkReal x1580=((0.99999999995)*sj1);
IkReal x1581=((0.99999999995)*px);
IkReal x1582=(cj0*cj1);
IkReal x1583=((9.9999999995e-6)*py);
IkReal x1584=((0.138)*x1577);
evalcond[0]=((((-9.9999999995e-6)*x1579))+(((0.99999999995)*cj0*py))+(((-1.0)*sj0*x1581))+((cj2*x1584))+(((-1.0)*cj0*x1578)));
evalcond[1]=((0.07549)+(((-1.0)*cj0*px*x1580))+((cj1*pz))+(((-1.0)*x1579*x1580))+((sj0*sj1*x1578))+(((-0.138)*(IKcos(j4))))+(((-1.0)*cj0*sj1*x1583)));
evalcond[2]=(((x1582*x1583))+(((-1.0)*cj1*sj0*x1578))+((pz*sj1))+(((-1.0)*sj2*x1584))+(((0.99999999995)*cj1*x1579))+((x1581*x1582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1585=(cj0*py);
IkReal x1586=(px*sj1);
IkReal x1587=(py*sj0);
CheckValue<IkReal> x1588=IKPowWithIntegerCheck(cj2,-1);
if(!x1588.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x1588.value)*(((((0.00499999999975)*x1587))+(((-499.999999975)*x1585))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((-7.24637681123188)*sj1*x1587))+(((-7.24637681123188)*cj0*x1586))+(((-7.24637681123188e-5)*sj1*x1585))+(((7.24637681123188e-5)*sj0*x1586))+(((7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x1588.value)*(((((0.00499999999975)*x1587))+(((-499.999999975)*x1585))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0))))))+IKsqr(((0.547028985507246)+(((-7.24637681123188)*sj1*x1587))+(((-7.24637681123188)*cj0*x1586))+(((-7.24637681123188e-5)*sj1*x1585))+(((7.24637681123188e-5)*sj0*x1586))+(((7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x1588.value)*(((((0.00499999999975)*x1587))+(((-499.999999975)*x1585))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0))))), ((0.547028985507246)+(((-7.24637681123188)*sj1*x1587))+(((-7.24637681123188)*cj0*x1586))+(((-7.24637681123188e-5)*sj1*x1585))+(((7.24637681123188e-5)*sj0*x1586))+(((7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1589=IKsin(j4);
IkReal x1590=((9.9999999995e-6)*px);
IkReal x1591=(py*sj0);
IkReal x1592=((0.99999999995)*sj1);
IkReal x1593=((0.99999999995)*px);
IkReal x1594=(cj0*cj1);
IkReal x1595=((9.9999999995e-6)*py);
IkReal x1596=((0.138)*x1589);
evalcond[0]=((((-9.9999999995e-6)*x1591))+(((-1.0)*cj0*x1590))+(((0.99999999995)*cj0*py))+(((-1.0)*sj0*x1593))+((cj2*x1596)));
evalcond[1]=((0.07549)+(((-1.0)*cj0*px*x1592))+((cj1*pz))+(((-1.0)*x1591*x1592))+((sj0*sj1*x1590))+(((-0.138)*(IKcos(j4))))+(((-1.0)*cj0*sj1*x1595)));
evalcond[2]=((((0.99999999995)*cj1*x1591))+(((-1.0)*cj1*sj0*x1590))+((x1593*x1594))+((x1594*x1595))+((pz*sj1))+(((-1.0)*sj2*x1596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(cj3,-1);
if(!x1606.valid){
continue;
}
IkReal x1597=x1606.value;
IkReal x1598=(cj1*cj3);
IkReal x1599=(cj2*sj3);
IkReal x1600=((500.0)*pz);
IkReal x1601=((0.0144927536231884)*x1597);
IkReal x1602=((499.999999975)*cj0*px);
IkReal x1603=((0.00499999999975)*cj0*py);
IkReal x1604=((0.00499999999975)*px*sj0);
IkReal x1605=((499.999999975)*py*sj0);
CheckValue<IkReal> x1607=IKPowWithIntegerCheck(sj2,-1);
if(!x1607.valid){
continue;
}
if( IKabs((x1601*(x1607.value)*((((sj1*x1599*x1603))+((sj1*x1599*x1602))+((sj1*x1599*x1605))+(((-75.95)*x1599))+(((-1.0)*cj1*x1599*x1600))+(((-1.0)*sj1*x1599*x1604))+((x1598*x1605))+((x1598*x1603))+((x1598*x1602))+((cj3*sj1*x1600))+(((-1.0)*x1598*x1604)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1601*(((-75.95)+(((-1.0)*cj1*x1600))+((sj1*x1605))+((sj1*x1602))+((sj1*x1603))+(((-1.0)*sj1*x1604))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1601*(x1607.value)*((((sj1*x1599*x1603))+((sj1*x1599*x1602))+((sj1*x1599*x1605))+(((-75.95)*x1599))+(((-1.0)*cj1*x1599*x1600))+(((-1.0)*sj1*x1599*x1604))+((x1598*x1605))+((x1598*x1603))+((x1598*x1602))+((cj3*sj1*x1600))+(((-1.0)*x1598*x1604))))))+IKsqr((x1601*(((-75.95)+(((-1.0)*cj1*x1600))+((sj1*x1605))+((sj1*x1602))+((sj1*x1603))+(((-1.0)*sj1*x1604))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1601*(x1607.value)*((((sj1*x1599*x1603))+((sj1*x1599*x1602))+((sj1*x1599*x1605))+(((-75.95)*x1599))+(((-1.0)*cj1*x1599*x1600))+(((-1.0)*sj1*x1599*x1604))+((x1598*x1605))+((x1598*x1603))+((x1598*x1602))+((cj3*sj1*x1600))+(((-1.0)*x1598*x1604))))), (x1601*(((-75.95)+(((-1.0)*cj1*x1600))+((sj1*x1605))+((sj1*x1602))+((sj1*x1603))+(((-1.0)*sj1*x1604))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1608=IKcos(j4);
IkReal x1609=IKsin(j4);
IkReal x1610=((0.99999999995)*sj0);
IkReal x1611=(py*sj1);
IkReal x1612=((9.9999999995e-6)*cj0);
IkReal x1613=(cj1*py);
IkReal x1614=((9.9999999995e-6)*sj0);
IkReal x1615=(px*sj1);
IkReal x1616=((0.07641)*sj3);
IkReal x1617=(cj1*px);
IkReal x1618=((0.99999999995)*cj0);
IkReal x1619=((0.138)*x1609);
IkReal x1620=((0.138)*sj3*x1608);
evalcond[0]=(((py*x1618))+((sj2*x1616))+((sj2*x1620))+(((-1.0)*py*x1614))+(((-1.0)*px*x1612))+(((-1.0)*px*x1610))+((cj2*x1619)));
evalcond[1]=((0.1519)+(((-1.0)*x1611*x1612))+(((0.138)*cj3*x1608))+(((-1.0)*x1610*x1611))+((cj1*pz))+(((0.07641)*cj3))+((x1614*x1615))+(((-1.0)*x1615*x1618)));
evalcond[2]=(((x1617*x1618))+((cj2*x1616))+((x1612*x1613))+(((-1.0)*x1614*x1617))+((cj2*x1620))+((pz*sj1))+((x1610*x1613))+(((-1.0)*sj2*x1619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1633=IKPowWithIntegerCheck(cj3,-1);
if(!x1633.valid){
continue;
}
IkReal x1621=x1633.value;
IkReal x1622=((0.00499999999975)*cj0);
IkReal x1623=(py*sj1);
IkReal x1624=(cj3*px);
IkReal x1625=((499.999999975)*sj0);
IkReal x1626=((0.00499999999975)*sj0);
IkReal x1627=(cj3*py);
IkReal x1628=(sj2*sj3);
IkReal x1629=((0.0144927536231884)*x1621);
IkReal x1630=(px*sj1);
IkReal x1631=((499.999999975)*cj0);
IkReal x1632=((500.0)*cj1*pz);
CheckValue<IkReal> x1634=IKPowWithIntegerCheck(cj2,-1);
if(!x1634.valid){
continue;
}
if( IKabs((x1629*(x1634.value)*((((x1626*x1627))+((x1622*x1624))+((x1628*x1632))+((x1626*x1628*x1630))+(((-1.0)*x1628*x1630*x1631))+(((75.95)*x1628))+((x1624*x1625))+(((-1.0)*x1623*x1625*x1628))+(((-1.0)*x1622*x1623*x1628))+(((-1.0)*x1627*x1631)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1629*(((-75.95)+((x1623*x1625))+((x1622*x1623))+(((-1.0)*x1632))+(((-1.0)*x1626*x1630))+((x1630*x1631))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1629*(x1634.value)*((((x1626*x1627))+((x1622*x1624))+((x1628*x1632))+((x1626*x1628*x1630))+(((-1.0)*x1628*x1630*x1631))+(((75.95)*x1628))+((x1624*x1625))+(((-1.0)*x1623*x1625*x1628))+(((-1.0)*x1622*x1623*x1628))+(((-1.0)*x1627*x1631))))))+IKsqr((x1629*(((-75.95)+((x1623*x1625))+((x1622*x1623))+(((-1.0)*x1632))+(((-1.0)*x1626*x1630))+((x1630*x1631))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1629*(x1634.value)*((((x1626*x1627))+((x1622*x1624))+((x1628*x1632))+((x1626*x1628*x1630))+(((-1.0)*x1628*x1630*x1631))+(((75.95)*x1628))+((x1624*x1625))+(((-1.0)*x1623*x1625*x1628))+(((-1.0)*x1622*x1623*x1628))+(((-1.0)*x1627*x1631))))), (x1629*(((-75.95)+((x1623*x1625))+((x1622*x1623))+(((-1.0)*x1632))+(((-1.0)*x1626*x1630))+((x1630*x1631))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1635=IKcos(j4);
IkReal x1636=IKsin(j4);
IkReal x1637=((0.99999999995)*sj0);
IkReal x1638=(py*sj1);
IkReal x1639=((9.9999999995e-6)*cj0);
IkReal x1640=(cj1*py);
IkReal x1641=((9.9999999995e-6)*sj0);
IkReal x1642=(px*sj1);
IkReal x1643=((0.07641)*sj3);
IkReal x1644=(cj1*px);
IkReal x1645=((0.99999999995)*cj0);
IkReal x1646=((0.138)*x1636);
IkReal x1647=((0.138)*sj3*x1635);
evalcond[0]=((((-1.0)*py*x1641))+(((-1.0)*px*x1637))+(((-1.0)*px*x1639))+((py*x1645))+((cj2*x1646))+((sj2*x1643))+((sj2*x1647)));
evalcond[1]=((0.1519)+(((-1.0)*x1638*x1639))+((x1641*x1642))+(((0.138)*cj3*x1635))+(((-1.0)*x1642*x1645))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1637*x1638)));
evalcond[2]=((((-1.0)*sj2*x1646))+(((-1.0)*x1641*x1644))+((x1637*x1640))+((cj2*x1643))+((cj2*x1647))+((x1644*x1645))+((x1639*x1640))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1648=(cj1*sj0);
IkReal x1649=(px*sj2);
IkReal x1650=((499.999999975)*cj2);
IkReal x1651=(cj0*cj1);
IkReal x1652=(pz*sj1);
IkReal x1653=((7.24637681123188)*py);
IkReal x1654=(cj2*px);
IkReal x1655=(py*sj2);
IkReal x1656=(cj2*py);
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(sj3,-1);
if(!x1657.valid){
continue;
}
if( IKabs(((((7.24637681123188e-5)*cj0*x1654))+(((-1.0)*cj0*cj2*x1653))+(((-7.24637681123188e-5)*x1648*x1649))+(((7.24637681123188e-5)*x1651*x1655))+((sj2*x1648*x1653))+(((7.24637681123188)*sj0*x1654))+(((7.24637681123188)*x1649*x1651))+(((7.2463768115942)*sj2*x1652))+(((7.24637681123188e-5)*sj0*x1656)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1657.value)*(((((-1.0)*px*x1650*x1651))+(((-38.205)*sj3))+(((0.00499999999975)*sj0*x1655))+(((-0.00499999999975)*x1651*x1656))+(((-499.999999975)*cj0*x1655))+(((-500.0)*cj2*x1652))+(((0.00499999999975)*cj0*x1649))+(((499.999999975)*sj0*x1649))+(((0.00499999999975)*x1648*x1654))+(((-1.0)*py*x1648*x1650)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188e-5)*cj0*x1654))+(((-1.0)*cj0*cj2*x1653))+(((-7.24637681123188e-5)*x1648*x1649))+(((7.24637681123188e-5)*x1651*x1655))+((sj2*x1648*x1653))+(((7.24637681123188)*sj0*x1654))+(((7.24637681123188)*x1649*x1651))+(((7.2463768115942)*sj2*x1652))+(((7.24637681123188e-5)*sj0*x1656))))+IKsqr(((0.0144927536231884)*(x1657.value)*(((((-1.0)*px*x1650*x1651))+(((-38.205)*sj3))+(((0.00499999999975)*sj0*x1655))+(((-0.00499999999975)*x1651*x1656))+(((-499.999999975)*cj0*x1655))+(((-500.0)*cj2*x1652))+(((0.00499999999975)*cj0*x1649))+(((499.999999975)*sj0*x1649))+(((0.00499999999975)*x1648*x1654))+(((-1.0)*py*x1648*x1650))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188e-5)*cj0*x1654))+(((-1.0)*cj0*cj2*x1653))+(((-7.24637681123188e-5)*x1648*x1649))+(((7.24637681123188e-5)*x1651*x1655))+((sj2*x1648*x1653))+(((7.24637681123188)*sj0*x1654))+(((7.24637681123188)*x1649*x1651))+(((7.2463768115942)*sj2*x1652))+(((7.24637681123188e-5)*sj0*x1656))), ((0.0144927536231884)*(x1657.value)*(((((-1.0)*px*x1650*x1651))+(((-38.205)*sj3))+(((0.00499999999975)*sj0*x1655))+(((-0.00499999999975)*x1651*x1656))+(((-499.999999975)*cj0*x1655))+(((-500.0)*cj2*x1652))+(((0.00499999999975)*cj0*x1649))+(((499.999999975)*sj0*x1649))+(((0.00499999999975)*x1648*x1654))+(((-1.0)*py*x1648*x1650))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1658=IKcos(j4);
IkReal x1659=IKsin(j4);
IkReal x1660=((0.99999999995)*sj0);
IkReal x1661=(py*sj1);
IkReal x1662=((9.9999999995e-6)*cj0);
IkReal x1663=(cj1*py);
IkReal x1664=((9.9999999995e-6)*sj0);
IkReal x1665=(px*sj1);
IkReal x1666=((0.07641)*sj3);
IkReal x1667=(cj1*px);
IkReal x1668=((0.99999999995)*cj0);
IkReal x1669=((0.138)*x1659);
IkReal x1670=((0.138)*sj3*x1658);
evalcond[0]=((((-1.0)*py*x1664))+(((-1.0)*px*x1662))+(((-1.0)*px*x1660))+((py*x1668))+((cj2*x1669))+((sj2*x1666))+((sj2*x1670)));
evalcond[1]=((0.1519)+(((-1.0)*x1661*x1662))+(((0.138)*cj3*x1658))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1660*x1661))+(((-1.0)*x1665*x1668))+((x1664*x1665)));
evalcond[2]=(((x1660*x1663))+((cj2*x1670))+(((-1.0)*sj2*x1669))+((x1662*x1663))+((cj2*x1666))+((x1667*x1668))+((pz*sj1))+(((-1.0)*x1664*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1671=((9.9999999995e-6)*sj0);
IkReal x1672=(r00*sj1);
IkReal x1673=((0.99999999995)*cj0);
IkReal x1674=(r01*sj1);
IkReal x1675=((9.9999999995e-6)*cj0);
IkReal x1676=((0.99999999995)*sj0);
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(sj2,-1);
if(!x1677.valid){
continue;
}
if( IKabs(((((-1.0)*x1672*x1673))+((cj1*r02))+(((-1.0)*x1674*x1675))+(((-1.0)*x1674*x1676))+((x1671*x1672)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1677.value)*((((r00*x1676))+((r00*x1675))+(((-1.0)*r01*x1673))+((r01*x1671)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1672*x1673))+((cj1*r02))+(((-1.0)*x1674*x1675))+(((-1.0)*x1674*x1676))+((x1671*x1672))))+IKsqr(((x1677.value)*((((r00*x1676))+((r00*x1675))+(((-1.0)*r01*x1673))+((r01*x1671))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1672*x1673))+((cj1*r02))+(((-1.0)*x1674*x1675))+(((-1.0)*x1674*x1676))+((x1671*x1672))), ((x1677.value)*((((r00*x1676))+((r00*x1675))+(((-1.0)*r01*x1673))+((r01*x1671))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1678=IKcos(j3);
IkReal x1679=((9.9999999995e-6)*sj0);
IkReal x1680=(cj1*r00);
IkReal x1681=(r00*sj1);
IkReal x1682=((0.99999999995)*cj0);
IkReal x1683=(r01*sj1);
IkReal x1684=((9.9999999995e-6)*cj0);
IkReal x1685=((0.99999999995)*sj0);
IkReal x1686=(cj1*r01);
evalcond[0]=(((r01*x1682))+((sj2*x1678))+(((-1.0)*r01*x1679))+(((-1.0)*r00*x1685))+(((-1.0)*r00*x1684)));
evalcond[1]=((((-1.0)*x1681*x1682))+(((-1.0)*x1683*x1684))+(((-1.0)*x1683*x1685))+((cj1*r02))+(((-1.0)*(IKsin(j3))))+((x1679*x1681)));
evalcond[2]=(((x1680*x1682))+((cj2*x1678))+(((-1.0)*x1679*x1680))+((r02*sj1))+((x1684*x1686))+((x1685*x1686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1687=((9.9999999995e-6)*r00);
IkReal x1688=(cj1*sj0);
IkReal x1689=(py*sj1);
IkReal x1690=((9.9999999995e-6)*cj0);
IkReal x1691=(sj0*sj1);
IkReal x1692=((0.99999999995)*sj0);
IkReal x1693=((0.99999999995)*r01);
IkReal x1694=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1693))+(((-1.0)*cj0*x1687))+(((-1.0)*r00*x1692)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x1694))+((cj1*r02))+(((-1.0)*x1691*x1693))+((x1687*x1691))+(((-1.0)*r01*sj1*x1690)));
evalcond[3]=((((-1.0)*x1687*x1688))+((cj1*r01*x1690))+((r02*sj1))+((x1688*x1693))+((cj1*x1694)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1691))+((cj1*pz))+(((-1.0)*x1689*x1692))+(((-1.0)*x1689*x1690)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1695=(cj1*px);
IkReal x1696=((7.24637681123188)*cj0);
IkReal x1697=(sj0*sj2);
IkReal x1698=(cj1*py);
IkReal x1699=((7.24637681123188)*px);
IkReal x1700=(cj2*sj0);
IkReal x1701=((7.24637681123188e-5)*py);
IkReal x1702=((7.2463768115942)*pz*sj1);
IkReal x1703=((7.24637681123188e-5)*cj0*cj2);
IkReal x1704=((7.24637681123188e-5)*cj0*sj2);
if( IKabs(((((7.24637681123188)*x1697*x1698))+((px*x1703))+((x1700*x1701))+(((-1.0)*cj2*py*x1696))+((sj2*x1695*x1696))+(((-7.24637681123188e-5)*x1695*x1697))+((sj2*x1702))+((x1699*x1700))+((x1698*x1704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((x1697*x1701))+(((-1.0)*x1698*x1703))+(((-7.24637681123188)*x1698*x1700))+(((-1.0)*cj2*x1702))+(((-1.0)*py*sj2*x1696))+((px*x1704))+(((7.24637681123188e-5)*x1695*x1700))+((x1697*x1699))+(((-1.0)*cj2*x1695*x1696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x1697*x1698))+((px*x1703))+((x1700*x1701))+(((-1.0)*cj2*py*x1696))+((sj2*x1695*x1696))+(((-7.24637681123188e-5)*x1695*x1697))+((sj2*x1702))+((x1699*x1700))+((x1698*x1704))))+IKsqr(((-0.553695652173913)+((x1697*x1701))+(((-1.0)*x1698*x1703))+(((-7.24637681123188)*x1698*x1700))+(((-1.0)*cj2*x1702))+(((-1.0)*py*sj2*x1696))+((px*x1704))+(((7.24637681123188e-5)*x1695*x1700))+((x1697*x1699))+(((-1.0)*cj2*x1695*x1696))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x1697*x1698))+((px*x1703))+((x1700*x1701))+(((-1.0)*cj2*py*x1696))+((sj2*x1695*x1696))+(((-7.24637681123188e-5)*x1695*x1697))+((sj2*x1702))+((x1699*x1700))+((x1698*x1704))), ((-0.553695652173913)+((x1697*x1701))+(((-1.0)*x1698*x1703))+(((-7.24637681123188)*x1698*x1700))+(((-1.0)*cj2*x1702))+(((-1.0)*py*sj2*x1696))+((px*x1704))+(((7.24637681123188e-5)*x1695*x1700))+((x1697*x1699))+(((-1.0)*cj2*x1695*x1696))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1705=IKcos(j4);
IkReal x1706=IKsin(j4);
IkReal x1707=((9.9999999995e-6)*px);
IkReal x1708=((9.9999999995e-6)*py);
IkReal x1709=((0.138)*sj2);
IkReal x1710=((0.99999999995)*px);
IkReal x1711=(cj1*sj0);
IkReal x1712=((0.138)*cj2);
IkReal x1713=(cj0*cj1);
IkReal x1714=((0.99999999995)*py);
evalcond[0]=(((cj0*x1714))+((x1705*x1709))+(((-1.0)*sj0*x1708))+((x1706*x1712))+(((-1.0)*sj0*x1710))+(((-1.0)*cj0*x1707))+(((0.07641)*sj2)));
evalcond[1]=(((x1710*x1713))+(((-1.0)*x1707*x1711))+(((0.07641)*cj2))+((x1711*x1714))+((x1705*x1712))+(((-1.0)*x1706*x1709))+((pz*sj1))+((x1708*x1713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1715=((9.9999999995e-6)*r00);
IkReal x1716=(cj1*sj0);
IkReal x1717=(py*sj1);
IkReal x1718=((9.9999999995e-6)*cj0);
IkReal x1719=(sj0*sj1);
IkReal x1720=((0.99999999995)*sj0);
IkReal x1721=((0.99999999995)*r01);
IkReal x1722=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj0*x1721))+(((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1720))+(((-1.0)*cj0*x1715)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj1*x1718))+((cj1*r02))+((x1715*x1719))+(((-1.0)*sj1*x1722))+(((-1.0)*x1719*x1721)));
evalcond[3]=(((r02*sj1))+((cj1*x1722))+(((-1.0)*x1715*x1716))+((cj1*r01*x1718))+((x1716*x1721)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((9.9999999995e-6)*px*x1719))+(((-1.0)*x1717*x1720))+(((-1.0)*x1717*x1718)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1723=(cj1*px);
IkReal x1724=((7.24637681123188)*cj0);
IkReal x1725=(sj0*sj2);
IkReal x1726=(cj1*py);
IkReal x1727=((7.24637681123188)*px);
IkReal x1728=(cj2*sj0);
IkReal x1729=((7.24637681123188e-5)*py);
IkReal x1730=((7.2463768115942)*pz*sj1);
IkReal x1731=((7.24637681123188e-5)*cj0*cj2);
IkReal x1732=((7.24637681123188e-5)*cj0*sj2);
if( IKabs((((x1728*x1729))+(((-1.0)*cj2*py*x1724))+((px*x1731))+((sj2*x1723*x1724))+((x1726*x1732))+(((7.24637681123188)*x1725*x1726))+((x1727*x1728))+(((-7.24637681123188e-5)*x1723*x1725))+((sj2*x1730)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((cj2*x1730))+((x1726*x1731))+(((7.24637681123188)*x1726*x1728))+((cj2*x1723*x1724))+(((-1.0)*px*x1732))+(((-1.0)*x1725*x1729))+(((-1.0)*x1725*x1727))+(((-7.24637681123188e-5)*x1723*x1728))+((py*sj2*x1724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1728*x1729))+(((-1.0)*cj2*py*x1724))+((px*x1731))+((sj2*x1723*x1724))+((x1726*x1732))+(((7.24637681123188)*x1725*x1726))+((x1727*x1728))+(((-7.24637681123188e-5)*x1723*x1725))+((sj2*x1730))))+IKsqr(((-0.553695652173913)+((cj2*x1730))+((x1726*x1731))+(((7.24637681123188)*x1726*x1728))+((cj2*x1723*x1724))+(((-1.0)*px*x1732))+(((-1.0)*x1725*x1729))+(((-1.0)*x1725*x1727))+(((-7.24637681123188e-5)*x1723*x1728))+((py*sj2*x1724))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1728*x1729))+(((-1.0)*cj2*py*x1724))+((px*x1731))+((sj2*x1723*x1724))+((x1726*x1732))+(((7.24637681123188)*x1725*x1726))+((x1727*x1728))+(((-7.24637681123188e-5)*x1723*x1725))+((sj2*x1730))), ((-0.553695652173913)+((cj2*x1730))+((x1726*x1731))+(((7.24637681123188)*x1726*x1728))+((cj2*x1723*x1724))+(((-1.0)*px*x1732))+(((-1.0)*x1725*x1729))+(((-1.0)*x1725*x1727))+(((-7.24637681123188e-5)*x1723*x1728))+((py*sj2*x1724))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1733=IKsin(j4);
IkReal x1734=IKcos(j4);
IkReal x1735=((9.9999999995e-6)*px);
IkReal x1736=((9.9999999995e-6)*py);
IkReal x1737=((0.99999999995)*px);
IkReal x1738=(cj1*sj0);
IkReal x1739=(cj0*cj1);
IkReal x1740=((0.99999999995)*py);
IkReal x1741=((0.138)*x1734);
IkReal x1742=((0.138)*x1733);
evalcond[0]=((((-0.07641)*sj2))+(((-1.0)*cj0*x1735))+(((-1.0)*sj0*x1736))+(((-1.0)*sj0*x1737))+((cj2*x1742))+(((-1.0)*sj2*x1741))+((cj0*x1740)));
evalcond[1]=(((x1736*x1739))+((x1737*x1739))+(((-1.0)*sj2*x1742))+(((-0.07641)*cj2))+(((-1.0)*cj2*x1741))+(((-1.0)*x1735*x1738))+((pz*sj1))+((x1738*x1740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1743=((9.9999999995e-6)*r00);
IkReal x1744=(cj1*sj0);
IkReal x1745=(sj0*sj1);
IkReal x1746=((0.99999999995)*r01);
IkReal x1747=((0.99999999995)*cj0*r00);
IkReal x1748=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1743))+(((-0.99999999995)*r00*sj0))+((cj0*x1746)));
evalcond[2]=((((-1.0)*sj3))+((cj1*r02))+(((-1.0)*x1745*x1746))+(((-1.0)*sj1*x1747))+(((-1.0)*sj1*x1748))+((x1743*x1745)));
evalcond[3]=(cj3+((x1744*x1746))+((cj1*x1748))+((cj1*x1747))+((r02*sj1))+(((-1.0)*x1743*x1744)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1749=((9.9999999995e-6)*r00);
IkReal x1750=(cj1*sj0);
IkReal x1751=(py*sj1);
IkReal x1752=((9.9999999995e-6)*cj0);
IkReal x1753=(sj0*sj1);
IkReal x1754=((0.99999999995)*sj0);
IkReal x1755=((0.99999999995)*r01);
IkReal x1756=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1749))+(((-1.0)*r00*x1754))+((cj0*x1755)));
evalcond[2]=((-1.0)+((x1749*x1753))+((cj1*r02))+(((-1.0)*r01*sj1*x1752))+(((-1.0)*sj1*x1756))+(((-1.0)*x1753*x1755)));
evalcond[3]=((((-1.0)*x1749*x1750))+((x1750*x1755))+((cj1*x1756))+((r02*sj1))+((cj1*r01*x1752)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1753))+((cj1*pz))+(((-1.0)*x1751*x1752))+(((-1.0)*x1751*x1754)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1757=((7.24637681123188)*cj1);
IkReal x1758=(cj0*px);
IkReal x1759=(py*sj0);
IkReal x1760=(px*sj0);
IkReal x1761=((7.24637681123188e-5)*cj1);
IkReal x1762=(cj0*py);
if( IKabs(((((7.24637681123188)*x1760))+(((7.24637681123188e-5)*x1759))+(((7.24637681123188e-5)*x1758))+(((-7.24637681123188)*x1762)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*x1757*x1759))+(((-1.0)*x1757*x1758))+(((-1.0)*x1761*x1762))+(((-7.2463768115942)*pz*sj1))+((x1760*x1761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x1760))+(((7.24637681123188e-5)*x1759))+(((7.24637681123188e-5)*x1758))+(((-7.24637681123188)*x1762))))+IKsqr(((-0.553695652173913)+(((-1.0)*x1757*x1759))+(((-1.0)*x1757*x1758))+(((-1.0)*x1761*x1762))+(((-7.2463768115942)*pz*sj1))+((x1760*x1761))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x1760))+(((7.24637681123188e-5)*x1759))+(((7.24637681123188e-5)*x1758))+(((-7.24637681123188)*x1762))), ((-0.553695652173913)+(((-1.0)*x1757*x1759))+(((-1.0)*x1757*x1758))+(((-1.0)*x1761*x1762))+(((-7.2463768115942)*pz*sj1))+((x1760*x1761))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1763=((9.9999999995e-6)*px);
IkReal x1764=((9.9999999995e-6)*py);
IkReal x1765=((0.99999999995)*px);
IkReal x1766=(cj1*sj0);
IkReal x1767=(cj0*cj1);
IkReal x1768=((0.99999999995)*py);
evalcond[0]=(((cj0*x1768))+(((-1.0)*cj0*x1763))+(((0.138)*(IKsin(j4))))+(((-1.0)*sj0*x1765))+(((-1.0)*sj0*x1764)));
evalcond[1]=((0.07641)+(((0.138)*(IKcos(j4))))+((x1765*x1767))+((x1764*x1767))+(((-1.0)*x1763*x1766))+((pz*sj1))+((x1766*x1768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1769=((9.9999999995e-6)*r00);
IkReal x1770=(cj1*sj0);
IkReal x1771=(py*sj1);
IkReal x1772=((9.9999999995e-6)*cj0);
IkReal x1773=(sj0*sj1);
IkReal x1774=((0.99999999995)*sj0);
IkReal x1775=((0.99999999995)*r01);
IkReal x1776=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1775))+(((-1.0)*cj0*x1769))+(((-1.0)*r00*x1774)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj1*x1772))+((cj1*r02))+(((-1.0)*sj1*x1776))+(((-1.0)*x1773*x1775))+((x1769*x1773)));
evalcond[3]=(((x1770*x1775))+((r02*sj1))+((cj1*r01*x1772))+(((-1.0)*x1769*x1770))+((cj1*x1776)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1773))+((cj1*pz))+(((-1.0)*x1771*x1774))+(((-1.0)*x1771*x1772)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1777=((7.24637681123188)*cj1);
IkReal x1778=(cj0*px);
IkReal x1779=(py*sj0);
IkReal x1780=(px*sj0);
IkReal x1781=((7.24637681123188e-5)*cj1);
IkReal x1782=(cj0*py);
if( IKabs(((((7.24637681123188)*x1780))+(((7.24637681123188e-5)*x1779))+(((7.24637681123188e-5)*x1778))+(((-7.24637681123188)*x1782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+(((-1.0)*x1780*x1781))+((x1777*x1779))+((x1777*x1778))+((x1781*x1782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x1780))+(((7.24637681123188e-5)*x1779))+(((7.24637681123188e-5)*x1778))+(((-7.24637681123188)*x1782))))+IKsqr(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+(((-1.0)*x1780*x1781))+((x1777*x1779))+((x1777*x1778))+((x1781*x1782))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x1780))+(((7.24637681123188e-5)*x1779))+(((7.24637681123188e-5)*x1778))+(((-7.24637681123188)*x1782))), ((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+(((-1.0)*x1780*x1781))+((x1777*x1779))+((x1777*x1778))+((x1781*x1782))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1783=((9.9999999995e-6)*px);
IkReal x1784=((9.9999999995e-6)*py);
IkReal x1785=((0.99999999995)*px);
IkReal x1786=(cj1*sj0);
IkReal x1787=(cj0*cj1);
IkReal x1788=((0.99999999995)*py);
evalcond[0]=((((-1.0)*cj0*x1783))+(((-1.0)*sj0*x1785))+(((-1.0)*sj0*x1784))+(((0.138)*(IKsin(j4))))+((cj0*x1788)));
evalcond[1]=((-0.07641)+(((-1.0)*x1783*x1786))+((x1784*x1787))+((x1785*x1787))+((pz*sj1))+(((-0.138)*(IKcos(j4))))+((x1786*x1788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1789=((9.9999999995e-6)*r00);
IkReal x1790=(cj1*sj0);
IkReal x1791=(sj0*sj1);
IkReal x1792=((0.99999999995)*r01);
IkReal x1793=(cj0*cj1);
IkReal x1794=((9.9999999995e-6)*r01);
IkReal x1795=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj0*x1794))+(((-1.0)*cj0*x1789))+(((-0.99999999995)*r00*sj0))+((cj0*x1792)));
evalcond[2]=(((cj1*r02))+(((-1.0)*cj0*sj1*x1794))+((x1789*x1791))+(((-1.0)*sj1*x1795))+(((-1.0)*x1791*x1792)));
evalcond[3]=((1.0)+((x1793*x1794))+(((-1.0)*x1789*x1790))+((r02*sj1))+((x1790*x1792))+(((0.99999999995)*r00*x1793)));
evalcond[4]=((((9.9999999995e-6)*py*x1793))+(((-9.9999999995e-6)*px*x1790))+(((0.99999999995)*px*x1793))+((pz*sj1))+(((0.99999999995)*py*x1790)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1796=(py*sj1);
IkReal x1797=((7.24637681123188)*sj0);
IkReal x1798=((7.24637681123188e-5)*cj0);
IkReal x1799=(px*sj1);
IkReal x1800=((7.24637681123188)*cj0);
IkReal x1801=((7.24637681123188e-5)*sj0);
if( IKabs(((((-1.0)*py*x1800))+((py*x1801))+((px*x1797))+((px*x1798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+((x1799*x1800))+(((-1.0)*x1799*x1801))+((x1796*x1797))+((x1796*x1798))+(((-7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x1800))+((py*x1801))+((px*x1797))+((px*x1798))))+IKsqr(((-1.65442028985507)+((x1799*x1800))+(((-1.0)*x1799*x1801))+((x1796*x1797))+((x1796*x1798))+(((-7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*py*x1800))+((py*x1801))+((px*x1797))+((px*x1798))), ((-1.65442028985507)+((x1799*x1800))+(((-1.0)*x1799*x1801))+((x1796*x1797))+((x1796*x1798))+(((-7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1802=(cj0*px);
IkReal x1803=(py*sj0);
IkReal x1804=((0.99999999995)*sj1);
IkReal x1805=(px*sj0);
IkReal x1806=((9.9999999995e-6)*sj1);
IkReal x1807=(cj0*py);
evalcond[0]=((((-0.99999999995)*x1805))+(((0.99999999995)*x1807))+(((0.138)*(IKsin(j4))))+(((-9.9999999995e-6)*x1802))+(((-9.9999999995e-6)*x1803)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+(((-1.0)*x1802*x1804))+((cj1*pz))+(((-1.0)*x1806*x1807))+((x1805*x1806))+(((-1.0)*x1803*x1804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1808=((9.9999999995e-6)*r00);
IkReal x1809=(cj1*sj0);
IkReal x1810=(sj0*sj1);
IkReal x1811=((0.99999999995)*r01);
IkReal x1812=(cj0*cj1);
IkReal x1813=((9.9999999995e-6)*r01);
IkReal x1814=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj0*x1811))+(((-1.0)*cj0*x1808))+(((-1.0)*sj0*x1813))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj1*x1814))+(((-1.0)*cj0*sj1*x1813))+((cj1*r02))+(((-1.0)*x1810*x1811))+((x1808*x1810)));
evalcond[3]=((-1.0)+(((0.99999999995)*r00*x1812))+((x1812*x1813))+((x1809*x1811))+((r02*sj1))+(((-1.0)*x1808*x1809)));
evalcond[4]=((((9.9999999995e-6)*py*x1812))+(((-9.9999999995e-6)*px*x1809))+(((0.99999999995)*px*x1812))+((pz*sj1))+(((0.99999999995)*py*x1809)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1815=(py*sj1);
IkReal x1816=((7.24637681123188)*sj0);
IkReal x1817=((7.24637681123188e-5)*cj0);
IkReal x1818=(px*sj1);
IkReal x1819=((7.24637681123188)*cj0);
IkReal x1820=((7.24637681123188e-5)*sj0);
if( IKabs((((py*x1820))+((px*x1816))+((px*x1817))+(((-1.0)*py*x1819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((x1818*x1820))+(((-1.0)*x1815*x1816))+(((-1.0)*x1815*x1817))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x1818*x1819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x1820))+((px*x1816))+((px*x1817))+(((-1.0)*py*x1819))))+IKsqr(((0.547028985507246)+((x1818*x1820))+(((-1.0)*x1815*x1816))+(((-1.0)*x1815*x1817))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x1818*x1819))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((py*x1820))+((px*x1816))+((px*x1817))+(((-1.0)*py*x1819))), ((0.547028985507246)+((x1818*x1820))+(((-1.0)*x1815*x1816))+(((-1.0)*x1815*x1817))+(((7.2463768115942)*cj1*pz))+(((-1.0)*x1818*x1819))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1821=(cj0*px);
IkReal x1822=(py*sj0);
IkReal x1823=((0.99999999995)*sj1);
IkReal x1824=(px*sj0);
IkReal x1825=((9.9999999995e-6)*sj1);
IkReal x1826=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x1822))+(((-9.9999999995e-6)*x1821))+(((0.99999999995)*x1826))+(((-0.99999999995)*x1824))+(((0.138)*(IKsin(j4)))));
evalcond[1]=((0.07549)+(((-1.0)*x1821*x1823))+((x1824*x1825))+((cj1*pz))+(((-1.0)*x1825*x1826))+(((-1.0)*x1822*x1823))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1827=((499.999999975)*sj1);
IkReal x1828=(py*sj0);
IkReal x1829=(cj0*py);
IkReal x1830=(cj0*px);
IkReal x1831=(px*sj0);
IkReal x1832=((0.00499999999975)*sj1);
CheckValue<IkReal> x1833=IKPowWithIntegerCheck(cj3,-1);
if(!x1833.valid){
continue;
}
if( IKabs(((((7.24637681123188)*x1831))+(((7.24637681123188e-5)*x1828))+(((7.24637681123188e-5)*x1830))+(((-7.24637681123188)*x1829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1833.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1827*x1830))+((x1829*x1832))+((x1827*x1828))+(((-1.0)*x1831*x1832))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x1831))+(((7.24637681123188e-5)*x1828))+(((7.24637681123188e-5)*x1830))+(((-7.24637681123188)*x1829))))+IKsqr(((0.0144927536231884)*(x1833.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1827*x1830))+((x1829*x1832))+((x1827*x1828))+(((-1.0)*x1831*x1832))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x1831))+(((7.24637681123188e-5)*x1828))+(((7.24637681123188e-5)*x1830))+(((-7.24637681123188)*x1829))), ((0.0144927536231884)*(x1833.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1827*x1830))+((x1829*x1832))+((x1827*x1828))+(((-1.0)*x1831*x1832))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1834=IKcos(j4);
IkReal x1835=((9.9999999995e-6)*cj0);
IkReal x1836=(py*sj1);
IkReal x1837=((9.9999999995e-6)*sj0);
IkReal x1838=((0.99999999995)*sj0);
IkReal x1839=(cj1*px);
IkReal x1840=(cj1*py);
IkReal x1841=(px*sj1);
IkReal x1842=((0.99999999995)*cj0);
IkReal x1843=((0.138)*x1834);
evalcond[0]=((((-1.0)*py*x1837))+((py*x1842))+(((0.138)*(IKsin(j4))))+(((-1.0)*px*x1835))+(((-1.0)*px*x1838)));
evalcond[1]=(((x1838*x1840))+(((-1.0)*x1837*x1839))+((sj3*x1843))+((x1839*x1842))+((pz*sj1))+(((0.07641)*sj3))+((x1835*x1840)));
evalcond[2]=((0.1519)+((x1837*x1841))+(((-1.0)*x1841*x1842))+(((-1.0)*x1836*x1838))+((cj3*x1843))+((cj1*pz))+(((-1.0)*x1835*x1836))+(((0.07641)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1844=(cj0*cj1);
IkReal x1845=(px*sj0);
IkReal x1846=(py*sj0);
CheckValue<IkReal> x1847=IKPowWithIntegerCheck(sj3,-1);
if(!x1847.valid){
continue;
}
if( IKabs(((((-7.24637681123188)*cj0*py))+(((7.24637681123188)*x1845))+(((7.24637681123188e-5)*x1846))+(((7.24637681123188e-5)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1847.value)*(((((0.00499999999975)*cj1*x1845))+(((-38.205)*sj3))+(((-0.00499999999975)*py*x1844))+(((-499.999999975)*px*x1844))+(((-500.0)*pz*sj1))+(((-499.999999975)*cj1*x1846)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188)*cj0*py))+(((7.24637681123188)*x1845))+(((7.24637681123188e-5)*x1846))+(((7.24637681123188e-5)*cj0*px))))+IKsqr(((0.0144927536231884)*(x1847.value)*(((((0.00499999999975)*cj1*x1845))+(((-38.205)*sj3))+(((-0.00499999999975)*py*x1844))+(((-499.999999975)*px*x1844))+(((-500.0)*pz*sj1))+(((-499.999999975)*cj1*x1846))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188)*cj0*py))+(((7.24637681123188)*x1845))+(((7.24637681123188e-5)*x1846))+(((7.24637681123188e-5)*cj0*px))), ((0.0144927536231884)*(x1847.value)*(((((0.00499999999975)*cj1*x1845))+(((-38.205)*sj3))+(((-0.00499999999975)*py*x1844))+(((-499.999999975)*px*x1844))+(((-500.0)*pz*sj1))+(((-499.999999975)*cj1*x1846))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1848=IKcos(j4);
IkReal x1849=((9.9999999995e-6)*cj0);
IkReal x1850=(py*sj1);
IkReal x1851=((9.9999999995e-6)*sj0);
IkReal x1852=((0.99999999995)*sj0);
IkReal x1853=(cj1*px);
IkReal x1854=(cj1*py);
IkReal x1855=(px*sj1);
IkReal x1856=((0.99999999995)*cj0);
IkReal x1857=((0.138)*x1848);
evalcond[0]=((((-1.0)*px*x1849))+((py*x1856))+(((-1.0)*py*x1851))+(((0.138)*(IKsin(j4))))+(((-1.0)*px*x1852)));
evalcond[1]=(((x1852*x1854))+((x1849*x1854))+(((-1.0)*x1851*x1853))+((x1853*x1856))+((pz*sj1))+((sj3*x1857))+(((0.07641)*sj3)));
evalcond[2]=((0.1519)+(((-1.0)*x1849*x1850))+((x1851*x1855))+((cj1*pz))+(((-1.0)*x1850*x1852))+(((0.07641)*cj3))+((cj3*x1857))+(((-1.0)*x1855*x1856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1858=((9.9999999995e-6)*r00);
IkReal x1859=(cj1*sj0);
IkReal x1860=(sj0*sj1);
IkReal x1861=((0.99999999995)*r01);
IkReal x1862=((0.99999999995)*cj0*r00);
IkReal x1863=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1861))+(((-1.0)*cj0*x1858))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*x1860*x1861))+((cj1*r02))+((x1858*x1860))+(((-1.0)*sj1*x1862))+(((-1.0)*sj1*x1863)));
evalcond[3]=(((cj1*x1863))+((cj1*x1862))+(((-1.0)*x1858*x1859))+((x1859*x1861))+((r02*sj1))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1864=((9.9999999995e-6)*r00);
IkReal x1865=(cj1*sj0);
IkReal x1866=(py*sj1);
IkReal x1867=((9.9999999995e-6)*cj0);
IkReal x1868=(sj0*sj1);
IkReal x1869=((0.99999999995)*sj0);
IkReal x1870=((0.99999999995)*r01);
IkReal x1871=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1864))+(((-1.0)*r00*x1869))+((cj0*x1870)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj1*x1867))+((x1864*x1868))+(((-1.0)*x1868*x1870))+(((-1.0)*sj1*x1871))+((cj1*r02)));
evalcond[3]=((((-1.0)*x1864*x1865))+((x1865*x1870))+((r02*sj1))+((cj1*r01*x1867))+((cj1*x1871)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x1866*x1869))+(((-1.0)*x1866*x1867))+(((9.9999999995e-6)*px*x1868))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1872=((7.24637681123188)*cj1);
IkReal x1873=(cj0*px);
IkReal x1874=(py*sj0);
IkReal x1875=(px*sj0);
IkReal x1876=((7.24637681123188e-5)*cj1);
IkReal x1877=(cj0*py);
if( IKabs(((((7.24637681123188)*x1877))+(((-7.24637681123188)*x1875))+(((-7.24637681123188e-5)*x1874))+(((-7.24637681123188e-5)*x1873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x1876*x1877))+((x1872*x1873))+((x1872*x1874))+(((-1.0)*x1875*x1876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.24637681123188)*x1877))+(((-7.24637681123188)*x1875))+(((-7.24637681123188e-5)*x1874))+(((-7.24637681123188e-5)*x1873))))+IKsqr(((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x1876*x1877))+((x1872*x1873))+((x1872*x1874))+(((-1.0)*x1875*x1876))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.24637681123188)*x1877))+(((-7.24637681123188)*x1875))+(((-7.24637681123188e-5)*x1874))+(((-7.24637681123188e-5)*x1873))), ((-0.553695652173913)+(((7.2463768115942)*pz*sj1))+((x1876*x1877))+((x1872*x1873))+((x1872*x1874))+(((-1.0)*x1875*x1876))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1878=((9.9999999995e-6)*px);
IkReal x1879=((9.9999999995e-6)*py);
IkReal x1880=((0.99999999995)*px);
IkReal x1881=(cj1*sj0);
IkReal x1882=(cj0*cj1);
IkReal x1883=((0.99999999995)*py);
evalcond[0]=((((-1.0)*sj0*x1879))+(((-1.0)*sj0*x1880))+(((-0.138)*(IKsin(j4))))+((cj0*x1883))+(((-1.0)*cj0*x1878)));
evalcond[1]=((-0.07641)+((x1879*x1882))+((x1881*x1883))+((x1880*x1882))+(((-1.0)*x1878*x1881))+((pz*sj1))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1884=((9.9999999995e-6)*r00);
IkReal x1885=(cj1*sj0);
IkReal x1886=(py*sj1);
IkReal x1887=((9.9999999995e-6)*cj0);
IkReal x1888=(sj0*sj1);
IkReal x1889=((0.99999999995)*sj0);
IkReal x1890=((0.99999999995)*r01);
IkReal x1891=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x1884))+(((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1889))+((cj0*x1890)));
evalcond[2]=((1.0)+(((-1.0)*sj1*x1891))+((cj1*r02))+(((-1.0)*x1888*x1890))+(((-1.0)*r01*sj1*x1887))+((x1884*x1888)));
evalcond[3]=(((x1885*x1890))+((cj1*r01*x1887))+((cj1*x1891))+((r02*sj1))+(((-1.0)*x1884*x1885)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1888))+((cj1*pz))+(((-1.0)*x1886*x1889))+(((-1.0)*x1886*x1887)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1892=((7.24637681123188)*cj1);
IkReal x1893=(cj0*px);
IkReal x1894=(py*sj0);
IkReal x1895=(px*sj0);
IkReal x1896=((7.24637681123188e-5)*cj1);
IkReal x1897=(cj0*py);
if( IKabs(((((-7.24637681123188)*x1895))+(((-7.24637681123188e-5)*x1893))+(((-7.24637681123188e-5)*x1894))+(((7.24637681123188)*x1897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*x1892*x1893))+(((-1.0)*x1892*x1894))+((x1895*x1896))+(((-1.0)*x1896*x1897))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188)*x1895))+(((-7.24637681123188e-5)*x1893))+(((-7.24637681123188e-5)*x1894))+(((7.24637681123188)*x1897))))+IKsqr(((-0.553695652173913)+(((-1.0)*x1892*x1893))+(((-1.0)*x1892*x1894))+((x1895*x1896))+(((-1.0)*x1896*x1897))+(((-7.2463768115942)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188)*x1895))+(((-7.24637681123188e-5)*x1893))+(((-7.24637681123188e-5)*x1894))+(((7.24637681123188)*x1897))), ((-0.553695652173913)+(((-1.0)*x1892*x1893))+(((-1.0)*x1892*x1894))+((x1895*x1896))+(((-1.0)*x1896*x1897))+(((-7.2463768115942)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1898=((9.9999999995e-6)*px);
IkReal x1899=((9.9999999995e-6)*py);
IkReal x1900=((0.99999999995)*px);
IkReal x1901=(cj1*sj0);
IkReal x1902=(cj0*cj1);
IkReal x1903=((0.99999999995)*py);
evalcond[0]=(((cj0*x1903))+(((-1.0)*sj0*x1899))+(((-1.0)*sj0*x1900))+(((-1.0)*cj0*x1898))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07641)+(((0.138)*(IKcos(j4))))+((x1901*x1903))+((x1900*x1902))+(((-1.0)*x1898*x1901))+((x1899*x1902))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1904=((9.9999999995e-6)*r00);
IkReal x1905=(cj1*sj0);
IkReal x1906=(sj0*sj1);
IkReal x1907=((0.99999999995)*r01);
IkReal x1908=(cj0*cj1);
IkReal x1909=((9.9999999995e-6)*r01);
IkReal x1910=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj0*x1907))+(((-1.0)*sj0*x1909))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj0*x1904)));
evalcond[2]=((((-1.0)*sj1*x1910))+((x1904*x1906))+((cj1*r02))+(((-1.0)*x1906*x1907))+(((-1.0)*cj0*sj1*x1909)));
evalcond[3]=((-1.0)+((x1905*x1907))+(((0.99999999995)*r00*x1908))+((r02*sj1))+(((-1.0)*x1904*x1905))+((x1908*x1909)));
evalcond[4]=((((0.99999999995)*px*x1908))+(((-9.9999999995e-6)*px*x1905))+(((0.99999999995)*py*x1905))+((pz*sj1))+(((9.9999999995e-6)*py*x1908)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1911=(py*sj1);
IkReal x1912=((7.24637681123188)*sj0);
IkReal x1913=((7.24637681123188e-5)*cj0);
IkReal x1914=(px*sj1);
IkReal x1915=((7.24637681123188)*cj0);
IkReal x1916=((7.24637681123188e-5)*sj0);
if( IKabs(((((-1.0)*py*x1916))+(((-1.0)*px*x1912))+(((-1.0)*px*x1913))+((py*x1915)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x1914*x1916))+((x1914*x1915))+((x1911*x1912))+((x1911*x1913))+(((-7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x1916))+(((-1.0)*px*x1912))+(((-1.0)*px*x1913))+((py*x1915))))+IKsqr(((-1.65442028985507)+(((-1.0)*x1914*x1916))+((x1914*x1915))+((x1911*x1912))+((x1911*x1913))+(((-7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*py*x1916))+(((-1.0)*px*x1912))+(((-1.0)*px*x1913))+((py*x1915))), ((-1.65442028985507)+(((-1.0)*x1914*x1916))+((x1914*x1915))+((x1911*x1912))+((x1911*x1913))+(((-7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1917=(cj0*px);
IkReal x1918=(py*sj0);
IkReal x1919=((0.99999999995)*sj1);
IkReal x1920=(px*sj0);
IkReal x1921=((9.9999999995e-6)*sj1);
IkReal x1922=(cj0*py);
evalcond[0]=((((-0.99999999995)*x1920))+(((0.99999999995)*x1922))+(((-9.9999999995e-6)*x1917))+(((-9.9999999995e-6)*x1918))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+(((-1.0)*x1917*x1919))+((cj1*pz))+(((-1.0)*x1921*x1922))+((x1920*x1921))+(((-1.0)*x1918*x1919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1923=((9.9999999995e-6)*r00);
IkReal x1924=(cj1*sj0);
IkReal x1925=(sj0*sj1);
IkReal x1926=((0.99999999995)*r01);
IkReal x1927=(cj0*cj1);
IkReal x1928=((9.9999999995e-6)*r01);
IkReal x1929=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj0*x1928))+((cj0*x1926))+(((-1.0)*cj0*x1923))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=(((cj1*r02))+(((-1.0)*cj0*sj1*x1928))+((x1923*x1925))+(((-1.0)*x1925*x1926))+(((-1.0)*sj1*x1929)));
evalcond[3]=((1.0)+((x1927*x1928))+(((0.99999999995)*r00*x1927))+((r02*sj1))+(((-1.0)*x1923*x1924))+((x1924*x1926)));
evalcond[4]=((((0.99999999995)*py*x1924))+(((0.99999999995)*px*x1927))+(((9.9999999995e-6)*py*x1927))+((pz*sj1))+(((-9.9999999995e-6)*px*x1924)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1930=(py*sj1);
IkReal x1931=((7.24637681123188)*sj0);
IkReal x1932=((7.24637681123188e-5)*cj0);
IkReal x1933=(px*sj1);
IkReal x1934=((7.24637681123188)*cj0);
IkReal x1935=((7.24637681123188e-5)*sj0);
if( IKabs(((((-1.0)*py*x1935))+(((-1.0)*px*x1931))+(((-1.0)*px*x1932))+((py*x1934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((-1.0)*x1930*x1931))+(((-1.0)*x1930*x1932))+(((-1.0)*x1933*x1934))+(((7.2463768115942)*cj1*pz))+((x1933*x1935)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x1935))+(((-1.0)*px*x1931))+(((-1.0)*px*x1932))+((py*x1934))))+IKsqr(((0.547028985507246)+(((-1.0)*x1930*x1931))+(((-1.0)*x1930*x1932))+(((-1.0)*x1933*x1934))+(((7.2463768115942)*cj1*pz))+((x1933*x1935))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*py*x1935))+(((-1.0)*px*x1931))+(((-1.0)*px*x1932))+((py*x1934))), ((0.547028985507246)+(((-1.0)*x1930*x1931))+(((-1.0)*x1930*x1932))+(((-1.0)*x1933*x1934))+(((7.2463768115942)*cj1*pz))+((x1933*x1935))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1936=(cj0*px);
IkReal x1937=(py*sj0);
IkReal x1938=((0.99999999995)*sj1);
IkReal x1939=(px*sj0);
IkReal x1940=((9.9999999995e-6)*sj1);
IkReal x1941=(cj0*py);
evalcond[0]=((((-0.99999999995)*x1939))+(((-9.9999999995e-6)*x1936))+(((-9.9999999995e-6)*x1937))+(((-0.138)*(IKsin(j4))))+(((0.99999999995)*x1941)));
evalcond[1]=((0.07549)+(((-1.0)*x1937*x1938))+((x1939*x1940))+(((-1.0)*x1940*x1941))+((cj1*pz))+(((-0.138)*(IKcos(j4))))+(((-1.0)*x1936*x1938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1942=((499.999999975)*sj1);
IkReal x1943=(py*sj0);
IkReal x1944=(cj0*py);
IkReal x1945=(cj0*px);
IkReal x1946=(px*sj0);
IkReal x1947=((0.00499999999975)*sj1);
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(cj3,-1);
if(!x1948.valid){
continue;
}
if( IKabs(((((-7.24637681123188e-5)*x1943))+(((-7.24637681123188e-5)*x1945))+(((7.24637681123188)*x1944))+(((-7.24637681123188)*x1946)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1948.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1944*x1947))+(((-1.0)*x1946*x1947))+((x1942*x1943))+((x1942*x1945))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188e-5)*x1943))+(((-7.24637681123188e-5)*x1945))+(((7.24637681123188)*x1944))+(((-7.24637681123188)*x1946))))+IKsqr(((0.0144927536231884)*(x1948.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1944*x1947))+(((-1.0)*x1946*x1947))+((x1942*x1943))+((x1942*x1945))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188e-5)*x1943))+(((-7.24637681123188e-5)*x1945))+(((7.24637681123188)*x1944))+(((-7.24637681123188)*x1946))), ((0.0144927536231884)*(x1948.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x1944*x1947))+(((-1.0)*x1946*x1947))+((x1942*x1943))+((x1942*x1945))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1949=IKcos(j4);
IkReal x1950=((9.9999999995e-6)*cj0);
IkReal x1951=(py*sj1);
IkReal x1952=((9.9999999995e-6)*sj0);
IkReal x1953=((0.99999999995)*sj0);
IkReal x1954=(cj1*px);
IkReal x1955=(cj1*py);
IkReal x1956=(px*sj1);
IkReal x1957=((0.99999999995)*cj0);
IkReal x1958=((0.138)*x1949);
evalcond[0]=((((-1.0)*px*x1953))+(((-1.0)*px*x1950))+((py*x1957))+(((-1.0)*py*x1952))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((((-0.07641)*sj3))+(((-1.0)*x1952*x1954))+(((-1.0)*sj3*x1958))+((x1950*x1955))+((x1954*x1957))+((x1953*x1955))+((pz*sj1)));
evalcond[2]=((0.1519)+((x1952*x1956))+(((-1.0)*x1950*x1951))+((cj3*x1958))+(((-1.0)*x1951*x1953))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1956*x1957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1959=(cj0*cj1);
IkReal x1960=(px*sj0);
IkReal x1961=(py*sj0);
CheckValue<IkReal> x1962=IKPowWithIntegerCheck(sj3,-1);
if(!x1962.valid){
continue;
}
if( IKabs(((((-7.24637681123188e-5)*x1961))+(((7.24637681123188)*cj0*py))+(((-7.24637681123188e-5)*cj0*px))+(((-7.24637681123188)*x1960)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x1962.value)*(((((0.00499999999975)*py*x1959))+(((-38.205)*sj3))+(((500.0)*pz*sj1))+(((499.999999975)*cj1*x1961))+(((-0.00499999999975)*cj1*x1960))+(((499.999999975)*px*x1959)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.24637681123188e-5)*x1961))+(((7.24637681123188)*cj0*py))+(((-7.24637681123188e-5)*cj0*px))+(((-7.24637681123188)*x1960))))+IKsqr(((0.0144927536231884)*(x1962.value)*(((((0.00499999999975)*py*x1959))+(((-38.205)*sj3))+(((500.0)*pz*sj1))+(((499.999999975)*cj1*x1961))+(((-0.00499999999975)*cj1*x1960))+(((499.999999975)*px*x1959))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.24637681123188e-5)*x1961))+(((7.24637681123188)*cj0*py))+(((-7.24637681123188e-5)*cj0*px))+(((-7.24637681123188)*x1960))), ((0.0144927536231884)*(x1962.value)*(((((0.00499999999975)*py*x1959))+(((-38.205)*sj3))+(((500.0)*pz*sj1))+(((499.999999975)*cj1*x1961))+(((-0.00499999999975)*cj1*x1960))+(((499.999999975)*px*x1959))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1963=IKcos(j4);
IkReal x1964=((9.9999999995e-6)*cj0);
IkReal x1965=(py*sj1);
IkReal x1966=((9.9999999995e-6)*sj0);
IkReal x1967=((0.99999999995)*sj0);
IkReal x1968=(cj1*px);
IkReal x1969=(cj1*py);
IkReal x1970=(px*sj1);
IkReal x1971=((0.99999999995)*cj0);
IkReal x1972=((0.138)*x1963);
evalcond[0]=(((py*x1971))+(((-1.0)*px*x1967))+(((-1.0)*px*x1964))+(((-1.0)*py*x1966))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((((-0.07641)*sj3))+(((-1.0)*sj3*x1972))+((x1964*x1969))+(((-1.0)*x1966*x1968))+((pz*sj1))+((x1968*x1971))+((x1967*x1969)));
evalcond[2]=((0.1519)+(((-1.0)*x1964*x1965))+(((-1.0)*x1965*x1967))+((cj3*x1972))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1970*x1971))+((x1966*x1970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1973=((9.9999999995e-6)*r00);
IkReal x1974=(cj1*sj0);
IkReal x1975=(sj0*sj1);
IkReal x1976=((0.99999999995)*r01);
IkReal x1977=((0.99999999995)*cj0*r00);
IkReal x1978=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+cj3+(((-1.0)*cj0*x1973))+(((-0.99999999995)*r00*sj0))+((cj0*x1976)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*x1975*x1976))+(((-1.0)*sj1*x1977))+(((-1.0)*sj1*x1978))+((cj1*r02))+((x1973*x1975)));
evalcond[3]=(((cj1*x1978))+((cj1*x1977))+(((-1.0)*x1973*x1974))+((r02*sj1))+((x1974*x1976)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1979=((9.9999999995e-6)*r00);
IkReal x1980=(cj1*sj0);
IkReal x1981=(py*sj1);
IkReal x1982=((9.9999999995e-6)*cj0);
IkReal x1983=(sj0*sj1);
IkReal x1984=((0.99999999995)*sj0);
IkReal x1985=((0.99999999995)*r01);
IkReal x1986=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1979))+(((-1.0)*r00*x1984))+((cj0*x1985)));
evalcond[2]=((-1.0)+(((-1.0)*x1983*x1985))+(((-1.0)*sj1*x1986))+((cj1*r02))+((x1979*x1983))+(((-1.0)*r01*sj1*x1982)));
evalcond[3]=(((cj1*r01*x1982))+(((-1.0)*x1979*x1980))+((x1980*x1985))+((r02*sj1))+((cj1*x1986)));
evalcond[4]=((0.1519)+(((-1.0)*x1981*x1982))+(((-1.0)*x1981*x1984))+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((9.9999999995e-6)*px*x1983)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1987=((7.24637681123188)*cj1);
IkReal x1988=(cj0*px);
IkReal x1989=(py*sj0);
IkReal x1990=(px*sj0);
IkReal x1991=((7.24637681123188e-5)*cj1);
IkReal x1992=(cj0*py);
if( IKabs(((((7.2463768115942)*pz*sj1))+((x1987*x1988))+((x1987*x1989))+((x1991*x1992))+(((-1.0)*x1990*x1991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.24637681123188e-5)*x1988))+(((7.24637681123188e-5)*x1989))+(((7.24637681123188)*x1990))+(((-7.24637681123188)*x1992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*pz*sj1))+((x1987*x1988))+((x1987*x1989))+((x1991*x1992))+(((-1.0)*x1990*x1991))))+IKsqr(((-0.553695652173913)+(((7.24637681123188e-5)*x1988))+(((7.24637681123188e-5)*x1989))+(((7.24637681123188)*x1990))+(((-7.24637681123188)*x1992))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*pz*sj1))+((x1987*x1988))+((x1987*x1989))+((x1991*x1992))+(((-1.0)*x1990*x1991))), ((-0.553695652173913)+(((7.24637681123188e-5)*x1988))+(((7.24637681123188e-5)*x1989))+(((7.24637681123188)*x1990))+(((-7.24637681123188)*x1992))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1993=((9.9999999995e-6)*px);
IkReal x1994=((9.9999999995e-6)*py);
IkReal x1995=((0.99999999995)*px);
IkReal x1996=(cj1*sj0);
IkReal x1997=(cj0*cj1);
IkReal x1998=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+((cj0*x1998))+(((-1.0)*cj0*x1993))+(((-1.0)*sj0*x1994))+(((-1.0)*sj0*x1995)));
evalcond[1]=((((-1.0)*x1993*x1996))+((x1996*x1998))+((x1995*x1997))+((x1994*x1997))+((pz*sj1))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1999=((9.9999999995e-6)*r00);
IkReal x2000=(cj1*sj0);
IkReal x2001=(py*sj1);
IkReal x2002=((9.9999999995e-6)*cj0);
IkReal x2003=(sj0*sj1);
IkReal x2004=((0.99999999995)*sj0);
IkReal x2005=((0.99999999995)*r01);
IkReal x2006=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1999))+(((-1.0)*r00*x2004))+((cj0*x2005)));
evalcond[2]=((1.0)+(((-1.0)*x2003*x2005))+(((-1.0)*r01*sj1*x2002))+((x1999*x2003))+((cj1*r02))+(((-1.0)*sj1*x2006)));
evalcond[3]=(((x2000*x2005))+((cj1*r01*x2002))+((r02*sj1))+((cj1*x2006))+(((-1.0)*x1999*x2000)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x2003))+(((-1.0)*x2001*x2004))+(((-1.0)*x2001*x2002))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2007=((7.24637681123188)*px);
IkReal x2008=(cj0*cj1);
IkReal x2009=(cj1*sj0);
IkReal x2010=((7.24637681123188)*py);
IkReal x2011=((7.24637681123188e-5)*px);
IkReal x2012=((7.24637681123188e-5)*py);
if( IKabs(((((7.2463768115942)*pz*sj1))+(((-1.0)*x2009*x2011))+((x2007*x2008))+((x2008*x2012))+((x2009*x2010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*sj0*x2012))+((cj0*x2010))+(((-1.0)*sj0*x2007))+(((-1.0)*cj0*x2011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*pz*sj1))+(((-1.0)*x2009*x2011))+((x2007*x2008))+((x2008*x2012))+((x2009*x2010))))+IKsqr(((-0.553695652173913)+(((-1.0)*sj0*x2012))+((cj0*x2010))+(((-1.0)*sj0*x2007))+(((-1.0)*cj0*x2011))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*pz*sj1))+(((-1.0)*x2009*x2011))+((x2007*x2008))+((x2008*x2012))+((x2009*x2010))), ((-0.553695652173913)+(((-1.0)*sj0*x2012))+((cj0*x2010))+(((-1.0)*sj0*x2007))+(((-1.0)*cj0*x2011))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2013=((9.9999999995e-6)*px);
IkReal x2014=((9.9999999995e-6)*py);
IkReal x2015=((0.99999999995)*px);
IkReal x2016=(cj1*sj0);
IkReal x2017=(cj0*cj1);
IkReal x2018=((0.99999999995)*py);
evalcond[0]=((-0.07641)+(((-1.0)*sj0*x2014))+(((-1.0)*sj0*x2015))+((cj0*x2018))+(((-0.138)*(IKcos(j4))))+(((-1.0)*cj0*x2013)));
evalcond[1]=(((x2015*x2017))+(((-1.0)*x2013*x2016))+((x2014*x2017))+((x2016*x2018))+((pz*sj1))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2019=((9.9999999995e-6)*r00);
IkReal x2020=(cj1*sj0);
IkReal x2021=((0.99999999995)*sj0);
IkReal x2022=(r01*sj1);
IkReal x2023=((9.9999999995e-6)*sj0);
IkReal x2024=((9.9999999995e-6)*cj0);
IkReal x2025=((0.99999999995)*r01);
IkReal x2026=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r01*x2023))+(((-1.0)*r00*x2021))+((cj0*x2025))+(((-1.0)*cj0*x2019)));
evalcond[2]=((((-1.0)*x2021*x2022))+(((-1.0)*x2022*x2024))+((cj1*r02))+(((-1.0)*sj1*x2026))+((sj0*sj1*x2019)));
evalcond[3]=(((x2020*x2025))+((cj1*r01*x2024))+((r02*sj1))+(((-1.0)*x2019*x2020))+((cj1*x2026)));
evalcond[4]=((((-1.0)*px*x2021))+(((-1.0)*px*x2024))+(((-1.0)*py*x2023))+(((0.99999999995)*cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2027=((7.24637681123188)*cj1);
IkReal x2028=(cj0*px);
IkReal x2029=(py*sj0);
IkReal x2030=((7.2463768115942)*pz);
IkReal x2031=((7.24637681123188)*sj1);
IkReal x2032=((7.24637681123188e-5)*px*sj0);
IkReal x2033=((7.24637681123188e-5)*cj0*py);
if( IKabs(((((-1.0)*cj1*x2032))+((sj1*x2030))+((x2027*x2029))+((x2027*x2028))+((cj1*x2033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*cj1*x2030))+(((-1.0)*sj1*x2032))+((x2028*x2031))+((sj1*x2033))+((x2029*x2031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2032))+((sj1*x2030))+((x2027*x2029))+((x2027*x2028))+((cj1*x2033))))+IKsqr(((-1.65442028985507)+(((-1.0)*cj1*x2030))+(((-1.0)*sj1*x2032))+((x2028*x2031))+((sj1*x2033))+((x2029*x2031))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x2032))+((sj1*x2030))+((x2027*x2029))+((x2027*x2028))+((cj1*x2033))), ((-1.65442028985507)+(((-1.0)*cj1*x2030))+(((-1.0)*sj1*x2032))+((x2028*x2031))+((sj1*x2033))+((x2029*x2031))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2034=((0.99999999995)*sj1);
IkReal x2035=(py*sj0);
IkReal x2036=((9.9999999995e-6)*cj1);
IkReal x2037=(px*sj0);
IkReal x2038=(cj0*px);
IkReal x2039=(cj0*py);
IkReal x2040=((0.99999999995)*cj1);
IkReal x2041=((9.9999999995e-6)*sj1);
evalcond[0]=((((-1.0)*x2036*x2037))+((x2036*x2039))+((pz*sj1))+((x2035*x2040))+(((-0.138)*(IKsin(j4))))+((x2038*x2040)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((x2037*x2041))+(((-1.0)*x2039*x2041))+((cj1*pz))+(((-1.0)*x2034*x2035))+(((-1.0)*x2034*x2038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2042=((9.9999999995e-6)*r00);
IkReal x2043=(cj1*sj0);
IkReal x2044=((0.99999999995)*sj0);
IkReal x2045=(r01*sj1);
IkReal x2046=((9.9999999995e-6)*sj0);
IkReal x2047=((9.9999999995e-6)*cj0);
IkReal x2048=((0.99999999995)*r01);
IkReal x2049=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((cj0*x2048))+(((-1.0)*cj0*x2042))+(((-1.0)*r01*x2046))+(((-1.0)*r00*x2044)));
evalcond[2]=((((-1.0)*sj1*x2049))+((sj0*sj1*x2042))+(((-1.0)*x2045*x2047))+(((-1.0)*x2044*x2045))+((cj1*r02)));
evalcond[3]=(((x2043*x2048))+((r02*sj1))+((cj1*r01*x2047))+((cj1*x2049))+(((-1.0)*x2042*x2043)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*py*x2046))+(((-1.0)*px*x2047))+(((-1.0)*px*x2044)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2050=((7.24637681123188)*cj1);
IkReal x2051=(cj0*px);
IkReal x2052=(py*sj0);
IkReal x2053=((7.2463768115942)*pz);
IkReal x2054=((7.24637681123188)*sj1);
IkReal x2055=((7.24637681123188e-5)*px*sj0);
IkReal x2056=((7.24637681123188e-5)*cj0*py);
if( IKabs(((((-1.0)*cj1*x2055))+((sj1*x2053))+((cj1*x2056))+((x2050*x2052))+((x2050*x2051)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((sj1*x2055))+(((-1.0)*sj1*x2056))+(((-1.0)*x2051*x2054))+((cj1*x2053))+(((-1.0)*x2052*x2054)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2055))+((sj1*x2053))+((cj1*x2056))+((x2050*x2052))+((x2050*x2051))))+IKsqr(((0.547028985507246)+((sj1*x2055))+(((-1.0)*sj1*x2056))+(((-1.0)*x2051*x2054))+((cj1*x2053))+(((-1.0)*x2052*x2054))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x2055))+((sj1*x2053))+((cj1*x2056))+((x2050*x2052))+((x2050*x2051))), ((0.547028985507246)+((sj1*x2055))+(((-1.0)*sj1*x2056))+(((-1.0)*x2051*x2054))+((cj1*x2053))+(((-1.0)*x2052*x2054))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2057=((0.99999999995)*sj1);
IkReal x2058=(py*sj0);
IkReal x2059=((9.9999999995e-6)*cj1);
IkReal x2060=(px*sj0);
IkReal x2061=(cj0*px);
IkReal x2062=(cj0*py);
IkReal x2063=((0.99999999995)*cj1);
IkReal x2064=((9.9999999995e-6)*sj1);
evalcond[0]=(((x2059*x2062))+((x2058*x2063))+(((-1.0)*x2059*x2060))+((pz*sj1))+(((-0.138)*(IKsin(j4))))+((x2061*x2063)));
evalcond[1]=((0.07549)+(((-1.0)*x2057*x2061))+((cj1*pz))+(((-1.0)*x2057*x2058))+((x2060*x2064))+(((-1.0)*x2062*x2064))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2065=((7.24637681123188)*cj1);
IkReal x2066=(cj0*px);
IkReal x2067=(py*sj0);
IkReal x2068=(px*sj0);
IkReal x2069=((7.24637681123188e-5)*cj1);
IkReal x2070=((499.999999975)*sj1);
IkReal x2071=((0.00499999999975)*sj1);
IkReal x2072=(cj0*py);
CheckValue<IkReal> x2073=IKPowWithIntegerCheck(cj3,-1);
if(!x2073.valid){
continue;
}
if( IKabs(((((7.2463768115942)*pz*sj1))+((x2069*x2072))+(((-1.0)*x2068*x2069))+((x2065*x2066))+((x2065*x2067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x2073.value)*(((-75.95)+((x2066*x2070))+(((-500.0)*cj1*pz))+((x2071*x2072))+(((-38.205)*cj3))+(((-1.0)*x2068*x2071))+((x2067*x2070)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*pz*sj1))+((x2069*x2072))+(((-1.0)*x2068*x2069))+((x2065*x2066))+((x2065*x2067))))+IKsqr(((0.0144927536231884)*(x2073.value)*(((-75.95)+((x2066*x2070))+(((-500.0)*cj1*pz))+((x2071*x2072))+(((-38.205)*cj3))+(((-1.0)*x2068*x2071))+((x2067*x2070))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*pz*sj1))+((x2069*x2072))+(((-1.0)*x2068*x2069))+((x2065*x2066))+((x2065*x2067))), ((0.0144927536231884)*(x2073.value)*(((-75.95)+((x2066*x2070))+(((-500.0)*cj1*pz))+((x2071*x2072))+(((-38.205)*cj3))+(((-1.0)*x2068*x2071))+((x2067*x2070))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2074=IKcos(j4);
IkReal x2075=((9.9999999995e-6)*cj0);
IkReal x2076=(py*sj1);
IkReal x2077=(px*sj0);
IkReal x2078=(py*sj0);
IkReal x2079=((0.138)*x2074);
IkReal x2080=((0.99999999995)*cj0*px);
evalcond[0]=((((-1.0)*px*x2075))+((sj3*x2079))+(((-9.9999999995e-6)*x2078))+(((0.99999999995)*cj0*py))+(((0.07641)*sj3))+(((-0.99999999995)*x2077)));
evalcond[1]=(((cj1*py*x2075))+(((0.99999999995)*cj1*x2078))+((cj1*x2080))+(((-9.9999999995e-6)*cj1*x2077))+((pz*sj1))+(((-0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+(((-1.0)*sj1*x2080))+(((-0.99999999995)*sj0*x2076))+(((9.9999999995e-6)*sj1*x2077))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x2079))+(((-1.0)*x2075*x2076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2081=((7.24637681123188)*cj1);
IkReal x2082=(cj0*px);
IkReal x2083=(py*sj0);
IkReal x2084=((7.24637681123188e-5)*cj1);
IkReal x2085=(px*sj0);
IkReal x2086=(cj0*py);
CheckValue<IkReal> x2087=IKPowWithIntegerCheck(sj3,-1);
if(!x2087.valid){
continue;
}
if( IKabs(((((7.2463768115942)*pz*sj1))+((x2084*x2086))+(((-1.0)*x2084*x2085))+((x2081*x2082))+((x2081*x2083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x2087.value)*(((((-38.205)*sj3))+(((499.999999975)*x2085))+(((0.00499999999975)*x2083))+(((0.00499999999975)*x2082))+(((-499.999999975)*x2086)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*pz*sj1))+((x2084*x2086))+(((-1.0)*x2084*x2085))+((x2081*x2082))+((x2081*x2083))))+IKsqr(((0.0144927536231884)*(x2087.value)*(((((-38.205)*sj3))+(((499.999999975)*x2085))+(((0.00499999999975)*x2083))+(((0.00499999999975)*x2082))+(((-499.999999975)*x2086))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*pz*sj1))+((x2084*x2086))+(((-1.0)*x2084*x2085))+((x2081*x2082))+((x2081*x2083))), ((0.0144927536231884)*(x2087.value)*(((((-38.205)*sj3))+(((499.999999975)*x2085))+(((0.00499999999975)*x2083))+(((0.00499999999975)*x2082))+(((-499.999999975)*x2086))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2088=IKcos(j4);
IkReal x2089=((9.9999999995e-6)*cj0);
IkReal x2090=(py*sj1);
IkReal x2091=(px*sj0);
IkReal x2092=(py*sj0);
IkReal x2093=((0.138)*x2088);
IkReal x2094=((0.99999999995)*cj0*px);
evalcond[0]=((((0.99999999995)*cj0*py))+(((-0.99999999995)*x2091))+((sj3*x2093))+(((-9.9999999995e-6)*x2092))+(((0.07641)*sj3))+(((-1.0)*px*x2089)));
evalcond[1]=(((cj1*py*x2089))+((cj1*x2094))+(((-9.9999999995e-6)*cj1*x2091))+((pz*sj1))+(((-0.138)*(IKsin(j4))))+(((0.99999999995)*cj1*x2092)));
evalcond[2]=((0.1519)+(((9.9999999995e-6)*sj1*x2091))+((cj1*pz))+(((-1.0)*x2089*x2090))+(((0.07641)*cj3))+((cj3*x2093))+(((-0.99999999995)*sj0*x2090))+(((-1.0)*sj1*x2094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2095=((9.9999999995e-6)*r00);
IkReal x2096=(cj1*sj0);
IkReal x2097=(sj0*sj1);
IkReal x2098=((9.9999999995e-6)*r01);
IkReal x2099=((0.99999999995)*r01);
IkReal x2100=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj0*x2098))+((cj0*x2099))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj0*x2095))+(((-1.0)*cj3)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*x2097*x2099))+(((-1.0)*sj1*x2100))+(((-1.0)*cj0*sj1*x2098))+((cj1*r02))+((x2095*x2097)));
evalcond[3]=(((x2096*x2099))+(((-1.0)*x2095*x2096))+((r02*sj1))+((cj1*x2100))+((cj0*cj1*x2098)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2101=((9.9999999995e-6)*r00);
IkReal x2102=(cj1*sj0);
IkReal x2103=(py*sj1);
IkReal x2104=((9.9999999995e-6)*cj0);
IkReal x2105=(sj0*sj1);
IkReal x2106=((0.99999999995)*sj0);
IkReal x2107=((0.99999999995)*r01);
IkReal x2108=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x2107))+(((-1.0)*r00*x2106))+(((-1.0)*cj0*x2101)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x2108))+(((-1.0)*r01*sj1*x2104))+((cj1*r02))+(((-1.0)*x2105*x2107))+((x2101*x2105)));
evalcond[3]=((((-1.0)*x2101*x2102))+((x2102*x2107))+((r02*sj1))+((cj1*r01*x2104))+((cj1*x2108)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x2103*x2106))+(((-1.0)*x2103*x2104))+((cj1*pz))+(((9.9999999995e-6)*px*x2105)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2109=((7.24637681123188)*px);
IkReal x2110=(cj0*cj1);
IkReal x2111=(cj1*sj0);
IkReal x2112=((7.24637681123188)*py);
IkReal x2113=((7.24637681123188e-5)*px);
IkReal x2114=((7.24637681123188e-5)*py);
if( IKabs((((x2111*x2113))+(((-1.0)*x2111*x2112))+(((-1.0)*x2109*x2110))+(((-1.0)*x2110*x2114))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*sj0*x2109))+(((-1.0)*cj0*x2113))+((cj0*x2112))+(((-1.0)*sj0*x2114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2111*x2113))+(((-1.0)*x2111*x2112))+(((-1.0)*x2109*x2110))+(((-1.0)*x2110*x2114))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+(((-1.0)*sj0*x2109))+(((-1.0)*cj0*x2113))+((cj0*x2112))+(((-1.0)*sj0*x2114))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x2111*x2113))+(((-1.0)*x2111*x2112))+(((-1.0)*x2109*x2110))+(((-1.0)*x2110*x2114))+(((-7.2463768115942)*pz*sj1))), ((-0.553695652173913)+(((-1.0)*sj0*x2109))+(((-1.0)*cj0*x2113))+((cj0*x2112))+(((-1.0)*sj0*x2114))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2115=((9.9999999995e-6)*px);
IkReal x2116=((9.9999999995e-6)*py);
IkReal x2117=((0.99999999995)*px);
IkReal x2118=(cj1*sj0);
IkReal x2119=(cj0*cj1);
IkReal x2120=((0.99999999995)*py);
evalcond[0]=((-0.07641)+(((-1.0)*cj0*x2115))+(((-0.138)*(IKcos(j4))))+(((-1.0)*sj0*x2117))+(((-1.0)*sj0*x2116))+((cj0*x2120)));
evalcond[1]=(((x2117*x2119))+((x2116*x2119))+((x2118*x2120))+(((0.138)*(IKsin(j4))))+((pz*sj1))+(((-1.0)*x2115*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2121=((9.9999999995e-6)*r00);
IkReal x2122=(cj1*sj0);
IkReal x2123=(py*sj1);
IkReal x2124=((9.9999999995e-6)*cj0);
IkReal x2125=(sj0*sj1);
IkReal x2126=((0.99999999995)*sj0);
IkReal x2127=((0.99999999995)*r01);
IkReal x2128=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x2126))+(((-1.0)*cj0*x2121))+((cj0*x2127)));
evalcond[2]=((1.0)+(((-1.0)*x2125*x2127))+((cj1*r02))+(((-1.0)*r01*sj1*x2124))+((x2121*x2125))+(((-1.0)*sj1*x2128)));
evalcond[3]=(((x2122*x2127))+((cj1*x2128))+(((-1.0)*x2121*x2122))+((r02*sj1))+((cj1*r01*x2124)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((9.9999999995e-6)*px*x2125))+(((-1.0)*x2123*x2124))+(((-1.0)*x2123*x2126)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2129=((7.24637681123188)*cj1);
IkReal x2130=(cj0*px);
IkReal x2131=(py*sj0);
IkReal x2132=(px*sj0);
IkReal x2133=((7.24637681123188e-5)*cj1);
IkReal x2134=(cj0*py);
if( IKabs(((((-1.0)*x2133*x2134))+(((-1.0)*x2129*x2131))+(((-1.0)*x2129*x2130))+((x2132*x2133))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((7.24637681123188)*x2132))+(((7.24637681123188e-5)*x2130))+(((7.24637681123188e-5)*x2131))+(((-7.24637681123188)*x2134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2133*x2134))+(((-1.0)*x2129*x2131))+(((-1.0)*x2129*x2130))+((x2132*x2133))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+(((7.24637681123188)*x2132))+(((7.24637681123188e-5)*x2130))+(((7.24637681123188e-5)*x2131))+(((-7.24637681123188)*x2134))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2133*x2134))+(((-1.0)*x2129*x2131))+(((-1.0)*x2129*x2130))+((x2132*x2133))+(((-7.2463768115942)*pz*sj1))), ((-0.553695652173913)+(((7.24637681123188)*x2132))+(((7.24637681123188e-5)*x2130))+(((7.24637681123188e-5)*x2131))+(((-7.24637681123188)*x2134))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2135=((9.9999999995e-6)*px);
IkReal x2136=((9.9999999995e-6)*py);
IkReal x2137=((0.99999999995)*px);
IkReal x2138=(cj1*sj0);
IkReal x2139=(cj0*cj1);
IkReal x2140=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*sj0*x2137))+(((-1.0)*sj0*x2136))+((cj0*x2140))+(((-1.0)*cj0*x2135)));
evalcond[1]=(((x2138*x2140))+((x2136*x2139))+(((-1.0)*x2135*x2138))+(((0.138)*(IKsin(j4))))+((pz*sj1))+((x2137*x2139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2141=((9.9999999995e-6)*r00);
IkReal x2142=(cj1*sj0);
IkReal x2143=((0.99999999995)*sj0);
IkReal x2144=(r01*sj1);
IkReal x2145=((9.9999999995e-6)*sj0);
IkReal x2146=((9.9999999995e-6)*cj0);
IkReal x2147=((0.99999999995)*r01);
IkReal x2148=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*cj0*x2141))+(((-1.0)*r01*x2145))+(((-1.0)*r00*x2143))+((cj0*x2147)));
evalcond[2]=((((-1.0)*x2144*x2146))+(((-1.0)*x2143*x2144))+((sj0*sj1*x2141))+((cj1*r02))+(((-1.0)*sj1*x2148)));
evalcond[3]=(((cj1*x2148))+((cj1*r01*x2146))+((x2142*x2147))+((r02*sj1))+(((-1.0)*x2141*x2142)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*py*x2145))+(((-1.0)*px*x2143))+(((-1.0)*px*x2146)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2149=((7.24637681123188)*cj1);
IkReal x2150=(cj0*px);
IkReal x2151=(py*sj0);
IkReal x2152=((7.2463768115942)*pz);
IkReal x2153=((7.24637681123188)*sj1);
IkReal x2154=((7.24637681123188e-5)*px*sj0);
IkReal x2155=((7.24637681123188e-5)*cj0*py);
if( IKabs(((((-1.0)*x2149*x2150))+(((-1.0)*x2149*x2151))+(((-1.0)*sj1*x2152))+(((-1.0)*cj1*x2155))+((cj1*x2154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*sj1*x2154))+((x2150*x2153))+((sj1*x2155))+((x2151*x2153))+(((-1.0)*cj1*x2152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2149*x2150))+(((-1.0)*x2149*x2151))+(((-1.0)*sj1*x2152))+(((-1.0)*cj1*x2155))+((cj1*x2154))))+IKsqr(((-1.65442028985507)+(((-1.0)*sj1*x2154))+((x2150*x2153))+((sj1*x2155))+((x2151*x2153))+(((-1.0)*cj1*x2152))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2149*x2150))+(((-1.0)*x2149*x2151))+(((-1.0)*sj1*x2152))+(((-1.0)*cj1*x2155))+((cj1*x2154))), ((-1.65442028985507)+(((-1.0)*sj1*x2154))+((x2150*x2153))+((sj1*x2155))+((x2151*x2153))+(((-1.0)*cj1*x2152))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2156=((0.99999999995)*sj1);
IkReal x2157=(py*sj0);
IkReal x2158=((9.9999999995e-6)*cj1);
IkReal x2159=(px*sj0);
IkReal x2160=(cj0*px);
IkReal x2161=(cj0*py);
IkReal x2162=((0.99999999995)*cj1);
IkReal x2163=((9.9999999995e-6)*sj1);
evalcond[0]=(((x2157*x2162))+(((-1.0)*x2158*x2159))+(((0.138)*(IKsin(j4))))+((pz*sj1))+((x2160*x2162))+((x2158*x2161)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*x2161*x2163))+(((-1.0)*x2156*x2160))+((x2159*x2163))+(((-1.0)*x2156*x2157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2164=((9.9999999995e-6)*r00);
IkReal x2165=(cj1*sj0);
IkReal x2166=((0.99999999995)*sj0);
IkReal x2167=(r01*sj1);
IkReal x2168=((9.9999999995e-6)*sj0);
IkReal x2169=((9.9999999995e-6)*cj0);
IkReal x2170=((0.99999999995)*r01);
IkReal x2171=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r01*x2168))+((cj0*x2170))+(((-1.0)*cj0*x2164))+(((-1.0)*r00*x2166)));
evalcond[2]=((((-1.0)*sj1*x2171))+((sj0*sj1*x2164))+((cj1*r02))+(((-1.0)*x2166*x2167))+(((-1.0)*x2167*x2169)));
evalcond[3]=(((r02*sj1))+((x2165*x2170))+((cj1*r01*x2169))+(((-1.0)*x2164*x2165))+((cj1*x2171)));
evalcond[4]=((((-1.0)*px*x2166))+(((-1.0)*px*x2169))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x2168)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2172=((7.24637681123188)*cj1);
IkReal x2173=(cj0*px);
IkReal x2174=(py*sj0);
IkReal x2175=((7.2463768115942)*pz);
IkReal x2176=((7.24637681123188)*sj1);
IkReal x2177=((7.24637681123188e-5)*px*sj0);
IkReal x2178=((7.24637681123188e-5)*cj0*py);
if( IKabs(((((-1.0)*sj1*x2175))+((cj1*x2177))+(((-1.0)*cj1*x2178))+(((-1.0)*x2172*x2174))+(((-1.0)*x2172*x2173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((sj1*x2177))+(((-1.0)*x2174*x2176))+(((-1.0)*sj1*x2178))+((cj1*x2175))+(((-1.0)*x2173*x2176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x2175))+((cj1*x2177))+(((-1.0)*cj1*x2178))+(((-1.0)*x2172*x2174))+(((-1.0)*x2172*x2173))))+IKsqr(((0.547028985507246)+((sj1*x2177))+(((-1.0)*x2174*x2176))+(((-1.0)*sj1*x2178))+((cj1*x2175))+(((-1.0)*x2173*x2176))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj1*x2175))+((cj1*x2177))+(((-1.0)*cj1*x2178))+(((-1.0)*x2172*x2174))+(((-1.0)*x2172*x2173))), ((0.547028985507246)+((sj1*x2177))+(((-1.0)*x2174*x2176))+(((-1.0)*sj1*x2178))+((cj1*x2175))+(((-1.0)*x2173*x2176))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2179=((0.99999999995)*sj1);
IkReal x2180=(py*sj0);
IkReal x2181=((9.9999999995e-6)*cj1);
IkReal x2182=(px*sj0);
IkReal x2183=(cj0*px);
IkReal x2184=(cj0*py);
IkReal x2185=((0.99999999995)*cj1);
IkReal x2186=((9.9999999995e-6)*sj1);
evalcond[0]=(((x2180*x2185))+((x2183*x2185))+((x2181*x2184))+(((-1.0)*x2181*x2182))+(((0.138)*(IKsin(j4))))+((pz*sj1)));
evalcond[1]=((0.07549)+((x2182*x2186))+((cj1*pz))+(((-1.0)*x2184*x2186))+(((-1.0)*x2179*x2183))+(((-1.0)*x2179*x2180))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2187=((7.24637681123188)*cj1);
IkReal x2188=(cj0*px);
IkReal x2189=(py*sj0);
IkReal x2190=(px*sj0);
IkReal x2191=((7.24637681123188e-5)*cj1);
IkReal x2192=((499.999999975)*sj1);
IkReal x2193=((0.00499999999975)*sj1);
IkReal x2194=(cj0*py);
CheckValue<IkReal> x2195=IKPowWithIntegerCheck(cj3,-1);
if(!x2195.valid){
continue;
}
if( IKabs(((((-1.0)*x2187*x2189))+(((-1.0)*x2187*x2188))+(((-1.0)*x2191*x2194))+((x2190*x2191))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x2195.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x2193*x2194))+((x2189*x2192))+((x2188*x2192))+(((-1.0)*x2190*x2193))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2187*x2189))+(((-1.0)*x2187*x2188))+(((-1.0)*x2191*x2194))+((x2190*x2191))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x2195.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x2193*x2194))+((x2189*x2192))+((x2188*x2192))+(((-1.0)*x2190*x2193))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2187*x2189))+(((-1.0)*x2187*x2188))+(((-1.0)*x2191*x2194))+((x2190*x2191))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x2195.value)*(((-75.95)+(((-500.0)*cj1*pz))+((x2193*x2194))+((x2189*x2192))+((x2188*x2192))+(((-1.0)*x2190*x2193))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2196=IKcos(j4);
IkReal x2197=((9.9999999995e-6)*cj0);
IkReal x2198=(py*sj1);
IkReal x2199=((9.9999999995e-6)*sj0);
IkReal x2200=((0.99999999995)*sj0);
IkReal x2201=(cj1*px);
IkReal x2202=(cj1*py);
IkReal x2203=(px*sj1);
IkReal x2204=((0.99999999995)*cj0);
IkReal x2205=((0.138)*x2196);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x2205))+(((-1.0)*px*x2200))+(((-1.0)*py*x2199))+(((-1.0)*px*x2197))+((py*x2204)));
evalcond[1]=(((x2200*x2202))+((x2201*x2204))+(((-1.0)*x2199*x2201))+((x2197*x2202))+(((0.138)*(IKsin(j4))))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x2203*x2204))+(((-1.0)*x2197*x2198))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x2205))+(((-1.0)*x2198*x2200))+((x2199*x2203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2206=((7.24637681123188)*cj1);
IkReal x2207=(cj0*px);
IkReal x2208=(py*sj0);
IkReal x2209=((7.24637681123188e-5)*cj1);
IkReal x2210=(px*sj0);
IkReal x2211=(cj0*py);
CheckValue<IkReal> x2212=IKPowWithIntegerCheck(sj3,-1);
if(!x2212.valid){
continue;
}
if( IKabs(((((-1.0)*x2209*x2211))+(((-1.0)*x2206*x2208))+(((-1.0)*x2206*x2207))+((x2209*x2210))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x2212.value)*(((((-38.205)*sj3))+(((-499.999999975)*x2210))+(((-0.00499999999975)*x2207))+(((-0.00499999999975)*x2208))+(((499.999999975)*x2211)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2209*x2211))+(((-1.0)*x2206*x2208))+(((-1.0)*x2206*x2207))+((x2209*x2210))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x2212.value)*(((((-38.205)*sj3))+(((-499.999999975)*x2210))+(((-0.00499999999975)*x2207))+(((-0.00499999999975)*x2208))+(((499.999999975)*x2211))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2209*x2211))+(((-1.0)*x2206*x2208))+(((-1.0)*x2206*x2207))+((x2209*x2210))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x2212.value)*(((((-38.205)*sj3))+(((-499.999999975)*x2210))+(((-0.00499999999975)*x2207))+(((-0.00499999999975)*x2208))+(((499.999999975)*x2211))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2213=IKcos(j4);
IkReal x2214=((9.9999999995e-6)*cj0);
IkReal x2215=(py*sj1);
IkReal x2216=((9.9999999995e-6)*sj0);
IkReal x2217=((0.99999999995)*sj0);
IkReal x2218=(cj1*px);
IkReal x2219=(cj1*py);
IkReal x2220=(px*sj1);
IkReal x2221=((0.99999999995)*cj0);
IkReal x2222=((0.138)*x2213);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*py*x2216))+((py*x2221))+(((-1.0)*px*x2214))+(((-1.0)*px*x2217))+(((-1.0)*sj3*x2222)));
evalcond[1]=(((x2217*x2219))+((x2214*x2219))+((x2218*x2221))+(((-1.0)*x2216*x2218))+(((0.138)*(IKsin(j4))))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x2214*x2215))+(((-1.0)*x2215*x2217))+(((-1.0)*x2220*x2221))+((x2216*x2220))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x2222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2223=((9.9999999995e-6)*r00);
IkReal x2224=(cj1*sj0);
IkReal x2225=(sj0*sj1);
IkReal x2226=((0.99999999995)*r01);
IkReal x2227=((0.99999999995)*cj0*r00);
IkReal x2228=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+sj2+((cj0*x2226))+(((-1.0)*cj0*x2223))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*x2225*x2226))+((cj1*r02))+(((-1.0)*sj1*x2227))+(((-1.0)*sj1*x2228))+((x2223*x2225)));
evalcond[3]=(cj2+((r02*sj1))+((x2224*x2226))+(((-1.0)*x2223*x2224))+((cj1*x2228))+((cj1*x2227)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2229=((7.24637681123188e-5)*sj1);
IkReal x2230=(px*sj0);
IkReal x2231=(cj0*py);
IkReal x2232=(cj0*px);
IkReal x2233=((7.24637681123188)*sj1);
IkReal x2234=((499.999999975)*cj1);
IkReal x2235=((0.00499999999975)*cj1);
IkReal x2236=(py*sj0);
CheckValue<IkReal> x2237=IKPowWithIntegerCheck(sj2,-1);
if(!x2237.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x2237.value)*((((x2232*x2234))+(((500.0)*pz*sj1))+((x2231*x2235))+(((-1.0)*x2230*x2235))+((x2234*x2236)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+((x2232*x2233))+((x2229*x2231))+(((-1.0)*x2229*x2230))+(((-7.2463768115942)*cj1*pz))+((x2233*x2236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x2237.value)*((((x2232*x2234))+(((500.0)*pz*sj1))+((x2231*x2235))+(((-1.0)*x2230*x2235))+((x2234*x2236))))))+IKsqr(((-1.65442028985507)+((x2232*x2233))+((x2229*x2231))+(((-1.0)*x2229*x2230))+(((-7.2463768115942)*cj1*pz))+((x2233*x2236))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x2237.value)*((((x2232*x2234))+(((500.0)*pz*sj1))+((x2231*x2235))+(((-1.0)*x2230*x2235))+((x2234*x2236))))), ((-1.65442028985507)+((x2232*x2233))+((x2229*x2231))+(((-1.0)*x2229*x2230))+(((-7.2463768115942)*cj1*pz))+((x2233*x2236))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2238=IKsin(j4);
IkReal x2239=((9.9999999995e-6)*px);
IkReal x2240=(py*sj0);
IkReal x2241=((0.99999999995)*sj1);
IkReal x2242=((0.99999999995)*px);
IkReal x2243=(cj0*cj1);
IkReal x2244=((9.9999999995e-6)*py);
IkReal x2245=((0.138)*x2238);
evalcond[0]=((((-1.0)*sj0*x2242))+(((-1.0)*cj0*x2239))+(((0.99999999995)*cj0*py))+((cj2*x2245))+(((-9.9999999995e-6)*x2240)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*x2240*x2241))+((sj0*sj1*x2239))+(((-1.0)*cj0*sj1*x2244))+(((-1.0)*cj0*px*x2241)));
evalcond[2]=(((x2243*x2244))+(((-1.0)*sj2*x2245))+(((0.99999999995)*cj1*x2240))+((pz*sj1))+(((-1.0)*cj1*sj0*x2239))+((x2242*x2243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2246=(px*sj1);
IkReal x2247=(cj0*py);
IkReal x2248=(py*sj0);
CheckValue<IkReal> x2249=IKPowWithIntegerCheck(cj2,-1);
if(!x2249.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x2249.value)*(((((0.00499999999975)*x2248))+(((-499.999999975)*x2247))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((7.24637681123188e-5)*sj1*x2247))+(((-7.24637681123188e-5)*sj0*x2246))+(((-7.2463768115942)*cj1*pz))+(((7.24637681123188)*sj1*x2248))+(((7.24637681123188)*cj0*x2246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x2249.value)*(((((0.00499999999975)*x2248))+(((-499.999999975)*x2247))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0))))))+IKsqr(((-1.65442028985507)+(((7.24637681123188e-5)*sj1*x2247))+(((-7.24637681123188e-5)*sj0*x2246))+(((-7.2463768115942)*cj1*pz))+(((7.24637681123188)*sj1*x2248))+(((7.24637681123188)*cj0*x2246))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x2249.value)*(((((0.00499999999975)*x2248))+(((-499.999999975)*x2247))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0))))), ((-1.65442028985507)+(((7.24637681123188e-5)*sj1*x2247))+(((-7.24637681123188e-5)*sj0*x2246))+(((-7.2463768115942)*cj1*pz))+(((7.24637681123188)*sj1*x2248))+(((7.24637681123188)*cj0*x2246))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2250=IKsin(j4);
IkReal x2251=((9.9999999995e-6)*px);
IkReal x2252=(py*sj0);
IkReal x2253=((0.99999999995)*sj1);
IkReal x2254=((0.99999999995)*px);
IkReal x2255=(cj0*cj1);
IkReal x2256=((9.9999999995e-6)*py);
IkReal x2257=((0.138)*x2250);
evalcond[0]=((((-1.0)*cj0*x2251))+((cj2*x2257))+(((0.99999999995)*cj0*py))+(((-1.0)*sj0*x2254))+(((-9.9999999995e-6)*x2252)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+(((-1.0)*x2252*x2253))+((cj1*pz))+(((-1.0)*cj0*sj1*x2256))+(((-1.0)*cj0*px*x2253))+((sj0*sj1*x2251)));
evalcond[2]=(((x2255*x2256))+(((-1.0)*sj2*x2257))+(((0.99999999995)*cj1*x2252))+((x2254*x2255))+((pz*sj1))+(((-1.0)*cj1*sj0*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2258=((9.9999999995e-6)*r00);
IkReal x2259=(cj1*sj0);
IkReal x2260=(sj0*sj1);
IkReal x2261=((0.99999999995)*r01);
IkReal x2262=((0.99999999995)*cj0*r00);
IkReal x2263=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*sj2))+(((-1.0)*cj0*x2258))+((cj0*x2261))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=(((x2258*x2260))+((cj1*r02))+(((-1.0)*x2260*x2261))+(((-1.0)*sj1*x2262))+(((-1.0)*sj1*x2263)));
evalcond[3]=(((x2259*x2261))+((cj1*x2262))+((cj1*x2263))+(((-1.0)*x2258*x2259))+((r02*sj1))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2264=((7.24637681123188e-5)*sj1);
IkReal x2265=(px*sj0);
IkReal x2266=(cj0*py);
IkReal x2267=(cj0*px);
IkReal x2268=((7.24637681123188)*sj1);
IkReal x2269=((499.999999975)*cj1);
IkReal x2270=((0.00499999999975)*cj1);
IkReal x2271=(py*sj0);
CheckValue<IkReal> x2272=IKPowWithIntegerCheck(sj2,-1);
if(!x2272.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x2272.value)*(((((500.0)*pz*sj1))+((x2269*x2271))+((x2266*x2270))+((x2267*x2269))+(((-1.0)*x2265*x2270)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((-1.0)*x2268*x2271))+(((7.2463768115942)*cj1*pz))+((x2264*x2265))+(((-1.0)*x2264*x2266))+(((-1.0)*x2267*x2268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x2272.value)*(((((500.0)*pz*sj1))+((x2269*x2271))+((x2266*x2270))+((x2267*x2269))+(((-1.0)*x2265*x2270))))))+IKsqr(((0.547028985507246)+(((-1.0)*x2268*x2271))+(((7.2463768115942)*cj1*pz))+((x2264*x2265))+(((-1.0)*x2264*x2266))+(((-1.0)*x2267*x2268))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x2272.value)*(((((500.0)*pz*sj1))+((x2269*x2271))+((x2266*x2270))+((x2267*x2269))+(((-1.0)*x2265*x2270))))), ((0.547028985507246)+(((-1.0)*x2268*x2271))+(((7.2463768115942)*cj1*pz))+((x2264*x2265))+(((-1.0)*x2264*x2266))+(((-1.0)*x2267*x2268))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2273=IKsin(j4);
IkReal x2274=((9.9999999995e-6)*px);
IkReal x2275=(py*sj0);
IkReal x2276=((0.99999999995)*sj1);
IkReal x2277=((0.99999999995)*px);
IkReal x2278=(cj0*cj1);
IkReal x2279=((9.9999999995e-6)*py);
IkReal x2280=((0.138)*x2273);
evalcond[0]=((((-1.0)*sj0*x2277))+((cj2*x2280))+(((0.99999999995)*cj0*py))+(((-1.0)*cj0*x2274))+(((-9.9999999995e-6)*x2275)));
evalcond[1]=((0.07549)+(((-1.0)*cj0*sj1*x2279))+(((-1.0)*x2275*x2276))+((cj1*pz))+(((-1.0)*cj0*px*x2276))+((sj0*sj1*x2274))+(((-0.138)*(IKcos(j4)))));
evalcond[2]=((((-1.0)*sj2*x2280))+(((0.99999999995)*cj1*x2275))+(((-1.0)*cj1*sj0*x2274))+((pz*sj1))+((x2277*x2278))+((x2278*x2279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2281=(cj0*py);
IkReal x2282=(px*sj1);
IkReal x2283=(py*sj0);
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(cj2,-1);
if(!x2284.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x2284.value)*(((((0.00499999999975)*x2283))+(((-499.999999975)*x2281))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((7.24637681123188e-5)*sj0*x2282))+(((-7.24637681123188e-5)*sj1*x2281))+(((-7.24637681123188)*cj0*x2282))+(((7.2463768115942)*cj1*pz))+(((-7.24637681123188)*sj1*x2283)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x2284.value)*(((((0.00499999999975)*x2283))+(((-499.999999975)*x2281))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0))))))+IKsqr(((0.547028985507246)+(((7.24637681123188e-5)*sj0*x2282))+(((-7.24637681123188e-5)*sj1*x2281))+(((-7.24637681123188)*cj0*x2282))+(((7.2463768115942)*cj1*pz))+(((-7.24637681123188)*sj1*x2283))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x2284.value)*(((((0.00499999999975)*x2283))+(((-499.999999975)*x2281))+(((0.00499999999975)*cj0*px))+(((499.999999975)*px*sj0))))), ((0.547028985507246)+(((7.24637681123188e-5)*sj0*x2282))+(((-7.24637681123188e-5)*sj1*x2281))+(((-7.24637681123188)*cj0*x2282))+(((7.2463768115942)*cj1*pz))+(((-7.24637681123188)*sj1*x2283))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2285=IKsin(j4);
IkReal x2286=((9.9999999995e-6)*px);
IkReal x2287=(py*sj0);
IkReal x2288=((0.99999999995)*sj1);
IkReal x2289=((0.99999999995)*px);
IkReal x2290=(cj0*cj1);
IkReal x2291=((9.9999999995e-6)*py);
IkReal x2292=((0.138)*x2285);
evalcond[0]=((((-1.0)*cj0*x2286))+((cj2*x2292))+(((0.99999999995)*cj0*py))+(((-9.9999999995e-6)*x2287))+(((-1.0)*sj0*x2289)));
evalcond[1]=((0.07549)+((sj0*sj1*x2286))+(((-1.0)*cj0*px*x2288))+((cj1*pz))+(((-1.0)*x2287*x2288))+(((-0.138)*(IKcos(j4))))+(((-1.0)*cj0*sj1*x2291)));
evalcond[2]=((((0.99999999995)*cj1*x2287))+(((-1.0)*cj1*sj0*x2286))+((x2289*x2290))+(((-1.0)*sj2*x2292))+((pz*sj1))+((x2290*x2291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2302=IKPowWithIntegerCheck(cj3,-1);
if(!x2302.valid){
continue;
}
IkReal x2293=x2302.value;
IkReal x2294=(cj1*cj3);
IkReal x2295=(cj2*sj3);
IkReal x2296=((500.0)*pz);
IkReal x2297=((0.0144927536231884)*x2293);
IkReal x2298=((499.999999975)*cj0*px);
IkReal x2299=((0.00499999999975)*cj0*py);
IkReal x2300=((0.00499999999975)*px*sj0);
IkReal x2301=((499.999999975)*py*sj0);
CheckValue<IkReal> x2303=IKPowWithIntegerCheck(sj2,-1);
if(!x2303.valid){
continue;
}
if( IKabs((x2297*(x2303.value)*(((((-75.95)*x2295))+((cj3*sj1*x2296))+(((-1.0)*cj1*x2295*x2296))+(((-1.0)*x2294*x2300))+(((-1.0)*sj1*x2295*x2300))+((sj1*x2295*x2299))+((sj1*x2295*x2298))+((x2294*x2301))+((sj1*x2295*x2301))+((x2294*x2299))+((x2294*x2298)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2297*(((-75.95)+((sj1*x2301))+((sj1*x2298))+((sj1*x2299))+(((-1.0)*sj1*x2300))+(((-1.0)*cj1*x2296))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2297*(x2303.value)*(((((-75.95)*x2295))+((cj3*sj1*x2296))+(((-1.0)*cj1*x2295*x2296))+(((-1.0)*x2294*x2300))+(((-1.0)*sj1*x2295*x2300))+((sj1*x2295*x2299))+((sj1*x2295*x2298))+((x2294*x2301))+((sj1*x2295*x2301))+((x2294*x2299))+((x2294*x2298))))))+IKsqr((x2297*(((-75.95)+((sj1*x2301))+((sj1*x2298))+((sj1*x2299))+(((-1.0)*sj1*x2300))+(((-1.0)*cj1*x2296))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2297*(x2303.value)*(((((-75.95)*x2295))+((cj3*sj1*x2296))+(((-1.0)*cj1*x2295*x2296))+(((-1.0)*x2294*x2300))+(((-1.0)*sj1*x2295*x2300))+((sj1*x2295*x2299))+((sj1*x2295*x2298))+((x2294*x2301))+((sj1*x2295*x2301))+((x2294*x2299))+((x2294*x2298))))), (x2297*(((-75.95)+((sj1*x2301))+((sj1*x2298))+((sj1*x2299))+(((-1.0)*sj1*x2300))+(((-1.0)*cj1*x2296))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2304=IKcos(j4);
IkReal x2305=IKsin(j4);
IkReal x2306=((0.99999999995)*sj0);
IkReal x2307=(py*sj1);
IkReal x2308=((9.9999999995e-6)*cj0);
IkReal x2309=(cj1*py);
IkReal x2310=((9.9999999995e-6)*sj0);
IkReal x2311=(px*sj1);
IkReal x2312=((0.07641)*sj3);
IkReal x2313=(cj1*px);
IkReal x2314=((0.99999999995)*cj0);
IkReal x2315=((0.138)*x2305);
IkReal x2316=((0.138)*sj3*x2304);
evalcond[0]=((((-1.0)*py*x2310))+((sj2*x2312))+((sj2*x2316))+((cj2*x2315))+(((-1.0)*px*x2306))+(((-1.0)*px*x2308))+((py*x2314)));
evalcond[1]=((0.1519)+(((-1.0)*x2306*x2307))+(((0.138)*cj3*x2304))+(((-1.0)*x2311*x2314))+((cj1*pz))+(((0.07641)*cj3))+((x2310*x2311))+(((-1.0)*x2307*x2308)));
evalcond[2]=(((cj2*x2312))+((cj2*x2316))+((x2308*x2309))+((x2306*x2309))+(((-1.0)*x2310*x2313))+(((-1.0)*sj2*x2315))+((pz*sj1))+((x2313*x2314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2329=IKPowWithIntegerCheck(cj3,-1);
if(!x2329.valid){
continue;
}
IkReal x2317=x2329.value;
IkReal x2318=((0.00499999999975)*cj0);
IkReal x2319=(py*sj1);
IkReal x2320=(cj3*px);
IkReal x2321=((499.999999975)*sj0);
IkReal x2322=((0.00499999999975)*sj0);
IkReal x2323=(cj3*py);
IkReal x2324=(sj2*sj3);
IkReal x2325=((0.0144927536231884)*x2317);
IkReal x2326=(px*sj1);
IkReal x2327=((499.999999975)*cj0);
IkReal x2328=((500.0)*cj1*pz);
CheckValue<IkReal> x2330=IKPowWithIntegerCheck(cj2,-1);
if(!x2330.valid){
continue;
}
if( IKabs((x2325*(x2330.value)*(((((75.95)*x2324))+((x2322*x2323))+(((-1.0)*x2319*x2321*x2324))+((x2318*x2320))+((x2322*x2324*x2326))+(((-1.0)*x2323*x2327))+((x2320*x2321))+((x2324*x2328))+(((-1.0)*x2324*x2326*x2327))+(((-1.0)*x2318*x2319*x2324)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2325*(((-75.95)+((x2319*x2321))+(((-1.0)*x2322*x2326))+((x2318*x2319))+((x2326*x2327))+(((-38.205)*cj3))+(((-1.0)*x2328)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2325*(x2330.value)*(((((75.95)*x2324))+((x2322*x2323))+(((-1.0)*x2319*x2321*x2324))+((x2318*x2320))+((x2322*x2324*x2326))+(((-1.0)*x2323*x2327))+((x2320*x2321))+((x2324*x2328))+(((-1.0)*x2324*x2326*x2327))+(((-1.0)*x2318*x2319*x2324))))))+IKsqr((x2325*(((-75.95)+((x2319*x2321))+(((-1.0)*x2322*x2326))+((x2318*x2319))+((x2326*x2327))+(((-38.205)*cj3))+(((-1.0)*x2328))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2325*(x2330.value)*(((((75.95)*x2324))+((x2322*x2323))+(((-1.0)*x2319*x2321*x2324))+((x2318*x2320))+((x2322*x2324*x2326))+(((-1.0)*x2323*x2327))+((x2320*x2321))+((x2324*x2328))+(((-1.0)*x2324*x2326*x2327))+(((-1.0)*x2318*x2319*x2324))))), (x2325*(((-75.95)+((x2319*x2321))+(((-1.0)*x2322*x2326))+((x2318*x2319))+((x2326*x2327))+(((-38.205)*cj3))+(((-1.0)*x2328))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2331=IKcos(j4);
IkReal x2332=IKsin(j4);
IkReal x2333=((0.99999999995)*sj0);
IkReal x2334=(py*sj1);
IkReal x2335=((9.9999999995e-6)*cj0);
IkReal x2336=(cj1*py);
IkReal x2337=((9.9999999995e-6)*sj0);
IkReal x2338=(px*sj1);
IkReal x2339=((0.07641)*sj3);
IkReal x2340=(cj1*px);
IkReal x2341=((0.99999999995)*cj0);
IkReal x2342=((0.138)*x2332);
IkReal x2343=((0.138)*sj3*x2331);
evalcond[0]=(((sj2*x2339))+(((-1.0)*py*x2337))+((cj2*x2342))+((py*x2341))+(((-1.0)*px*x2333))+(((-1.0)*px*x2335))+((sj2*x2343)));
evalcond[1]=((0.1519)+((x2337*x2338))+((cj1*pz))+(((-1.0)*x2333*x2334))+(((0.07641)*cj3))+(((-1.0)*x2334*x2335))+(((0.138)*cj3*x2331))+(((-1.0)*x2338*x2341)));
evalcond[2]=((((-1.0)*x2337*x2340))+((x2340*x2341))+((cj2*x2339))+((x2333*x2336))+((cj2*x2343))+(((-1.0)*sj2*x2342))+((x2335*x2336))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2344=(cj1*sj0);
IkReal x2345=(px*sj2);
IkReal x2346=((499.999999975)*cj2);
IkReal x2347=(cj0*cj1);
IkReal x2348=(pz*sj1);
IkReal x2349=((7.24637681123188)*py);
IkReal x2350=(cj2*px);
IkReal x2351=(py*sj2);
IkReal x2352=(cj2*py);
CheckValue<IkReal> x2353=IKPowWithIntegerCheck(sj3,-1);
if(!x2353.valid){
continue;
}
if( IKabs(((((7.2463768115942)*sj2*x2348))+(((-1.0)*cj0*cj2*x2349))+(((7.24637681123188e-5)*sj0*x2352))+(((7.24637681123188e-5)*cj0*x2350))+((sj2*x2344*x2349))+(((7.24637681123188e-5)*x2347*x2351))+(((7.24637681123188)*sj0*x2350))+(((7.24637681123188)*x2345*x2347))+(((-7.24637681123188e-5)*x2344*x2345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x2353.value)*(((((-0.00499999999975)*x2347*x2352))+(((-1.0)*px*x2346*x2347))+(((-499.999999975)*cj0*x2351))+(((-38.205)*sj3))+(((499.999999975)*sj0*x2345))+(((0.00499999999975)*cj0*x2345))+(((-1.0)*py*x2344*x2346))+(((-500.0)*cj2*x2348))+(((0.00499999999975)*sj0*x2351))+(((0.00499999999975)*x2344*x2350)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*sj2*x2348))+(((-1.0)*cj0*cj2*x2349))+(((7.24637681123188e-5)*sj0*x2352))+(((7.24637681123188e-5)*cj0*x2350))+((sj2*x2344*x2349))+(((7.24637681123188e-5)*x2347*x2351))+(((7.24637681123188)*sj0*x2350))+(((7.24637681123188)*x2345*x2347))+(((-7.24637681123188e-5)*x2344*x2345))))+IKsqr(((0.0144927536231884)*(x2353.value)*(((((-0.00499999999975)*x2347*x2352))+(((-1.0)*px*x2346*x2347))+(((-499.999999975)*cj0*x2351))+(((-38.205)*sj3))+(((499.999999975)*sj0*x2345))+(((0.00499999999975)*cj0*x2345))+(((-1.0)*py*x2344*x2346))+(((-500.0)*cj2*x2348))+(((0.00499999999975)*sj0*x2351))+(((0.00499999999975)*x2344*x2350))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*sj2*x2348))+(((-1.0)*cj0*cj2*x2349))+(((7.24637681123188e-5)*sj0*x2352))+(((7.24637681123188e-5)*cj0*x2350))+((sj2*x2344*x2349))+(((7.24637681123188e-5)*x2347*x2351))+(((7.24637681123188)*sj0*x2350))+(((7.24637681123188)*x2345*x2347))+(((-7.24637681123188e-5)*x2344*x2345))), ((0.0144927536231884)*(x2353.value)*(((((-0.00499999999975)*x2347*x2352))+(((-1.0)*px*x2346*x2347))+(((-499.999999975)*cj0*x2351))+(((-38.205)*sj3))+(((499.999999975)*sj0*x2345))+(((0.00499999999975)*cj0*x2345))+(((-1.0)*py*x2344*x2346))+(((-500.0)*cj2*x2348))+(((0.00499999999975)*sj0*x2351))+(((0.00499999999975)*x2344*x2350))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2354=IKcos(j4);
IkReal x2355=IKsin(j4);
IkReal x2356=((0.99999999995)*sj0);
IkReal x2357=(py*sj1);
IkReal x2358=((9.9999999995e-6)*cj0);
IkReal x2359=(cj1*py);
IkReal x2360=((9.9999999995e-6)*sj0);
IkReal x2361=(px*sj1);
IkReal x2362=((0.07641)*sj3);
IkReal x2363=(cj1*px);
IkReal x2364=((0.99999999995)*cj0);
IkReal x2365=((0.138)*x2355);
IkReal x2366=((0.138)*sj3*x2354);
evalcond[0]=(((py*x2364))+((sj2*x2366))+((sj2*x2362))+(((-1.0)*px*x2356))+(((-1.0)*px*x2358))+((cj2*x2365))+(((-1.0)*py*x2360)));
evalcond[1]=((0.1519)+(((-1.0)*x2356*x2357))+(((-1.0)*x2357*x2358))+(((0.138)*cj3*x2354))+((cj1*pz))+(((0.07641)*cj3))+((x2360*x2361))+(((-1.0)*x2361*x2364)));
evalcond[2]=(((x2356*x2359))+((x2358*x2359))+(((-1.0)*x2360*x2363))+((cj2*x2366))+((cj2*x2362))+((pz*sj1))+((x2363*x2364))+(((-1.0)*sj2*x2365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
static inline bool checkconsistency12(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 11; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-6*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[0]-Breal[1]) < tol && IKabs(Breal[0]*Breal[2]-Breal[3]) < tol && IKabs(Breal[1]*Breal[2]-Breal[4]) < tol && IKabs(Breal[2]*Breal[2]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol && IKabs(Breal[1]*Breal[5]-Breal[7]) < tol && IKabs(Breal[2]*Breal[5]-Breal[8]) < tol && IKabs(Breal[0]*Breal[8]-Breal[9]) < tol && IKabs(Breal[1]*Breal[8]-Breal[10]) < tol;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - up1 (ba5b627cb3267b6b7cde9d417c7f668c)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
