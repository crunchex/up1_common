/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-08-24 16:33:53.656187
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[0]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.866025504730542)*x5);
x11=((0.138)*x1);
x12=((0.138)*x5);
x13=((0.499999825156179)*x5);
x14=((0.138)*x7);
x15=((0.07641)*x1);
x16=((1.0)*x0);
x17=((1.0)*x1);
x18=((0.866025504730542)*x9);
x19=((0.07641)*x0);
x20=((0.499999825156179)*x9);
x21=(x2*x4);
x22=(x2*x6);
x23=(x3*x7);
x24=(x5*x6);
x25=(x0*x3);
x26=(x2*x3);
x27=(x0*x6);
x28=(x1*x6*x7);
x29=(x4*x6*x8);
x30=(x1*x16*x3);
x31=(((x0*x11))+(((-0.138)*x21*x3)));
x32=(((x19*x4))+((x15*x26)));
x33=((((-1.0)*x11*x24))+(((-1.0)*x14*x3)));
x34=(((x17*x26))+((x16*x4)));
x35=((-1.0)*x34);
x36=(x31*x8);
x37=(x33*x9);
x38=(x35*x7);
x39=((((-1.0)*x14*x22))+((x12*x34)));
eetrans[0]=((0.0053)+((x8*(((((-0.138)*x25*x4))+(((-1.0)*x11*x2))))))+(((-1.0)*x19*x6*x7))+((x5*(((((-0.07641)*x21))+((x15*x25))))))+((x9*((((x12*(((((-1.0)*x21))+x30))))+(((-1.0)*x14*x27))))))+(((-2.6e-7)*x25))+(((-0.1519)*x27)));
eetrans[1]=((-0.109039987694492)+(((0.131549274168569)*x22))+(((0.0661730088164608)*x22*x7))+(((-0.0382049866401836)*x1*x24))+(((-1.0)*x18*x39))+((x20*x33))+(((0.0689999758715527)*x29))+(((-0.0759499734412235)*x3))+(((2.25166631229941e-7)*x26))+(((-1.0)*x10*x32))+(((-0.866025504730542)*x36))+(((-0.0382049866401836)*x23))+(((1.29999954540606e-7)*x6)));
eetrans[2]=((0.131350875022936)+(((-1.0)*x18*x33))+(((-2.25166631229941e-7)*x6))+(((0.0661730088164608)*x23))+(((-1.0)*x20*x39))+(((1.29999954540606e-7)*x26))+(((0.0759499734412235)*x22))+(((-0.499999825156179)*x36))+(((0.0382049866401836)*x22*x7))+(((-0.119511519652815)*x29))+(((0.0661730088164608)*x1*x24))+(((-1.0)*x13*x32))+(((0.131549274168569)*x3)));
eerot[0]=((((-1.0)*x16*x24))+((x7*(((((-1.0)*x30))+x21)))));
eerot[1]=((((0.499999825156179)*x28))+(((-0.866025504730542)*x38))+((x10*x22))+(((-1.0)*x13*x3)));
eerot[2]=((((-0.499999825156179)*x38))+((x10*x3))+((x13*x22))+(((-0.866025504730542)*x28)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((-0.0053)+px);
new_r01=((((-0.866025504730542)*r01))+(((-0.499999825156179)*r02)));
new_py=((-0.0287559958333556)+(((-0.866025504730542)*py))+(((-0.499999825156179)*pz)));
new_r02=((((-0.866025504730542)*r02))+(((0.499999825156179)*r01)));
new_pz=((0.168273182620814)+(((-0.866025504730542)*pz))+(((0.499999825156179)*py)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[162], zeror[48];
int numroots;;
IkReal x40=py*py;
IkReal x41=px*px;
IkReal x42=pz*pz;
IkReal x43=((0.00136179753779067)*r00);
IkReal x44=((0.02108916)*pz);
IkReal x45=((1.0900344e-8)*r02);
IkReal x46=((0.00136179753780933)*r01);
IkReal x47=((0.04217832)*px);
IkReal x48=((0.00272359507558134)*r02);
IkReal x49=((2.1800688e-8)*r00);
IkReal x50=(px*r00);
IkReal x51=(pz*r02);
IkReal x52=(py*r01);
IkReal x53=((2.6e-7)*r00);
IkReal x54=((0.1519)*r02);
IkReal x55=((5.4831816e-9)*r02);
IkReal x56=((0.003203443404)*r00);
IkReal x57=((0.0419244)*pz);
IkReal x58=((7.176e-8)*px);
IkReal x59=((1.09663632e-8)*r00);
IkReal x60=((1.4352e-7)*pz);
IkReal x61=((0.006406886808)*r02);
IkReal x62=((0.0838488)*px);
IkReal x63=((0.006406886808)*r01);
IkReal x64=((0.0018088780999324)*r01);
IkReal x65=((1.57976e-7)*r02);
IkReal x66=((0.0036177562001352)*r00);
IkReal x67=((2.0)*r00);
IkReal x68=((0.00272359507558134)*r01);
IkReal x69=((0.00272359507561866)*r00);
IkReal x70=((0.08435664)*py);
IkReal x71=((4.3601376e-8)*r01);
IkReal x72=((1.4352e-7)*py);
IkReal x73=((2.19327264e-8)*r01);
IkReal x74=((0.1676976)*py);
IkReal x75=((0.012813773616)*r00);
IkReal x76=((0.0036177561998648)*r00);
IkReal x77=((0.0072355124002704)*r01);
IkReal x78=((4.0)*r02);
IkReal x79=((0.3038)*r00);
IkReal x80=((5.2e-7)*r02);
IkReal x81=((0.0072355124002704)*r02);
IkReal x82=((3.15952e-7)*r00);
IkReal x83=((4.0)*r01);
IkReal x84=((0.552)*px);
IkReal x85=(py*r00);
IkReal x86=(pz*r01);
IkReal x87=(px*py);
IkReal x88=(py*r02);
IkReal x89=((1.0)*r01);
IkReal x90=((8.0)*py);
IkReal x91=((0.276)*r02);
IkReal x92=(px*r02);
IkReal x93=((8.0)*px);
IkReal x94=((0.276)*r01);
IkReal x95=(pz*r00);
IkReal x96=((0.276)*px);
IkReal x97=((0.552)*py);
IkReal x98=((5.2e-7)*r01);
IkReal x99=((0.6076)*r01);
IkReal x100=((0.276)*r00);
IkReal x101=((-1.0)*r01);
IkReal x102=((0.0419244)*x92);
IkReal x103=((7.176e-8)*x52);
IkReal x104=((7.176e-8)*x51);
IkReal x105=((7.176e-8)*x50);
IkReal x106=(r00*x57);
IkReal x107=(r01*x58);
IkReal x108=(r01*x57);
IkReal x109=((7.176e-8)*x85);
IkReal x110=((0.0419244)*x88);
IkReal x111=((0.02108916)*x92);
IkReal x112=(r00*x44);
IkReal x113=((0.138)*x41);
IkReal x114=((0.138)*x42);
IkReal x115=((0.138)*x40);
IkReal x116=((0.04217832)*x88);
IkReal x117=((0.04217832)*x86);
IkReal x118=((0.3038)*x88);
IkReal x119=((5.2e-7)*x85);
IkReal x120=(px*x98);
IkReal x121=((0.3038)*x86);
IkReal x122=(r01*x41);
IkReal x123=(r01*x42);
IkReal x124=((1.04e-6)*x50);
IkReal x125=((1.04e-6)*x52);
IkReal x126=((1.04e-6)*x51);
IkReal x127=((0.6076)*x92);
IkReal x128=((0.6076)*x95);
IkReal x129=(r01*x40);
IkReal x130=((-2.0)*r00);
IkReal x131=((0.0838488)*x88);
IkReal x132=((0.0838488)*x86);
IkReal x133=(r02*x62);
IkReal x134=((0.0838488)*x95);
IkReal x135=((0.08435664)*x95);
IkReal x136=((0.08435664)*x92);
IkReal x137=((2.08e-6)*x92);
IkReal x138=((2.08e-6)*x95);
IkReal x139=((1.2152)*x88);
IkReal x140=((1.2152)*x86);
IkReal x141=((0.0838488)*x85);
IkReal x142=(r02*x72);
IkReal x143=(r01*x62);
IkReal x144=(r01*x60);
IkReal x145=((1.04e-6)*x86);
IkReal x146=(px*x99);
IkReal x147=((0.6076)*x85);
IkReal x148=((1.04e-6)*x88);
IkReal x149=(r00*x40);
IkReal x150=(r00*x115);
IkReal x151=(r00*x114);
IkReal x152=(x52*x96);
IkReal x153=(x51*x96);
IkReal x154=(r00*x113);
IkReal x155=((0.276)*py*x50);
IkReal x156=((0.276)*py*x51);
IkReal x157=(r01*x115);
IkReal x158=(r01*x113);
IkReal x159=(r01*x114);
IkReal x160=((0.552)*pz*x52);
IkReal x161=((0.552)*pz*x50);
IkReal x162=(x42*x91);
IkReal x163=(x40*x91);
IkReal x164=(x41*x91);
IkReal x165=((2.0)*py*x50);
IkReal x166=((2.0)*py*x51);
IkReal x167=(x40*x89);
IkReal x168=(x42*x67);
IkReal x169=(x40*x67);
IkReal x170=(x41*x67);
IkReal x171=((4.0)*px*x51);
IkReal x172=((4.0)*px*x52);
IkReal x173=(x42*x89);
IkReal x174=(x41*x89);
IkReal x175=(x42*x94);
IkReal x176=(x41*x94);
IkReal x177=(x51*x97);
IkReal x178=(x50*x97);
IkReal x179=(x40*x94);
IkReal x180=(x100*x40);
IkReal x181=(x100*x42);
IkReal x182=(x100*x41);
IkReal x183=(x51*x84);
IkReal x184=(x52*x84);
IkReal x185=(x42*x83);
IkReal x186=(x41*x83);
IkReal x187=(x51*x90);
IkReal x188=(x50*x90);
IkReal x189=(x40*x83);
IkReal x190=(x41*x78);
IkReal x191=(x40*x78);
IkReal x192=((8.0)*pz*x50);
IkReal x193=((8.0)*pz*x52);
IkReal x194=(x42*x78);
IkReal x195=(x58+x55);
IkReal x196=(x54+x53);
IkReal x197=((-0.00136179753780933)+x111);
IkReal x198=((0.003203443404)+x106);
IkReal x199=(x57+x56);
IkReal x200=(x60+x61);
IkReal x201=((0.003203443404)+x102);
IkReal x202=(x65+x66);
IkReal x203=(x59+x62);
IkReal x204=(x44+x45);
IkReal x205=((((-2.8704e-7)*x95))+(((2.8704e-7)*x92)));
IkReal x206=(x117+x63);
IkReal x207=(x116+x63);
IkReal x208=((((0.08435664)*px*r01))+(((-1.0)*r00*x70)));
IkReal x209=(x106+x44);
IkReal x210=(x116+x72);
IkReal x211=(x145+x147);
IkReal x212=(x146+x148);
IkReal x213=(x147+x148);
IkReal x214=(x145+x146);
IkReal x215=((-0.00136179753780933)+x112+x56);
IkReal x216=(x129+x118);
IkReal x217=(x120+x121);
IkReal x218=(x122+x123);
IkReal x219=(x120+x118);
IkReal x220=(x51+x50+x52);
IkReal x221=((-0.00136179753780933)+x112+x57);
IkReal x222=(x121+x129);
IkReal x223=(x167+x121);
IkReal x224=(x167+x118);
IkReal x225=(x185+x186);
IkReal x226=(x191+x190);
IkReal x227=(x173+x174);
IkReal x228=(x168+x169);
IkReal x229=(x104+x105+x103);
IkReal x230=(x151+x150+x43);
IkReal x231=(x175+x176+x68);
IkReal x232=(x163+x164+x48);
IkReal x233=(x180+x181+x69);
IkReal x234=((((-1.0)*x143))+(((-1.0)*x142))+x141+x144);
IkReal x235=(x128+x228);
IkReal x236=(x127+x228);
IkReal x237=((((-1.0)*x144))+(((-1.0)*x143))+x141+x142);
IkReal x238=(x119+x227);
IkReal x239=(x154+x153+x152);
IkReal x240=(x184+x182+x183);
IkReal x241=(x126+x124+x125+x128);
IkReal x242=(x113+x112+x115+x114);
IkReal x243=(x232+x47);
IkReal x244=(x171+x170+x172);
IkReal x245=(x162+x160+x161);
IkReal x246=(x113+x111+x115+x114);
IkReal x247=(x126+x127+x124+x125);
IkReal x248=(x179+x178+x177);
IkReal x249=(x132+x231);
IkReal x250=(x131+x231);
IkReal x251=(x159+x158+x109+x46);
IkReal x252=(x166+x165+x120+x64);
IkReal x253=(x159+x158+x107+x46);
IkReal x254=(x166+x165+x119+x64);
IkReal x255=(x193+x192+x194+x81);
IkReal x256=(x187+x188+x189+x77);
IkReal x257=(x131+x248);
IkReal x258=(x132+x248);
IkReal x259=(x157+x156+x155+x109);
IkReal x260=(x157+x156+x155+x107);
IkReal x261=(x127+x244+x76);
IkReal x262=(x128+x244+x76);
IkReal x263=(x134+(((-1.0)*x133))+x233+(((-1.0)*x240)));
IkReal x264=(x133+(((-1.0)*x134))+x233+(((-1.0)*x240)));
IkReal x265=((((-1.0)*x108))+x110+x259+(((-1.0)*x253)));
IkReal x266=((((-1.0)*x110))+x108+x260+(((-1.0)*x251)));
IkReal x267=((((-1.0)*x110))+x108+x251+(((-1.0)*x260)));
IkReal x268=((((-1.0)*x108))+x110+x253+(((-1.0)*x259)));
op[0]=r01;
op[1]=x130;
op[2]=x101;
op[3]=0;
op[4]=x78;
op[5]=0;
op[6]=r01;
op[7]=x67;
op[8]=x101;
op[9]=((((-1.0)*x106))+(((-1.0)*x230))+x229+x239+x204+x201);
op[10]=x265;
op[11]=0;
op[12]=(x243+x49+(((-1.0)*x245)));
op[13]=x234;
op[14]=0;
op[15]=((((-1.0)*x106))+(((-1.0)*x204))+(((-1.0)*x239))+x229+x230+x201);
op[16]=x266;
op[17]=0;
op[18]=x265;
op[19]=((((-1.0)*x45))+(((-1.0)*x102))+x198+(((-1.0)*x239))+x230+x44+(((-1.0)*x229)));
op[20]=0;
op[21]=x234;
op[22]=((((-1.0)*x49))+(((-1.0)*x232))+x245+x47);
op[23]=0;
op[24]=x266;
op[25]=((((-1.0)*x44))+(((-1.0)*x102))+x198+(((-1.0)*x230))+x239+x45+(((-1.0)*x229)));
op[26]=0;
op[27]=(x196+x220);
op[28]=0;
op[29]=0;
op[30]=(x79+(((-1.0)*x80)));
op[31]=0;
op[32]=0;
op[33]=((((-1.0)*x196))+x220);
op[34]=0;
op[35]=0;
op[36]=((((-1.0)*x195))+x215+(((-1.0)*x246))+(((-1.0)*x57)));
op[37]=((((-1.0)*x116))+x206);
op[38]=((((-1.0)*x199))+x197+x55+(((-1.0)*x242))+(((-1.0)*x58)));
op[39]=((((-1.0)*x203))+x60+(((-1.0)*x61)));
op[40]=x208;
op[41]=(x200+x59+(((-1.0)*x62)));
op[42]=(x195+x221+(((-1.0)*x246))+(((-1.0)*x56)));
op[43]=((((-1.0)*x117))+x207);
op[44]=(x199+x197+x58+(((-1.0)*x242))+(((-1.0)*x55)));
op[45]=(x217+x218+(((-1.0)*x224))+(((-1.0)*x254)));
op[46]=((((-1.0)*x235))+x202+x247+x244);
op[47]=(x216+x254+(((-1.0)*x217))+(((-1.0)*x227)));
op[48]=(x212+(((-1.0)*x211)));
op[49]=(x226+x82+(((-1.0)*x255)));
op[50]=(x211+(((-1.0)*x212)));
op[51]=((((-1.0)*x165))+(((-1.0)*x167))+(((-1.0)*x166))+x119+x118+x218+(((-1.0)*x64))+(((-1.0)*x217)));
op[52]=((((-1.0)*x128))+x126+x124+x125+(((-1.0)*x202))+x236+(((-1.0)*x244)));
op[53]=((((-1.0)*x118))+x166+x165+x129+(((-1.0)*x238))+x217+x64);
op[54]=x130;
op[55]=((-4.0)*r01);
op[56]=x67;
op[57]=0;
op[58]=0;
op[59]=0;
op[60]=x130;
op[61]=x83;
op[62]=x67;
op[63]=(x257+(((-1.0)*x249)));
op[64]=x263;
op[65]=0;
op[66]=(x71+x70);
op[67]=x205;
op[68]=0;
op[69]=(x250+(((-1.0)*x258)));
op[70]=x264;
op[71]=0;
op[72]=x263;
op[73]=(x249+(((-1.0)*x257)));
op[74]=0;
op[75]=x205;
op[76]=((((-1.0)*x71))+x70);
op[77]=0;
op[78]=x264;
op[79]=(x258+(((-1.0)*x250)));
op[80]=0;
op[81]=x98;
op[82]=0;
op[83]=0;
op[84]=x99;
op[85]=0;
op[86]=0;
op[87]=((-5.2e-7)*r01);
op[88]=0;
op[89]=0;
op[90]=(x206+(((-1.0)*x210)));
op[91]=((((-1.0)*x75))+x136+(((-1.0)*x135)));
op[92]=((((-1.0)*x72))+x116+(((-1.0)*x206)));
op[93]=((((-1.0)*x73))+(((-1.0)*x74)));
op[94]=0;
op[95]=((((-1.0)*x74))+x73);
op[96]=(x117+(((-1.0)*x207))+x72);
op[97]=((((-1.0)*x75))+x135+(((-1.0)*x136)));
op[98]=((((-1.0)*x117))+x207+x72);
op[99]=((((-1.0)*x235))+x261);
op[100]=((((-1.0)*x140))+x139+x256+(((-1.0)*x225)));
op[101]=(x235+(((-1.0)*x261)));
op[102]=(x138+(((-1.0)*x137)));
op[103]=((6.31904e-7)*r01);
op[104]=(x137+(((-1.0)*x138)));
op[105]=((((-1.0)*x236))+x262);
op[106]=((((-1.0)*x140))+x139+x225+(((-1.0)*x256)));
op[107]=(x236+(((-1.0)*x262)));
op[108]=x101;
op[109]=x67;
op[110]=r01;
op[111]=0;
op[112]=x78;
op[113]=0;
op[114]=x101;
op[115]=x130;
op[116]=r01;
op[117]=((((-1.0)*x102))+x198+(((-1.0)*x239))+x229+x230+x204);
op[118]=x267;
op[119]=0;
op[120]=((((-1.0)*x47))+(((-1.0)*x49))+x232+(((-1.0)*x245)));
op[121]=x237;
op[122]=0;
op[123]=((((-1.0)*x102))+x198+(((-1.0)*x204))+(((-1.0)*x230))+x229+x239);
op[124]=x268;
op[125]=0;
op[126]=x267;
op[127]=((((-1.0)*x45))+(((-1.0)*x106))+(((-1.0)*x230))+x239+x201+x44+(((-1.0)*x229)));
op[128]=0;
op[129]=x237;
op[130]=(x245+x49+(((-1.0)*x243)));
op[131]=0;
op[132]=x268;
op[133]=((((-1.0)*x209))+(((-1.0)*x239))+x230+x201+x45+(((-1.0)*x229)));
op[134]=0;
op[135]=(x220+x54+(((-1.0)*x53)));
op[136]=0;
op[137]=0;
op[138]=((((-1.0)*x79))+(((-1.0)*x80)));
op[139]=0;
op[140]=0;
op[141]=(x220+x53+(((-1.0)*x54)));
op[142]=0;
op[143]=0;
op[144]=((((-1.0)*x199))+x197+x58+(((-1.0)*x242))+(((-1.0)*x55)));
op[145]=(x116+(((-1.0)*x206)));
op[146]=(x195+x215+(((-1.0)*x246))+(((-1.0)*x57)));
op[147]=(x203+x60+(((-1.0)*x61)));
op[148]=x208;
op[149]=(x200+x62+(((-1.0)*x59)));
op[150]=(x199+x197+x55+(((-1.0)*x242))+(((-1.0)*x58)));
op[151]=(x117+(((-1.0)*x207)));
op[152]=((((-1.0)*x195))+x221+(((-1.0)*x246))+(((-1.0)*x56)));
op[153]=((((-1.0)*x121))+(((-1.0)*x238))+x216+x252);
op[154]=((((-1.0)*x127))+x126+x124+x125+x235+x65+(((-1.0)*x244))+(((-1.0)*x66)));
op[155]=((((-1.0)*x165))+(((-1.0)*x167))+(((-1.0)*x166))+x121+x119+x218+(((-1.0)*x64))+(((-1.0)*x219)));
op[156]=(x214+(((-1.0)*x213)));
op[157]=(x226+(((-1.0)*x82))+(((-1.0)*x255)));
op[158]=(x213+(((-1.0)*x214)));
op[159]=(x254+x222+(((-1.0)*x219))+(((-1.0)*x227)));
op[160]=((((-1.0)*x236))+x241+x244+x66+(((-1.0)*x65)));
op[161]=(x218+x219+(((-1.0)*x223))+(((-1.0)*x254)));
solvedialyticpoly12qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj1 = zeror[ij0+1], htj2 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj1)||isnan(htj2)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x269=htj0*htj0;
CheckValue<IkReal> x270=IKPowWithIntegerCheck(((1.0)+x269),-1);
if(!x270.valid){
continue;
}
cj0array[numsolutions]=((x270.value)*(((1.0)+(((-1.0)*x269)))));
CheckValue<IkReal> x271=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x271.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x271.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x272=htj1*htj1;
CheckValue<IkReal> x273=IKPowWithIntegerCheck(((1.0)+x272),-1);
if(!x273.valid){
continue;
}
cj1array[numsolutions]=((x273.value)*(((1.0)+(((-1.0)*x272)))));
CheckValue<IkReal> x274=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x274.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x274.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x275=htj2*htj2;
CheckValue<IkReal> x276=IKPowWithIntegerCheck(((1.0)+x275),-1);
if(!x276.valid){
continue;
}
cj2array[numsolutions]=((x276.value)*(((1.0)+(((-1.0)*x275)))));
CheckValue<IkReal> x277=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x277.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x277.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj1 = 1;
_nj2 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij0]-cj2array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij0]-sj2array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij1[1] = 0; _ij2[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

    j2 = j2array[ij0]; cj2 = cj2array[ij0]; sj2 = sj2array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly12qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[24*24]) = {0};
    IkReal IKFAST_ALIGNED16(A[12*12]);
    IkReal IKFAST_ALIGNED16(work[24*24*23]);
    int ipiv[12];
    int info, coeffindex;
    const int worksize=24*24*23;
    const int matrixdim = 12;
    const int matrixdim2 = 24;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 3; ++k) {
            A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 6; ++j) {
            for(int k = 0; k < 9; ++k) {
                IkReal a = matcoeffs[coeffindex+108], b = matcoeffs[coeffindex+54], c = matcoeffs[coeffindex];
                A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 3; ++k) {
                A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[24]);
    IkReal IKFAST_ALIGNED16(wi[24]);
    IkReal IKFAST_ALIGNED16(vr[24*24]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency12(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[3]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[5]/ev[2];
                    rawroots[numroots++] = ev[2]/ev[1];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[9]/ev[6];
                    rawroots[numroots++] = ev[10]/ev[9];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[11]/ev[8];
                    rawroots[numroots++] = ev[11]/ev[10];
                }
            }
        }
    }
}inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x278=((1.0)*sj1);
if( IKabs(((((-1.0)*cj0*r00*x278))+(((-1.0)*r01*sj0*x278))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*x278))+(((-1.0)*r01*sj0*x278))+(((-1.0)*cj1*r02))))+IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r00*x278))+(((-1.0)*r01*sj0*x278))+(((-1.0)*cj1*r02))), (((r00*sj0))+(((-1.0)*cj0*r01))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*r00*sj0))+(IKcos(j3))+((cj0*r01)));
evalcond[1]=(((cj1*r02))+(IKsin(j3))+((cj0*r00*sj1))+((r01*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x279=(sj0*sj1);
IkReal x280=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r00*x280))+((cj1*r02))+((r01*x279)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x279))+((px*x280)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x281=((7.2463768115942)*py);
IkReal x282=((7.2463768115942)*px);
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x282))+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((cj0*x281))+(((-1.0)*sj0*x282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x282))+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x281))))+IKsqr(((-0.553695652173913)+((cj0*x281))+(((-1.0)*sj0*x282))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x282))+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x281))), ((-0.553695652173913)+((cj0*x281))+(((-1.0)*sj0*x282))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x283=(sj0*sj1);
IkReal x284=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r01*x283))+((r00*x284))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x283))+((px*x284)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x285=((7.2463768115942)*py);
IkReal x286=((7.2463768115942)*px);
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x286))+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*cj0*x285))+((sj0*x286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x286))+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x285))))+IKsqr(((-0.553695652173913)+(((-1.0)*cj0*x285))+((sj0*x286))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x286))+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x285))), ((-0.553695652173913)+(((-1.0)*cj0*x285))+((sj0*x286))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x287=(r01*sj0);
IkReal x288=(cj0*r00);
IkReal x289=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x289))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x287))+((sj1*x288)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x288))+((cj1*x287)));
evalcond[4]=((((-1.0)*px*x289))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x290=((7.2463768115942)*cj1);
IkReal x291=(py*sj0);
IkReal x292=((7.2463768115942)*sj1);
IkReal x293=(cj0*px);
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*x290*x293))+(((-1.0)*x290*x291))+((pz*x292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x291*x292))+(((-1.0)*pz*x290))+(((-1.0)*x292*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*x290*x293))+(((-1.0)*x290*x291))+((pz*x292))))+IKsqr(((-1.65442028985507)+(((-1.0)*x291*x292))+(((-1.0)*pz*x290))+(((-1.0)*x292*x293))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*x290*x293))+(((-1.0)*x290*x291))+((pz*x292))), ((-1.65442028985507)+(((-1.0)*x291*x292))+(((-1.0)*pz*x290))+(((-1.0)*x292*x293))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x294=(cj0*px);
IkReal x295=(py*sj0);
evalcond[0]=((0.22831)+(((0.138)*(IKcos(j4))))+((sj1*x295))+((sj1*x294))+((cj1*pz)));
evalcond[1]=((2.6e-7)+((cj1*x294))+((cj1*x295))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x296=(r01*sj0);
IkReal x297=(cj0*r00);
IkReal x298=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x298))+((cj0*r01)));
evalcond[2]=(((sj1*x297))+((sj1*x296))+((cj1*r02)));
evalcond[3]=(((cj1*x296))+((cj1*x297))+(((-1.0)*r02*sj1)));
evalcond[4]=(((cj0*py))+(((-1.0)*px*x298)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x299=((7.2463768115942)*cj1);
IkReal x300=(py*sj0);
IkReal x301=((7.2463768115942)*sj1);
IkReal x302=(cj0*px);
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*x299*x302))+(((-1.0)*x299*x300))+((pz*x301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((x301*x302))+((pz*x299))+((x300*x301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*x299*x302))+(((-1.0)*x299*x300))+((pz*x301))))+IKsqr(((0.547028985507246)+((x301*x302))+((pz*x299))+((x300*x301))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*x299*x302))+(((-1.0)*x299*x300))+((pz*x301))), ((0.547028985507246)+((x301*x302))+((pz*x299))+((x300*x301))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x303=(cj0*px);
IkReal x304=(py*sj0);
evalcond[0]=((0.07549)+((cj1*pz))+(((-0.138)*(IKcos(j4))))+((sj1*x303))+((sj1*x304)));
evalcond[1]=((2.6e-7)+((cj1*x304))+((cj1*x303))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x305=((7.2463768115942)*cj1);
IkReal x306=(py*sj0);
IkReal x307=(cj0*px);
IkReal x308=((500.0)*sj1);
CheckValue<IkReal> x309=IKPowWithIntegerCheck(cj3,-1);
if(!x309.valid){
continue;
}
if( IKabs(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*x305*x306))+(((-1.0)*x305*x307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x309.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x306*x308))+(((-1.0)*x307*x308))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*x305*x306))+(((-1.0)*x305*x307))))+IKsqr(((0.0144927536231884)*(x309.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x306*x308))+(((-1.0)*x307*x308))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*x305*x306))+(((-1.0)*x305*x307))), ((0.0144927536231884)*(x309.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x306*x308))+(((-1.0)*x307*x308))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x310=IKcos(j4);
IkReal x311=(cj0*px);
IkReal x312=(py*sj0);
IkReal x313=((0.138)*x310);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x313))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x312))+((cj1*x311))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((sj1*x312))+((sj1*x311))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x314=((7.2463768115942)*cj1);
CheckValue<IkReal> x315=IKPowWithIntegerCheck(sj3,-1);
if(!x315.valid){
continue;
}
if( IKabs(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x314))+(((-1.0)*cj0*px*x314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x315.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-38.205)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x314))+(((-1.0)*cj0*px*x314))))+IKsqr(((0.0144927536231884)*(x315.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-38.205)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x314))+(((-1.0)*cj0*px*x314))), ((0.0144927536231884)*(x315.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-38.205)*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x316=IKcos(j4);
IkReal x317=(cj0*px);
IkReal x318=(py*sj0);
IkReal x319=((0.138)*x316);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x319))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x318))+((cj1*x317))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((sj1*x317))+((sj1*x318))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x320=((1.0)*sj1);
if( IKabs(((((-1.0)*cj0*r00*x320))+(((-1.0)*r01*sj0*x320))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*x320))+(((-1.0)*r01*sj0*x320))+(((-1.0)*cj1*r02))))+IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r00*x320))+(((-1.0)*r01*sj0*x320))+(((-1.0)*cj1*r02))), ((((-1.0)*r00*sj0))+((cj0*r01))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*r00*sj0))+(((-1.0)*(IKcos(j3))))+((cj0*r01)));
evalcond[1]=(((cj1*r02))+(IKsin(j3))+((cj0*r00*sj1))+((r01*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x321=(sj0*sj1);
IkReal x322=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r00*x322))+((cj1*r02))+((r01*x321)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x321))+((px*x322)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x323=((7.2463768115942)*py);
IkReal x324=((7.2463768115942)*px);
if( IKabs(((1.88405797101449e-6)+((cj1*sj0*x323))+((cj0*cj1*x324))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((sj0*x324))+(((-1.0)*cj0*x323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((cj1*sj0*x323))+((cj0*cj1*x324))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+((sj0*x324))+(((-1.0)*cj0*x323))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((cj1*sj0*x323))+((cj0*cj1*x324))+(((-7.2463768115942)*pz*sj1))), ((-0.553695652173913)+((sj0*x324))+(((-1.0)*cj0*x323))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x325=(sj0*sj1);
IkReal x326=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r00*x326))+((cj1*r02))+((r01*x325)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x325))+((px*x326)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x327=((7.2463768115942)*py);
IkReal x328=((7.2463768115942)*px);
if( IKabs(((1.88405797101449e-6)+((cj1*sj0*x327))+((cj0*cj1*x328))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*sj0*x328))+((cj0*x327)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((cj1*sj0*x327))+((cj0*cj1*x328))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+(((-1.0)*sj0*x328))+((cj0*x327))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((cj1*sj0*x327))+((cj0*cj1*x328))+(((-7.2463768115942)*pz*sj1))), ((-0.553695652173913)+(((-1.0)*sj0*x328))+((cj0*x327))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x329=(r01*sj0);
IkReal x330=(cj0*r00);
IkReal x331=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x331))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x329))+((sj1*x330)));
evalcond[3]=(((cj1*x329))+((cj1*x330))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x331))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x332=((7.2463768115942)*cj1);
IkReal x333=(py*sj0);
IkReal x334=((7.2463768115942)*sj1);
IkReal x335=(cj0*px);
if( IKabs(((1.88405797101449e-6)+((x332*x333))+((x332*x335))+(((-1.0)*pz*x334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x333*x334))+(((-1.0)*pz*x332))+(((-1.0)*x334*x335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((x332*x333))+((x332*x335))+(((-1.0)*pz*x334))))+IKsqr(((-1.65442028985507)+(((-1.0)*x333*x334))+(((-1.0)*pz*x332))+(((-1.0)*x334*x335))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((x332*x333))+((x332*x335))+(((-1.0)*pz*x334))), ((-1.65442028985507)+(((-1.0)*x333*x334))+(((-1.0)*pz*x332))+(((-1.0)*x334*x335))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x336=(cj0*px);
IkReal x337=(py*sj0);
evalcond[0]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((sj1*x336))+((sj1*x337)));
evalcond[1]=((2.6e-7)+((cj1*x337))+((cj1*x336))+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x338=(r01*sj0);
IkReal x339=(cj0*r00);
IkReal x340=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x340))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x338))+((sj1*x339)));
evalcond[3]=(((cj1*x339))+((cj1*x338))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x340))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x341=((7.2463768115942)*cj1);
IkReal x342=(py*sj0);
IkReal x343=((7.2463768115942)*sj1);
IkReal x344=(cj0*px);
if( IKabs(((1.88405797101449e-6)+((x341*x344))+((x341*x342))+(((-1.0)*pz*x343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((pz*x341))+((x343*x344))+((x342*x343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((x341*x344))+((x341*x342))+(((-1.0)*pz*x343))))+IKsqr(((0.547028985507246)+((pz*x341))+((x343*x344))+((x342*x343))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((x341*x344))+((x341*x342))+(((-1.0)*pz*x343))), ((0.547028985507246)+((pz*x341))+((x343*x344))+((x342*x343))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x345=(cj0*px);
IkReal x346=(py*sj0);
evalcond[0]=((0.07549)+((cj1*pz))+((sj1*x345))+((sj1*x346))+(((-0.138)*(IKcos(j4)))));
evalcond[1]=((2.6e-7)+((cj1*x345))+((cj1*x346))+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x347=((7.2463768115942)*cj1);
IkReal x348=(py*sj0);
IkReal x349=(cj0*px);
IkReal x350=((500.0)*sj1);
CheckValue<IkReal> x351=IKPowWithIntegerCheck(cj3,-1);
if(!x351.valid){
continue;
}
if( IKabs(((1.88405797101449e-6)+((x347*x349))+((x347*x348))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x351.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x348*x350))+(((-1.0)*x349*x350))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((x347*x349))+((x347*x348))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x351.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x348*x350))+(((-1.0)*x349*x350))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((x347*x349))+((x347*x348))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x351.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x348*x350))+(((-1.0)*x349*x350))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x352=IKcos(j4);
IkReal x353=(cj0*px);
IkReal x354=(py*sj0);
IkReal x355=((0.138)*x352);
evalcond[0]=(((sj3*x355))+(((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x353))+((cj1*x354))+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj3*x355))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x354))+((sj1*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x356=((7.2463768115942)*cj1);
CheckValue<IkReal> x357=IKPowWithIntegerCheck(sj3,-1);
if(!x357.valid){
continue;
}
if( IKabs(((1.88405797101449e-6)+((cj0*px*x356))+((py*sj0*x356))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x357.value)*(((((-500.0)*cj0*py))+(((-38.205)*sj3))+(((500.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((cj0*px*x356))+((py*sj0*x356))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x357.value)*(((((-500.0)*cj0*py))+(((-38.205)*sj3))+(((500.0)*px*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((cj0*px*x356))+((py*sj0*x356))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x357.value)*(((((-500.0)*cj0*py))+(((-38.205)*sj3))+(((500.0)*px*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x358=IKcos(j4);
IkReal x359=(cj0*px);
IkReal x360=(py*sj0);
IkReal x361=((0.138)*x358);
evalcond[0]=(((sj3*x361))+(((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x359))+((cj1*x360))+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((sj1*x360))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x359))+((cj3*x361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x362=((1.0)*cj1);
IkReal x363=(r01*sj0);
IkReal x364=((1.0)*sj1);
IkReal x365=(cj0*r00);
if( IKabs(((((-1.0)*x363*x364))+(((-1.0)*r02*x362))+(((-1.0)*x364*x365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x362*x363))+(((-1.0)*x362*x365))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x363*x364))+(((-1.0)*r02*x362))+(((-1.0)*x364*x365))))+IKsqr(((((-1.0)*x362*x363))+(((-1.0)*x362*x365))+((r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x363*x364))+(((-1.0)*r02*x362))+(((-1.0)*x364*x365))), ((((-1.0)*x362*x363))+(((-1.0)*x362*x365))+((r02*sj1))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x366=(r01*sj0);
IkReal x367=(cj0*r00);
evalcond[0]=(((sj1*x367))+((sj1*x366))+((cj1*r02))+(IKsin(j3)));
evalcond[1]=((((-1.0)*r02*sj1))+(IKcos(j3))+((cj1*x366))+((cj1*x367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x368=(r01*sj0);
IkReal x369=((1.0)*sj1);
IkReal x370=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x368))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+(((-1.0)*r02*x369))+((r00*x370))+((cj1*x368)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x370))+(((-1.0)*pz*x369)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x371=((7.2463768115942)*sj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*py*sj0*x371))+(((-1.0)*cj0*px*x371))+(((-7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((-1.65442028985507)+(((-1.0)*py*sj0*x371))+(((-1.0)*cj0*px*x371))+(((-7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((-1.65442028985507)+(((-1.0)*py*sj0*x371))+(((-1.0)*cj0*px*x371))+(((-7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x372=(r01*sj0);
IkReal x373=((1.0)*sj1);
IkReal x374=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x372))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((-1.0)+((r00*x374))+(((-1.0)*r02*x373))+((cj1*x372)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x374))+(((-1.0)*pz*x373)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x375=((7.2463768115942)*sj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((cj0*px*x375))+(((7.2463768115942)*cj1*pz))+((py*sj0*x375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((0.547028985507246)+((cj0*px*x375))+(((7.2463768115942)*cj1*pz))+((py*sj0*x375))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((0.547028985507246)+((cj0*px*x375))+(((7.2463768115942)*cj1*pz))+((py*sj0*x375))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.138)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x376=(sj0*sj1);
IkReal x377=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r00*x377))+((r01*x376))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x377))+((py*x376)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x378=((7.2463768115942)*cj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553693768115942)+((cj0*px*x378))+((py*sj0*x378))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((-0.553693768115942)+((cj0*px*x378))+((py*sj0*x378))+(((-7.2463768115942)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((-0.553693768115942)+((cj0*px*x378))+((py*sj0*x378))+(((-7.2463768115942)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x379=(sj0*sj1);
IkReal x380=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r01*x379))+((cj1*r02))+((r00*x380)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x380))+((cj1*pz))+((py*x379)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x381=((7.2463768115942)*cj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x381))+(((-1.0)*cj0*px*x381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x381))+(((-1.0)*cj0*px*x381))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x381))+(((-1.0)*cj0*px*x381))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07641026)+(((0.138)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x382=((500.0)*cj1);
CheckValue<IkReal> x383=IKPowWithIntegerCheck(sj3,-1);
if(!x383.valid){
continue;
}
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x383.value)*(((0.00013)+(((-38.205)*sj3))+((cj0*px*x382))+((py*sj0*x382))+(((-500.0)*pz*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x383.value)*(((0.00013)+(((-38.205)*sj3))+((cj0*px*x382))+((py*sj0*x382))+(((-500.0)*pz*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x383.value)*(((0.00013)+(((-38.205)*sj3))+((cj0*px*x382))+((py*sj0*x382))+(((-500.0)*pz*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x384=IKcos(j4);
IkReal x385=(cj0*px);
IkReal x386=(py*sj0);
IkReal x387=((0.138)*x384);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.1519)+((cj3*x387))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x385))+((sj1*x386)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+((cj1*x385))+((cj1*x386))+(((-1.0)*pz*sj1))+(((-1.0)*sj3*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x388=((500.0)*sj1);
CheckValue<IkReal> x389=IKPowWithIntegerCheck(cj3,-1);
if(!x389.valid){
continue;
}
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x389.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x388))+(((-38.205)*cj3))+(((-1.0)*cj0*px*x388)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x389.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x388))+(((-38.205)*cj3))+(((-1.0)*cj0*px*x388))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x389.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x388))+(((-38.205)*cj3))+(((-1.0)*cj0*px*x388))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x390=IKcos(j4);
IkReal x391=(cj0*px);
IkReal x392=(py*sj0);
IkReal x393=((0.138)*x390);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.1519)+((sj1*x392))+((sj1*x391))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x393)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+(((-1.0)*sj3*x393))+(((-1.0)*pz*sj1))+((cj1*x392))+((cj1*x391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x394=((1.0)*r02);
IkReal x395=((1.0)*sj1);
IkReal x396=(cj0*r00);
IkReal x397=(r01*sj0);
if( IKabs(((((-1.0)*x395*x396))+(((-1.0)*x395*x397))+(((-1.0)*cj1*x394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x394))+((cj1*x397))+((cj1*x396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x395*x396))+(((-1.0)*x395*x397))+(((-1.0)*cj1*x394))))+IKsqr(((((-1.0)*sj1*x394))+((cj1*x397))+((cj1*x396))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x395*x396))+(((-1.0)*x395*x397))+(((-1.0)*cj1*x394))), ((((-1.0)*sj1*x394))+((cj1*x397))+((cj1*x396))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x398=(r01*sj0);
IkReal x399=(cj0*r00);
evalcond[0]=(((sj1*x398))+((sj1*x399))+((cj1*r02))+(IKsin(j3)));
evalcond[1]=((((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j3))))+((cj1*x399))+((cj1*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x400=(r01*sj0);
IkReal x401=((1.0)*sj1);
IkReal x402=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x400))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x401))+((r00*x402))+((cj1*x400)));
evalcond[4]=((2.6e-7)+((px*x402))+((cj1*py*sj0))+(((-1.0)*pz*x401)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x403=((7.2463768115942)*sj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*py*sj0*x403))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*cj0*px*x403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((-1.65442028985507)+(((-1.0)*py*sj0*x403))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*cj0*px*x403))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((-1.65442028985507)+(((-1.0)*py*sj0*x403))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*cj0*px*x403))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x404=(r01*sj0);
IkReal x405=((1.0)*sj1);
IkReal x406=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x404))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+(((-1.0)*r02*x405))+((r00*x406))+((cj1*x404)));
evalcond[4]=((2.6e-7)+((px*x406))+((cj1*py*sj0))+(((-1.0)*pz*x405)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x407=((7.2463768115942)*sj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((7.2463768115942)*cj1*pz))+((cj0*px*x407))+((py*sj0*x407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((0.547028985507246)+(((7.2463768115942)*cj1*pz))+((cj0*px*x407))+((py*sj0*x407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((0.547028985507246)+(((7.2463768115942)*cj1*pz))+((cj0*px*x407))+((py*sj0*x407))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.138)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x408=(sj0*sj1);
IkReal x409=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r00*x409))+((r01*x408)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x408))+((px*x409))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x410=((7.2463768115942)*cj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553697536231884)+(((-1.0)*cj0*px*x410))+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((-0.553697536231884)+(((-1.0)*cj0*px*x410))+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x410))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((-0.553697536231884)+(((-1.0)*cj0*px*x410))+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x410))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07641026)+(((0.138)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x411=(sj0*sj1);
IkReal x412=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x411))+((r00*x412)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x411))+((cj1*pz))+((px*x412)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x413=((7.2463768115942)*cj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553693768115942)+((cj0*px*x413))+((py*sj0*x413))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((-0.553693768115942)+((cj0*px*x413))+((py*sj0*x413))+(((-7.2463768115942)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((-0.553693768115942)+((cj0*px*x413))+((py*sj0*x413))+(((-7.2463768115942)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x414=((500.0)*cj1);
CheckValue<IkReal> x415=IKPowWithIntegerCheck(sj3,-1);
if(!x415.valid){
continue;
}
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x415.value)*(((-0.00013)+(((-1.0)*cj0*px*x414))+(((-38.205)*sj3))+(((-1.0)*py*sj0*x414))+(((500.0)*pz*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x415.value)*(((-0.00013)+(((-1.0)*cj0*px*x414))+(((-38.205)*sj3))+(((-1.0)*py*sj0*x414))+(((500.0)*pz*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x415.value)*(((-0.00013)+(((-1.0)*cj0*px*x414))+(((-38.205)*sj3))+(((-1.0)*py*sj0*x414))+(((500.0)*pz*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x416=IKcos(j4);
IkReal x417=(cj0*px);
IkReal x418=(py*sj0);
IkReal x419=((0.138)*x416);
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((sj1*x418))+((sj1*x417))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x419)));
evalcond[2]=((2.6e-7)+((sj3*x419))+(((-1.0)*pz*sj1))+(((0.07641)*sj3))+((cj1*x417))+((cj1*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x420=((500.0)*sj1);
CheckValue<IkReal> x421=IKPowWithIntegerCheck(cj3,-1);
if(!x421.valid){
continue;
}
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x421.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*cj0*px*x420))+(((-38.205)*cj3))+(((-1.0)*py*sj0*x420)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x421.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*cj0*px*x420))+(((-38.205)*cj3))+(((-1.0)*py*sj0*x420))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x421.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*cj0*px*x420))+(((-38.205)*cj3))+(((-1.0)*py*sj0*x420))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x422=IKcos(j4);
IkReal x423=(cj0*px);
IkReal x424=(py*sj0);
IkReal x425=((0.138)*x422);
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x425))+((sj1*x423))+((sj1*x424)));
evalcond[2]=((2.6e-7)+(((-1.0)*pz*sj1))+((sj3*x425))+(((0.07641)*sj3))+((cj1*x423))+((cj1*x424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x426=((1.0)*cj1);
IkReal x427=(r01*sj0);
IkReal x428=((1.0)*sj1);
IkReal x429=(cj0*r00);
CheckValue<IkReal> x430=IKPowWithIntegerCheck(cj2,-1);
if(!x430.valid){
continue;
}
if( IKabs(((((-1.0)*x427*x428))+(((-1.0)*r02*x426))+(((-1.0)*x428*x429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x430.value)*((((r02*sj1))+(((-1.0)*x426*x429))+(((-1.0)*x426*x427)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x427*x428))+(((-1.0)*r02*x426))+(((-1.0)*x428*x429))))+IKsqr(((x430.value)*((((r02*sj1))+(((-1.0)*x426*x429))+(((-1.0)*x426*x427))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x427*x428))+(((-1.0)*r02*x426))+(((-1.0)*x428*x429))), ((x430.value)*((((r02*sj1))+(((-1.0)*x426*x429))+(((-1.0)*x426*x427))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x431=IKcos(j3);
IkReal x432=(r01*sj0);
IkReal x433=(cj0*r00);
evalcond[0]=((((-1.0)*r00*sj0))+((sj2*x431))+((cj0*r01)));
evalcond[1]=(((cj1*r02))+(IKsin(j3))+((sj1*x433))+((sj1*x432)));
evalcond[2]=(((cj1*x432))+((cj1*x433))+(((-1.0)*r02*sj1))+((cj2*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x434=(sj0*sj1);
IkReal x435=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r00*x435))+((r01*x434)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x435))+((py*x434))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x436=((7.2463768115942)*cj1);
IkReal x437=(cj2*sj0);
IkReal x438=((7.2463768115942)*sj2);
IkReal x439=(pz*sj1);
IkReal x440=(cj0*px);
IkReal x441=((7.2463768115942)*cj2);
IkReal x442=(cj0*py);
if( IKabs(((((-1.0)*sj2*x436*x440))+(((-1.0)*py*sj0*sj2*x436))+(((-7.2463768115942)*px*x437))+(((-1.88405797101449e-6)*sj2))+((x441*x442))+((x438*x439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*x439*x441))+((cj2*x436*x440))+((py*x436*x437))+(((1.88405797101449e-6)*cj2))+((x438*x442))+(((-1.0)*px*sj0*x438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x436*x440))+(((-1.0)*py*sj0*sj2*x436))+(((-7.2463768115942)*px*x437))+(((-1.88405797101449e-6)*sj2))+((x441*x442))+((x438*x439))))+IKsqr(((-0.553695652173913)+(((-1.0)*x439*x441))+((cj2*x436*x440))+((py*x436*x437))+(((1.88405797101449e-6)*cj2))+((x438*x442))+(((-1.0)*px*sj0*x438))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj2*x436*x440))+(((-1.0)*py*sj0*sj2*x436))+(((-7.2463768115942)*px*x437))+(((-1.88405797101449e-6)*sj2))+((x441*x442))+((x438*x439))), ((-0.553695652173913)+(((-1.0)*x439*x441))+((cj2*x436*x440))+((py*x436*x437))+(((1.88405797101449e-6)*cj2))+((x438*x442))+(((-1.0)*px*sj0*x438))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x443=IKsin(j4);
IkReal x444=IKcos(j4);
IkReal x445=((0.138)*x444);
IkReal x446=((0.138)*x443);
evalcond[0]=((((-0.07641)*sj2))+(((-1.0)*sj2*x445))+(((-1.0)*cj2*x446))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((-1.0)*cj2*x445))+((cj1*py*sj0))+((sj2*x446))+(((-0.07641)*cj2))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x447=(sj0*sj1);
IkReal x448=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x447))+((r00*x448)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x448))+((py*x447))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x449=((7.2463768115942)*cj1);
IkReal x450=(cj2*sj0);
IkReal x451=((7.2463768115942)*sj2);
IkReal x452=(pz*sj1);
IkReal x453=(cj0*px);
IkReal x454=((7.2463768115942)*cj2);
IkReal x455=(cj0*py);
if( IKabs((((x454*x455))+(((-7.2463768115942)*px*x450))+(((-1.0)*py*sj0*sj2*x449))+(((-1.88405797101449e-6)*sj2))+((x451*x452))+(((-1.0)*sj2*x449*x453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((x452*x454))+(((-1.88405797101449e-6)*cj2))+(((-1.0)*cj2*x449*x453))+(((-1.0)*py*x449*x450))+(((-1.0)*x451*x455))+((px*sj0*x451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x454*x455))+(((-7.2463768115942)*px*x450))+(((-1.0)*py*sj0*sj2*x449))+(((-1.88405797101449e-6)*sj2))+((x451*x452))+(((-1.0)*sj2*x449*x453))))+IKsqr(((-0.553695652173913)+((x452*x454))+(((-1.88405797101449e-6)*cj2))+(((-1.0)*cj2*x449*x453))+(((-1.0)*py*x449*x450))+(((-1.0)*x451*x455))+((px*sj0*x451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x454*x455))+(((-7.2463768115942)*px*x450))+(((-1.0)*py*sj0*sj2*x449))+(((-1.88405797101449e-6)*sj2))+((x451*x452))+(((-1.0)*sj2*x449*x453))), ((-0.553695652173913)+((x452*x454))+(((-1.88405797101449e-6)*cj2))+(((-1.0)*cj2*x449*x453))+(((-1.0)*py*x449*x450))+(((-1.0)*x451*x455))+((px*sj0*x451))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x456=IKsin(j4);
IkReal x457=IKcos(j4);
IkReal x458=((0.138)*x457);
IkReal x459=((0.138)*x456);
evalcond[0]=(((sj2*x458))+(((0.07641)*sj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj2*x459)));
evalcond[1]=((2.6e-7)+((sj2*x459))+((cj1*py*sj0))+(((0.07641)*cj2))+((cj2*x458))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x460=(r01*sj0);
IkReal x461=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x460))+((sj1*x461)));
evalcond[3]=(cj3+((cj1*x460))+((cj1*x461))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x462=(r01*sj0);
IkReal x463=((1.0)*sj1);
IkReal x464=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x462))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+((cj1*x462))+(((-1.0)*r02*x463))+((r00*x464)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*x463))+((px*x464)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x465=((7.2463768115942)*sj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*cj0*px*x465))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*py*sj0*x465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((-1.65442028985507)+(((-1.0)*cj0*px*x465))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*py*sj0*x465))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((-1.65442028985507)+(((-1.0)*cj0*px*x465))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*py*sj0*x465))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x466=(r01*sj0);
IkReal x467=((1.0)*sj1);
IkReal x468=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x466))+((cj0*r00*sj1)));
evalcond[3]=((-1.0)+((cj1*x466))+(((-1.0)*r02*x467))+((r00*x468)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*x467))+((px*x468)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x469=((7.2463768115942)*sj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((py*sj0*x469))+((cj0*px*x469))+(((7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((0.547028985507246)+((py*sj0*x469))+((cj0*px*x469))+(((7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((0.547028985507246)+((py*sj0*x469))+((cj0*px*x469))+(((7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.138)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x470=(sj0*sj1);
IkReal x471=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r00*x471))+((r01*x470)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x470))+((px*x471)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x472=((7.2463768115942)*cj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553693768115942)+((py*sj0*x472))+((cj0*px*x472))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((-0.553693768115942)+((py*sj0*x472))+((cj0*px*x472))+(((-7.2463768115942)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((-0.553693768115942)+((py*sj0*x472))+((cj0*px*x472))+(((-7.2463768115942)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x473=(sj0*sj1);
IkReal x474=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r00*x474))+((r01*x473)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x473))+((px*x474)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x475=((7.2463768115942)*cj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj0*px*x475))+(((-1.0)*py*sj0*x475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj0*px*x475))+(((-1.0)*py*sj0*x475))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj0*px*x475))+(((-1.0)*py*sj0*x475))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07641026)+(((0.138)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x476=((500.0)*cj1);
CheckValue<IkReal> x477=IKPowWithIntegerCheck(sj3,-1);
if(!x477.valid){
continue;
}
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x477.value)*(((0.00013)+(((-38.205)*sj3))+((py*sj0*x476))+((cj0*px*x476))+(((-500.0)*pz*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x477.value)*(((0.00013)+(((-38.205)*sj3))+((py*sj0*x476))+((cj0*px*x476))+(((-500.0)*pz*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x477.value)*(((0.00013)+(((-38.205)*sj3))+((py*sj0*x476))+((cj0*px*x476))+(((-500.0)*pz*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x478=IKcos(j4);
IkReal x479=(cj0*px);
IkReal x480=(py*sj0);
IkReal x481=((0.138)*x478);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.1519)+((cj3*x481))+((sj1*x480))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x479)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+((cj1*x479))+(((-1.0)*sj3*x481))+(((-1.0)*pz*sj1))+((cj1*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x482=((500.0)*sj1);
CheckValue<IkReal> x483=IKPowWithIntegerCheck(cj3,-1);
if(!x483.valid){
continue;
}
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x483.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x482))+(((-1.0)*cj0*px*x482))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x483.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x482))+(((-1.0)*cj0*px*x482))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x483.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x482))+(((-1.0)*cj0*px*x482))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x484=IKcos(j4);
IkReal x485=(cj0*px);
IkReal x486=(py*sj0);
IkReal x487=((0.138)*x484);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.1519)+((cj3*x487))+((sj1*x485))+((sj1*x486))+((cj1*pz))+(((0.07641)*cj3)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+(((-1.0)*sj3*x487))+(((-1.0)*pz*sj1))+((cj1*x485))+((cj1*x486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x488=(r01*sj0);
IkReal x489=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x488))+((sj1*x489)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x489))+((cj1*x488))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x490=(r01*sj0);
IkReal x491=((1.0)*sj1);
IkReal x492=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x490))+((cj0*r00*sj1)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x491))+((cj1*x490))+((r00*x492)));
evalcond[4]=((2.6e-7)+((px*x492))+((cj1*py*sj0))+(((-1.0)*pz*x491)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x493=((7.2463768115942)*sj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-7.2463768115942)*cj1*pz))+(((-1.0)*py*sj0*x493))+(((-1.0)*cj0*px*x493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((-1.65442028985507)+(((-7.2463768115942)*cj1*pz))+(((-1.0)*py*sj0*x493))+(((-1.0)*cj0*px*x493))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((-1.65442028985507)+(((-7.2463768115942)*cj1*pz))+(((-1.0)*py*sj0*x493))+(((-1.0)*cj0*px*x493))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x494=(r01*sj0);
IkReal x495=((1.0)*sj1);
IkReal x496=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x494))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+(((-1.0)*r02*x495))+((cj1*x494))+((r00*x496)));
evalcond[4]=((2.6e-7)+((px*x496))+((cj1*py*sj0))+(((-1.0)*pz*x495)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x497=((7.2463768115942)*sj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((py*sj0*x497))+((cj0*px*x497))+(((7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((0.547028985507246)+((py*sj0*x497))+((cj0*px*x497))+(((7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((0.547028985507246)+((py*sj0*x497))+((cj0*px*x497))+(((7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.138)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x498=(sj0*sj1);
IkReal x499=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r00*x499))+((r01*x498)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x498))+((cj1*pz))+((px*x499)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x500=((7.2463768115942)*cj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj0*px*x500))+(((-1.0)*py*sj0*x500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj0*px*x500))+(((-1.0)*py*sj0*x500))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj0*px*x500))+(((-1.0)*py*sj0*x500))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07641026)+(((0.138)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x501=(sj0*sj1);
IkReal x502=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x501))+((r00*x502)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x502))+((py*x501)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x503=((7.2463768115942)*cj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553693768115942)+((py*sj0*x503))+((cj0*px*x503))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((-0.553693768115942)+((py*sj0*x503))+((cj0*px*x503))+(((-7.2463768115942)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((-0.553693768115942)+((py*sj0*x503))+((cj0*px*x503))+(((-7.2463768115942)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x504=((500.0)*cj1);
CheckValue<IkReal> x505=IKPowWithIntegerCheck(sj3,-1);
if(!x505.valid){
continue;
}
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x505.value)*(((-0.00013)+(((-38.205)*sj3))+(((500.0)*pz*sj1))+(((-1.0)*cj0*px*x504))+(((-1.0)*py*sj0*x504)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x505.value)*(((-0.00013)+(((-38.205)*sj3))+(((500.0)*pz*sj1))+(((-1.0)*cj0*px*x504))+(((-1.0)*py*sj0*x504))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x505.value)*(((-0.00013)+(((-38.205)*sj3))+(((500.0)*pz*sj1))+(((-1.0)*cj0*px*x504))+(((-1.0)*py*sj0*x504))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x506=IKcos(j4);
IkReal x507=(cj0*px);
IkReal x508=(py*sj0);
IkReal x509=((0.138)*x506);
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj3*x509))+((sj1*x507))+((sj1*x508))+((cj1*pz))+(((0.07641)*cj3)));
evalcond[2]=((2.6e-7)+((cj1*x508))+((cj1*x507))+((sj3*x509))+(((-1.0)*pz*sj1))+(((0.07641)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x510=((500.0)*sj1);
CheckValue<IkReal> x511=IKPowWithIntegerCheck(cj3,-1);
if(!x511.valid){
continue;
}
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x511.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x510))+(((-38.205)*cj3))+(((-1.0)*cj0*px*x510)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x511.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x510))+(((-38.205)*cj3))+(((-1.0)*cj0*px*x510))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x511.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x510))+(((-38.205)*cj3))+(((-1.0)*cj0*px*x510))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x512=IKcos(j4);
IkReal x513=(cj0*px);
IkReal x514=(py*sj0);
IkReal x515=((0.138)*x512);
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x515))+((sj1*x513))+((sj1*x514)));
evalcond[2]=((2.6e-7)+((cj1*x514))+((cj1*x513))+(((-1.0)*pz*sj1))+((sj3*x515))+(((0.07641)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x516=(r01*sj0);
IkReal x517=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(cj3+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x516))+((sj1*x517)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x517))+((cj1*x516)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x518=(sj0*sj1);
IkReal x519=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r01*x518))+((cj1*r02))+((r00*x519)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x519))+((py*x518))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x520=((7.2463768115942)*py);
IkReal x521=((7.2463768115942)*px);
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x521))+(((-1.0)*cj1*sj0*x520))+(((7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*sj0*x521))+((cj0*x520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x521))+(((-1.0)*cj1*sj0*x520))+(((7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+(((-1.0)*sj0*x521))+((cj0*x520))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x521))+(((-1.0)*cj1*sj0*x520))+(((7.2463768115942)*pz*sj1))), ((-0.553695652173913)+(((-1.0)*sj0*x521))+((cj0*x520))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x522=(sj0*sj1);
IkReal x523=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x522))+((r00*x523)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x523))+((py*x522)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x524=((7.2463768115942)*py);
IkReal x525=((7.2463768115942)*px);
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x525))+(((-1.0)*cj1*sj0*x524))+(((7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((sj0*x525))+(((-1.0)*cj0*x524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x525))+(((-1.0)*cj1*sj0*x524))+(((7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+((sj0*x525))+(((-1.0)*cj0*x524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x525))+(((-1.0)*cj1*sj0*x524))+(((7.2463768115942)*pz*sj1))), ((-0.553695652173913)+((sj0*x525))+(((-1.0)*cj0*x524))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x526=(r01*sj0);
IkReal x527=(cj0*r00);
IkReal x528=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x528))+((cj0*r01)));
evalcond[2]=(((sj1*x527))+((sj1*x526))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x526))+((cj1*x527)));
evalcond[4]=((((-1.0)*px*x528))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x529=((7.2463768115942)*cj1);
IkReal x530=(py*sj0);
IkReal x531=((7.2463768115942)*sj1);
IkReal x532=(cj0*px);
if( IKabs(((-1.88405797101449e-6)+((pz*x531))+(((-1.0)*x529*x532))+(((-1.0)*x529*x530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x530*x531))+(((-1.0)*x531*x532))+(((-1.0)*pz*x529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+((pz*x531))+(((-1.0)*x529*x532))+(((-1.0)*x529*x530))))+IKsqr(((-1.65442028985507)+(((-1.0)*x530*x531))+(((-1.0)*x531*x532))+(((-1.0)*pz*x529))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+((pz*x531))+(((-1.0)*x529*x532))+(((-1.0)*x529*x530))), ((-1.65442028985507)+(((-1.0)*x530*x531))+(((-1.0)*x531*x532))+(((-1.0)*pz*x529))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x533=(cj0*px);
IkReal x534=(py*sj0);
evalcond[0]=((0.22831)+(((0.138)*(IKcos(j4))))+((sj1*x534))+((sj1*x533))+((cj1*pz)));
evalcond[1]=((2.6e-7)+((cj1*x533))+((cj1*x534))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x535=(r01*sj0);
IkReal x536=(cj0*r00);
IkReal x537=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x537))+((cj0*r01)));
evalcond[2]=(((sj1*x536))+((sj1*x535))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x535))+((cj1*x536)));
evalcond[4]=((((-1.0)*px*x537))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x538=((7.2463768115942)*cj1);
IkReal x539=(py*sj0);
IkReal x540=((7.2463768115942)*sj1);
IkReal x541=(cj0*px);
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*x538*x539))+(((-1.0)*x538*x541))+((pz*x540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((pz*x538))+((x539*x540))+((x540*x541)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*x538*x539))+(((-1.0)*x538*x541))+((pz*x540))))+IKsqr(((0.547028985507246)+((pz*x538))+((x539*x540))+((x540*x541))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*x538*x539))+(((-1.0)*x538*x541))+((pz*x540))), ((0.547028985507246)+((pz*x538))+((x539*x540))+((x540*x541))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x542=(cj0*px);
IkReal x543=(py*sj0);
evalcond[0]=((0.07549)+((sj1*x543))+((sj1*x542))+((cj1*pz))+(((-0.138)*(IKcos(j4)))));
evalcond[1]=((2.6e-7)+((cj1*x543))+((cj1*x542))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x544=((7.2463768115942)*cj1);
IkReal x545=(py*sj0);
IkReal x546=(cj0*px);
IkReal x547=((500.0)*sj1);
CheckValue<IkReal> x548=IKPowWithIntegerCheck(cj3,-1);
if(!x548.valid){
continue;
}
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*x544*x545))+(((-1.0)*x544*x546))+(((7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x548.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x545*x547))+(((-38.205)*cj3))+(((-1.0)*x546*x547)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*x544*x545))+(((-1.0)*x544*x546))+(((7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x548.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x545*x547))+(((-38.205)*cj3))+(((-1.0)*x546*x547))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*x544*x545))+(((-1.0)*x544*x546))+(((7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x548.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x545*x547))+(((-38.205)*cj3))+(((-1.0)*x546*x547))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x549=IKcos(j4);
IkReal x550=(cj0*px);
IkReal x551=(py*sj0);
IkReal x552=((0.138)*x549);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x552))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x551))+((cj1*x550))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((sj1*x550))+((sj1*x551))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x553=((7.2463768115942)*cj1);
CheckValue<IkReal> x554=IKPowWithIntegerCheck(sj3,-1);
if(!x554.valid){
continue;
}
if( IKabs(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x553))+(((-1.0)*cj0*px*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x554.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-38.205)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x553))+(((-1.0)*cj0*px*x553))))+IKsqr(((0.0144927536231884)*(x554.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-38.205)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x553))+(((-1.0)*cj0*px*x553))), ((0.0144927536231884)*(x554.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-38.205)*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x555=IKcos(j4);
IkReal x556=(cj0*px);
IkReal x557=(py*sj0);
IkReal x558=((0.138)*x555);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x558))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x557))+((cj1*x556))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((sj1*x556))+((sj1*x557))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x559=(r01*sj0);
IkReal x560=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+(((-1.0)*cj3))+((cj0*r01)));
evalcond[2]=(((sj1*x559))+sj3+((cj1*r02))+((sj1*x560)));
evalcond[3]=(((cj1*x560))+((cj1*x559))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x561=(sj0*sj1);
IkReal x562=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r01*x561))+((r00*x562))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x561))+((px*x562)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x563=((7.2463768115942)*py);
IkReal x564=((7.2463768115942)*px);
if( IKabs(((1.88405797101449e-6)+((cj0*cj1*x564))+(((-7.2463768115942)*pz*sj1))+((cj1*sj0*x563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*cj0*x563))+((sj0*x564)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((cj0*cj1*x564))+(((-7.2463768115942)*pz*sj1))+((cj1*sj0*x563))))+IKsqr(((-0.553695652173913)+(((-1.0)*cj0*x563))+((sj0*x564))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((cj0*cj1*x564))+(((-7.2463768115942)*pz*sj1))+((cj1*sj0*x563))), ((-0.553695652173913)+(((-1.0)*cj0*x563))+((sj0*x564))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x565=(sj0*sj1);
IkReal x566=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r01*x565))+((r00*x566))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x565))+((px*x566)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x567=((7.2463768115942)*py);
IkReal x568=((7.2463768115942)*px);
if( IKabs(((1.88405797101449e-6)+((cj0*cj1*x568))+(((-7.2463768115942)*pz*sj1))+((cj1*sj0*x567)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*sj0*x568))+((cj0*x567)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((cj0*cj1*x568))+(((-7.2463768115942)*pz*sj1))+((cj1*sj0*x567))))+IKsqr(((-0.553695652173913)+(((-1.0)*sj0*x568))+((cj0*x567))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((cj0*cj1*x568))+(((-7.2463768115942)*pz*sj1))+((cj1*sj0*x567))), ((-0.553695652173913)+(((-1.0)*sj0*x568))+((cj0*x567))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x569=(r01*sj0);
IkReal x570=(cj0*r00);
IkReal x571=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x571))+((cj0*r01)));
evalcond[2]=(((sj1*x570))+((cj1*r02))+((sj1*x569)));
evalcond[3]=(((cj1*x569))+(((-1.0)*r02*sj1))+((cj1*x570)));
evalcond[4]=((((-1.0)*px*x571))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x572=((7.2463768115942)*cj1);
IkReal x573=(py*sj0);
IkReal x574=((7.2463768115942)*sj1);
IkReal x575=(cj0*px);
if( IKabs(((1.88405797101449e-6)+(((-1.0)*pz*x574))+((x572*x575))+((x572*x573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x573*x574))+(((-1.0)*x574*x575))+(((-1.0)*pz*x572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+(((-1.0)*pz*x574))+((x572*x575))+((x572*x573))))+IKsqr(((-1.65442028985507)+(((-1.0)*x573*x574))+(((-1.0)*x574*x575))+(((-1.0)*pz*x572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+(((-1.0)*pz*x574))+((x572*x575))+((x572*x573))), ((-1.65442028985507)+(((-1.0)*x573*x574))+(((-1.0)*x574*x575))+(((-1.0)*pz*x572))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x576=(cj0*px);
IkReal x577=(py*sj0);
evalcond[0]=((0.22831)+(((0.138)*(IKcos(j4))))+((sj1*x576))+((sj1*x577))+((cj1*pz)));
evalcond[1]=((2.6e-7)+(((-1.0)*pz*sj1))+((cj1*x576))+((cj1*x577))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x578=(r01*sj0);
IkReal x579=(cj0*r00);
IkReal x580=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x580))+((cj0*r01)));
evalcond[2]=(((sj1*x578))+((sj1*x579))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x579))+((cj1*x578)));
evalcond[4]=((((-1.0)*px*x580))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x581=((7.2463768115942)*cj1);
IkReal x582=(py*sj0);
IkReal x583=((7.2463768115942)*sj1);
IkReal x584=(cj0*px);
if( IKabs(((1.88405797101449e-6)+((x581*x584))+((x581*x582))+(((-1.0)*pz*x583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((x583*x584))+((x582*x583))+((pz*x581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((x581*x584))+((x581*x582))+(((-1.0)*pz*x583))))+IKsqr(((0.547028985507246)+((x583*x584))+((x582*x583))+((pz*x581))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((x581*x584))+((x581*x582))+(((-1.0)*pz*x583))), ((0.547028985507246)+((x583*x584))+((x582*x583))+((pz*x581))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x585=(cj0*px);
IkReal x586=(py*sj0);
evalcond[0]=((0.07549)+((sj1*x586))+((sj1*x585))+((cj1*pz))+(((-0.138)*(IKcos(j4)))));
evalcond[1]=((2.6e-7)+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4))))+((cj1*x585))+((cj1*x586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x587=((7.2463768115942)*cj1);
IkReal x588=(py*sj0);
IkReal x589=(cj0*px);
IkReal x590=((500.0)*sj1);
CheckValue<IkReal> x591=IKPowWithIntegerCheck(cj3,-1);
if(!x591.valid){
continue;
}
if( IKabs(((1.88405797101449e-6)+((x587*x588))+((x587*x589))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x591.value)*(((-75.95)+(((-1.0)*x588*x590))+(((-500.0)*cj1*pz))+(((-1.0)*x589*x590))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((x587*x588))+((x587*x589))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x591.value)*(((-75.95)+(((-1.0)*x588*x590))+(((-500.0)*cj1*pz))+(((-1.0)*x589*x590))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((x587*x588))+((x587*x589))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x591.value)*(((-75.95)+(((-1.0)*x588*x590))+(((-500.0)*cj1*pz))+(((-1.0)*x589*x590))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x592=IKcos(j4);
IkReal x593=(cj0*px);
IkReal x594=(py*sj0);
IkReal x595=((0.138)*x592);
evalcond[0]=((((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+((sj3*x595)));
evalcond[1]=((2.6e-7)+((cj1*x594))+((cj1*x593))+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x595))+((sj1*x593))+((sj1*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x596=((7.2463768115942)*cj1);
CheckValue<IkReal> x597=IKPowWithIntegerCheck(sj3,-1);
if(!x597.valid){
continue;
}
if( IKabs(((1.88405797101449e-6)+((py*sj0*x596))+((cj0*px*x596))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x597.value)*(((((-500.0)*cj0*py))+(((-38.205)*sj3))+(((500.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((py*sj0*x596))+((cj0*px*x596))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x597.value)*(((((-500.0)*cj0*py))+(((-38.205)*sj3))+(((500.0)*px*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((py*sj0*x596))+((cj0*px*x596))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x597.value)*(((((-500.0)*cj0*py))+(((-38.205)*sj3))+(((500.0)*px*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x598=IKcos(j4);
IkReal x599=(cj0*px);
IkReal x600=(py*sj0);
IkReal x601=((0.138)*x598);
evalcond[0]=((((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+((sj3*x601)));
evalcond[1]=((2.6e-7)+((cj1*x599))+((cj1*x600))+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((sj1*x600))+((cj3*x601))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x602=(r01*sj0);
IkReal x603=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(sj2+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x602))+((sj1*x603))+((cj1*r02)));
evalcond[3]=(cj2+(((-1.0)*r02*sj1))+((cj1*x603))+((cj1*x602)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x604=((500.0)*cj1);
IkReal x605=(py*sj0);
IkReal x606=(cj0*px);
IkReal x607=((7.2463768115942)*sj1);
CheckValue<IkReal> x608=IKPowWithIntegerCheck(sj2,-1);
if(!x608.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x608.value)*(((-0.00013)+(((500.0)*pz*sj1))+(((-1.0)*x604*x605))+(((-1.0)*x604*x606)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x605*x607))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*x606*x607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x608.value)*(((-0.00013)+(((500.0)*pz*sj1))+(((-1.0)*x604*x605))+(((-1.0)*x604*x606))))))+IKsqr(((-1.65442028985507)+(((-1.0)*x605*x607))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*x606*x607))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x608.value)*(((-0.00013)+(((500.0)*pz*sj1))+(((-1.0)*x604*x605))+(((-1.0)*x604*x606))))), ((-1.65442028985507)+(((-1.0)*x605*x607))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*x606*x607))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x609=IKsin(j4);
IkReal x610=(cj0*px);
IkReal x611=(py*sj0);
IkReal x612=((0.138)*x609);
evalcond[0]=((((-1.0)*cj2*x612))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((sj1*x611))+((sj1*x610))+((cj1*pz)));
evalcond[2]=((2.6e-7)+(((-1.0)*pz*sj1))+((cj1*x610))+((cj1*x611))+((sj2*x612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x613=((7.2463768115942)*sj1);
CheckValue<IkReal> x614=IKPowWithIntegerCheck(cj2,-1);
if(!x614.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x614.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*py*sj0*x613))+(((-1.0)*cj0*px*x613))+(((-7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x614.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))))))+IKsqr(((-1.65442028985507)+(((-1.0)*py*sj0*x613))+(((-1.0)*cj0*px*x613))+(((-7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x614.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))))), ((-1.65442028985507)+(((-1.0)*py*sj0*x613))+(((-1.0)*cj0*px*x613))+(((-7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x615=IKsin(j4);
IkReal x616=(cj0*px);
IkReal x617=(py*sj0);
IkReal x618=((0.138)*x615);
evalcond[0]=((((-1.0)*cj2*x618))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((sj1*x617))+((sj1*x616))+((cj1*pz)));
evalcond[2]=((2.6e-7)+(((-1.0)*pz*sj1))+((cj1*x616))+((cj1*x617))+((sj2*x618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x619=(r01*sj0);
IkReal x620=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x619))+((cj1*r02))+((sj1*x620)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x619))+(((-1.0)*cj2))+((cj1*x620)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x621=((500.0)*cj1);
IkReal x622=(py*sj0);
IkReal x623=(cj0*px);
IkReal x624=((7.2463768115942)*sj1);
CheckValue<IkReal> x625=IKPowWithIntegerCheck(sj2,-1);
if(!x625.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x625.value)*(((-0.00013)+(((-1.0)*x621*x623))+(((-1.0)*x621*x622))+(((500.0)*pz*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((7.2463768115942)*cj1*pz))+((x623*x624))+((x622*x624)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x625.value)*(((-0.00013)+(((-1.0)*x621*x623))+(((-1.0)*x621*x622))+(((500.0)*pz*sj1))))))+IKsqr(((0.547028985507246)+(((7.2463768115942)*cj1*pz))+((x623*x624))+((x622*x624))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x625.value)*(((-0.00013)+(((-1.0)*x621*x623))+(((-1.0)*x621*x622))+(((500.0)*pz*sj1))))), ((0.547028985507246)+(((7.2463768115942)*cj1*pz))+((x623*x624))+((x622*x624))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x626=IKsin(j4);
IkReal x627=(cj0*px);
IkReal x628=(py*sj0);
IkReal x629=((0.138)*x626);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj2*x629)));
evalcond[1]=((0.07549)+((cj1*pz))+((sj1*x628))+((sj1*x627))+(((-0.138)*(IKcos(j4)))));
evalcond[2]=((2.6e-7)+((sj2*x629))+(((-1.0)*pz*sj1))+((cj1*x627))+((cj1*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x630=((7.2463768115942)*sj1);
CheckValue<IkReal> x631=IKPowWithIntegerCheck(cj2,-1);
if(!x631.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x631.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((cj0*px*x630))+((py*sj0*x630))+(((7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x631.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))))))+IKsqr(((0.547028985507246)+((cj0*px*x630))+((py*sj0*x630))+(((7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x631.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))))), ((0.547028985507246)+((cj0*px*x630))+((py*sj0*x630))+(((7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x632=IKsin(j4);
IkReal x633=(cj0*px);
IkReal x634=(py*sj0);
IkReal x635=((0.138)*x632);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj2*x635)));
evalcond[1]=((0.07549)+((cj1*pz))+((sj1*x633))+((sj1*x634))+(((-0.138)*(IKcos(j4)))));
evalcond[2]=((2.6e-7)+((sj2*x635))+(((-1.0)*pz*sj1))+((cj1*x634))+((cj1*x633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x644=IKPowWithIntegerCheck(cj3,-1);
if(!x644.valid){
continue;
}
IkReal x636=x644.value;
IkReal x637=((500.0)*cj3);
IkReal x638=(py*sj0);
IkReal x639=(cj2*sj3);
IkReal x640=((0.0144927536231884)*x636);
IkReal x641=((500.0)*sj1);
IkReal x642=((500.0)*cj1*pz);
IkReal x643=(cj0*px*x641);
CheckValue<IkReal> x645=IKPowWithIntegerCheck(sj2,-1);
if(!x645.valid){
continue;
}
if( IKabs((x640*(x645.value)*(((((-1.0)*cj1*x637*x638))+(((-1.0)*x638*x639*x641))+(((-0.00013)*cj3))+(((-1.0)*x639*x643))+(((-1.0)*x639*x642))+(((-1.0)*cj0*cj1*px*x637))+((pz*sj1*x637))+(((-75.95)*x639)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x640*(((-75.95)+(((-1.0)*x643))+(((-1.0)*x642))+(((-38.205)*cj3))+(((-1.0)*x638*x641)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x640*(x645.value)*(((((-1.0)*cj1*x637*x638))+(((-1.0)*x638*x639*x641))+(((-0.00013)*cj3))+(((-1.0)*x639*x643))+(((-1.0)*x639*x642))+(((-1.0)*cj0*cj1*px*x637))+((pz*sj1*x637))+(((-75.95)*x639))))))+IKsqr((x640*(((-75.95)+(((-1.0)*x643))+(((-1.0)*x642))+(((-38.205)*cj3))+(((-1.0)*x638*x641))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x640*(x645.value)*(((((-1.0)*cj1*x637*x638))+(((-1.0)*x638*x639*x641))+(((-0.00013)*cj3))+(((-1.0)*x639*x643))+(((-1.0)*x639*x642))+(((-1.0)*cj0*cj1*px*x637))+((pz*sj1*x637))+(((-75.95)*x639))))), (x640*(((-75.95)+(((-1.0)*x643))+(((-1.0)*x642))+(((-38.205)*cj3))+(((-1.0)*x638*x641))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x646=IKcos(j4);
IkReal x647=IKsin(j4);
IkReal x648=(cj0*px);
IkReal x649=(sj2*sj3);
IkReal x650=((0.138)*cj2);
IkReal x651=(py*sj0);
IkReal x652=((0.138)*x646);
evalcond[0]=((0.1519)+((sj1*x648))+((sj1*x651))+((cj3*x652))+((cj1*pz))+(((0.07641)*cj3)));
evalcond[1]=((((-0.07641)*x649))+(((-1.0)*x647*x650))+(((-1.0)*x649*x652))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=((2.6e-7)+((cj1*x648))+((cj1*x651))+(((-0.07641)*cj2*sj3))+(((-1.0)*sj3*x646*x650))+(((0.138)*sj2*x647))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x660=IKPowWithIntegerCheck(cj3,-1);
if(!x660.valid){
continue;
}
IkReal x653=x660.value;
IkReal x654=((500.0)*py);
IkReal x655=(sj0*sj1);
IkReal x656=((0.0144927536231884)*x653);
IkReal x657=(sj2*sj3);
IkReal x658=((500.0)*cj1*pz);
IkReal x659=((500.0)*cj0*px*sj1);
CheckValue<IkReal> x661=IKPowWithIntegerCheck(cj2,-1);
if(!x661.valid){
continue;
}
if( IKabs((x656*(x661.value)*(((((-500.0)*cj3*px*sj0))+(((75.95)*x657))+((x654*x655*x657))+((x657*x659))+((x657*x658))+((cj0*cj3*x654)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x656*(((-75.95)+(((-1.0)*x659))+(((-1.0)*x658))+(((-38.205)*cj3))+(((-1.0)*x654*x655)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x656*(x661.value)*(((((-500.0)*cj3*px*sj0))+(((75.95)*x657))+((x654*x655*x657))+((x657*x659))+((x657*x658))+((cj0*cj3*x654))))))+IKsqr((x656*(((-75.95)+(((-1.0)*x659))+(((-1.0)*x658))+(((-38.205)*cj3))+(((-1.0)*x654*x655))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x656*(x661.value)*(((((-500.0)*cj3*px*sj0))+(((75.95)*x657))+((x654*x655*x657))+((x657*x659))+((x657*x658))+((cj0*cj3*x654))))), (x656*(((-75.95)+(((-1.0)*x659))+(((-1.0)*x658))+(((-38.205)*cj3))+(((-1.0)*x654*x655))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x662=IKcos(j4);
IkReal x663=IKsin(j4);
IkReal x664=(cj0*px);
IkReal x665=(sj2*sj3);
IkReal x666=((0.138)*cj2);
IkReal x667=(py*sj0);
IkReal x668=((0.138)*x662);
evalcond[0]=((0.1519)+((cj3*x668))+((sj1*x667))+((sj1*x664))+((cj1*pz))+(((0.07641)*cj3)));
evalcond[1]=((((-1.0)*x665*x668))+(((-1.0)*x663*x666))+(((-0.07641)*x665))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=((2.6e-7)+(((-1.0)*sj3*x662*x666))+(((-0.07641)*cj2*sj3))+(((0.138)*sj2*x663))+(((-1.0)*pz*sj1))+((cj1*x664))+((cj1*x667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x669=(cj0*px);
IkReal x670=(py*sj0);
IkReal x671=((7.2463768115942)*sj2);
IkReal x672=(pz*sj1);
IkReal x673=(px*sj0);
IkReal x674=((7.2463768115942)*cj2);
IkReal x675=((500.0)*sj2);
IkReal x676=(cj0*py);
IkReal x677=((500.0)*cj1*cj2);
CheckValue<IkReal> x678=IKPowWithIntegerCheck(sj3,-1);
if(!x678.valid){
continue;
}
if( IKabs(((((-1.0)*cj1*x670*x671))+(((-1.0)*cj1*x669*x671))+((x671*x672))+((x674*x676))+(((-1.88405797101449e-6)*sj2))+(((-1.0)*x673*x674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x678.value)*(((((-38.205)*sj3))+((x670*x677))+((x669*x677))+(((0.00013)*cj2))+((x675*x676))+(((-1.0)*x673*x675))+(((-500.0)*cj2*x672)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x670*x671))+(((-1.0)*cj1*x669*x671))+((x671*x672))+((x674*x676))+(((-1.88405797101449e-6)*sj2))+(((-1.0)*x673*x674))))+IKsqr(((0.0144927536231884)*(x678.value)*(((((-38.205)*sj3))+((x670*x677))+((x669*x677))+(((0.00013)*cj2))+((x675*x676))+(((-1.0)*x673*x675))+(((-500.0)*cj2*x672))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x670*x671))+(((-1.0)*cj1*x669*x671))+((x671*x672))+((x674*x676))+(((-1.88405797101449e-6)*sj2))+(((-1.0)*x673*x674))), ((0.0144927536231884)*(x678.value)*(((((-38.205)*sj3))+((x670*x677))+((x669*x677))+(((0.00013)*cj2))+((x675*x676))+(((-1.0)*x673*x675))+(((-500.0)*cj2*x672))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x679=IKcos(j4);
IkReal x680=IKsin(j4);
IkReal x681=(cj0*px);
IkReal x682=(sj2*sj3);
IkReal x683=((0.138)*cj2);
IkReal x684=(py*sj0);
IkReal x685=((0.138)*x679);
evalcond[0]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((sj1*x684))+((sj1*x681))+((cj3*x685)));
evalcond[1]=((((-0.07641)*x682))+(((-1.0)*x680*x683))+(((-1.0)*x682*x685))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=((2.6e-7)+((cj1*x681))+((cj1*x684))+(((-1.0)*sj3*x679*x683))+(((-0.07641)*cj2*sj3))+(((-1.0)*pz*sj1))+(((0.138)*sj2*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x686=((1.0)*cj0);
CheckValue<IkReal> x687=IKPowWithIntegerCheck(sj2,-1);
if(!x687.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj1*x686))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x687.value)*((((r00*sj0))+(((-1.0)*r01*x686)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj1*x686))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))))+IKsqr(((x687.value)*((((r00*sj0))+(((-1.0)*r01*x686))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*sj1*x686))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))), ((x687.value)*((((r00*sj0))+(((-1.0)*r01*x686))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x688=IKcos(j3);
IkReal x689=(r01*sj0);
IkReal x690=(cj0*r00);
evalcond[0]=(((sj2*x688))+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[1]=(((sj1*x690))+((cj1*r02))+(IKsin(j3))+((sj1*x689)));
evalcond[2]=(((cj1*x689))+((cj1*x690))+(((-1.0)*r02*sj1))+((cj2*x688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x691=(sj0*sj1);
IkReal x692=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r00*x692))+((r01*x691)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x691))+((cj1*pz))+((px*x692)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x693=((7.2463768115942)*cj1);
IkReal x694=(cj2*sj0);
IkReal x695=((7.2463768115942)*sj2);
IkReal x696=(pz*sj1);
IkReal x697=(cj0*px);
IkReal x698=((7.2463768115942)*cj2);
IkReal x699=(cj0*py);
if( IKabs((((x695*x696))+(((-1.0)*sj2*x693*x697))+(((-1.88405797101449e-6)*sj2))+(((-1.0)*py*sj0*sj2*x693))+(((-7.2463768115942)*px*x694))+((x698*x699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((x695*x699))+(((-1.0)*x696*x698))+(((-1.0)*px*sj0*x695))+(((1.88405797101449e-6)*cj2))+((cj2*x693*x697))+((py*x693*x694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x695*x696))+(((-1.0)*sj2*x693*x697))+(((-1.88405797101449e-6)*sj2))+(((-1.0)*py*sj0*sj2*x693))+(((-7.2463768115942)*px*x694))+((x698*x699))))+IKsqr(((-0.553695652173913)+((x695*x699))+(((-1.0)*x696*x698))+(((-1.0)*px*sj0*x695))+(((1.88405797101449e-6)*cj2))+((cj2*x693*x697))+((py*x693*x694))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x695*x696))+(((-1.0)*sj2*x693*x697))+(((-1.88405797101449e-6)*sj2))+(((-1.0)*py*sj0*sj2*x693))+(((-7.2463768115942)*px*x694))+((x698*x699))), ((-0.553695652173913)+((x695*x699))+(((-1.0)*x696*x698))+(((-1.0)*px*sj0*x695))+(((1.88405797101449e-6)*cj2))+((cj2*x693*x697))+((py*x693*x694))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x700=IKsin(j4);
IkReal x701=IKcos(j4);
IkReal x702=((0.138)*x701);
IkReal x703=((0.138)*x700);
evalcond[0]=((((-0.07641)*sj2))+(((-1.0)*cj2*x703))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*sj2*x702)));
evalcond[1]=((2.6e-7)+(((-1.0)*cj2*x702))+((cj1*py*sj0))+((sj2*x703))+(((-0.07641)*cj2))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x704=(sj0*sj1);
IkReal x705=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r01*x704))+((cj1*r02))+((r00*x705)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x705))+((py*x704)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x706=((7.2463768115942)*cj1);
IkReal x707=(cj2*sj0);
IkReal x708=((7.2463768115942)*sj2);
IkReal x709=(pz*sj1);
IkReal x710=(cj0*px);
IkReal x711=((7.2463768115942)*cj2);
IkReal x712=(cj0*py);
if( IKabs(((((-7.2463768115942)*px*x707))+(((-1.0)*sj2*x706*x710))+((x711*x712))+(((-1.88405797101449e-6)*sj2))+((x708*x709))+(((-1.0)*py*sj0*sj2*x706)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((px*sj0*x708))+(((-1.88405797101449e-6)*cj2))+((x709*x711))+(((-1.0)*cj2*x706*x710))+(((-1.0)*x708*x712))+(((-1.0)*py*x706*x707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*x707))+(((-1.0)*sj2*x706*x710))+((x711*x712))+(((-1.88405797101449e-6)*sj2))+((x708*x709))+(((-1.0)*py*sj0*sj2*x706))))+IKsqr(((-0.553695652173913)+((px*sj0*x708))+(((-1.88405797101449e-6)*cj2))+((x709*x711))+(((-1.0)*cj2*x706*x710))+(((-1.0)*x708*x712))+(((-1.0)*py*x706*x707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*x707))+(((-1.0)*sj2*x706*x710))+((x711*x712))+(((-1.88405797101449e-6)*sj2))+((x708*x709))+(((-1.0)*py*sj0*sj2*x706))), ((-0.553695652173913)+((px*sj0*x708))+(((-1.88405797101449e-6)*cj2))+((x709*x711))+(((-1.0)*cj2*x706*x710))+(((-1.0)*x708*x712))+(((-1.0)*py*x706*x707))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x713=IKsin(j4);
IkReal x714=IKcos(j4);
IkReal x715=((0.138)*x714);
IkReal x716=((0.138)*x713);
evalcond[0]=((((-1.0)*cj2*x716))+((sj2*x715))+(((0.07641)*sj2))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((0.07641)*cj2))+((sj2*x716))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+((cj2*x715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x717=(r01*sj0);
IkReal x718=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x717))+((sj1*x718)));
evalcond[3]=(cj3+(((-1.0)*r02*sj1))+((cj1*x718))+((cj1*x717)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x719=(r01*sj0);
IkReal x720=((1.0)*sj1);
IkReal x721=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((cj0*r00*sj1))+((sj1*x719)));
evalcond[3]=((1.0)+(((-1.0)*r02*x720))+((r00*x721))+((cj1*x719)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x721))+(((-1.0)*pz*x720)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x722=((7.2463768115942)*sj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*py*sj0*x722))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*cj0*px*x722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((-1.65442028985507)+(((-1.0)*py*sj0*x722))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*cj0*px*x722))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((-1.65442028985507)+(((-1.0)*py*sj0*x722))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*cj0*px*x722))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x723=(r01*sj0);
IkReal x724=((1.0)*sj1);
IkReal x725=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((cj0*r00*sj1))+((sj1*x723)));
evalcond[3]=((-1.0)+((cj1*x723))+(((-1.0)*r02*x724))+((r00*x725)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x725))+(((-1.0)*pz*x724)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x726=((7.2463768115942)*sj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((cj0*px*x726))+((py*sj0*x726))+(((7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((0.547028985507246)+((cj0*px*x726))+((py*sj0*x726))+(((7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((0.547028985507246)+((cj0*px*x726))+((py*sj0*x726))+(((7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.138)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x727=(sj0*sj1);
IkReal x728=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r01*x727))+((r00*x728)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x727))+((px*x728)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x729=((7.2463768115942)*cj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553693768115942)+((cj0*px*x729))+((py*sj0*x729))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((-0.553693768115942)+((cj0*px*x729))+((py*sj0*x729))+(((-7.2463768115942)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((-0.553693768115942)+((cj0*px*x729))+((py*sj0*x729))+(((-7.2463768115942)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x730=(sj0*sj1);
IkReal x731=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r00*x731))+((r01*x730)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x731))+((py*x730)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x732=((7.2463768115942)*cj1);
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x732))+(((-1.0)*cj0*px*x732)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x732))+(((-1.0)*cj0*px*x732))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x732))+(((-1.0)*cj0*px*x732))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.07641026)+(((0.138)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x733=((500.0)*cj1);
CheckValue<IkReal> x734=IKPowWithIntegerCheck(sj3,-1);
if(!x734.valid){
continue;
}
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x734.value)*(((0.00013)+(((-38.205)*sj3))+((cj0*px*x733))+((py*sj0*x733))+(((-500.0)*pz*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x734.value)*(((0.00013)+(((-38.205)*sj3))+((cj0*px*x733))+((py*sj0*x733))+(((-500.0)*pz*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x734.value)*(((0.00013)+(((-38.205)*sj3))+((cj0*px*x733))+((py*sj0*x733))+(((-500.0)*pz*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x735=IKcos(j4);
IkReal x736=(cj0*px);
IkReal x737=(py*sj0);
IkReal x738=((0.138)*x735);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x738))+((sj1*x736))+((sj1*x737)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+(((-1.0)*pz*sj1))+(((-1.0)*sj3*x738))+((cj1*x736))+((cj1*x737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x739=((500.0)*sj1);
CheckValue<IkReal> x740=IKPowWithIntegerCheck(cj3,-1);
if(!x740.valid){
continue;
}
if( IKabs(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x740.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x739))+(((-1.0)*cj0*px*x739))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x740.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x739))+(((-1.0)*cj0*px*x739))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-7.2463768115942)*px*sj0))+(((7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x740.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x739))+(((-1.0)*cj0*px*x739))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x741=IKcos(j4);
IkReal x742=(cj0*px);
IkReal x743=(py*sj0);
IkReal x744=((0.138)*x741);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-0.138)*(IKsin(j4)))));
evalcond[1]=((0.1519)+((cj3*x744))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x743))+((sj1*x742)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+((cj1*x743))+((cj1*x742))+(((-1.0)*pz*sj1))+(((-1.0)*sj3*x744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x745=(r01*sj0);
IkReal x746=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x745))+((sj1*x746)));
evalcond[3]=(((cj1*x746))+((cj1*x745))+(((-1.0)*r02*sj1))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x747=(r01*sj0);
IkReal x748=((1.0)*sj1);
IkReal x749=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x747))+((cj0*r00*sj1)));
evalcond[3]=((-1.0)+((cj1*x747))+(((-1.0)*r02*x748))+((r00*x749)));
evalcond[4]=((2.6e-7)+((px*x749))+((cj1*py*sj0))+(((-1.0)*pz*x748)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x750=((7.2463768115942)*sj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-7.2463768115942)*cj1*pz))+(((-1.0)*cj0*px*x750))+(((-1.0)*py*sj0*x750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((-1.65442028985507)+(((-7.2463768115942)*cj1*pz))+(((-1.0)*cj0*px*x750))+(((-1.0)*py*sj0*x750))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((-1.65442028985507)+(((-7.2463768115942)*cj1*pz))+(((-1.0)*cj0*px*x750))+(((-1.0)*py*sj0*x750))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x751=(r01*sj0);
IkReal x752=((1.0)*sj1);
IkReal x753=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x751))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+((cj1*x751))+(((-1.0)*r02*x752))+((r00*x753)));
evalcond[4]=((2.6e-7)+((px*x753))+((cj1*py*sj0))+(((-1.0)*pz*x752)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x754=((7.2463768115942)*sj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((cj0*px*x754))+((py*sj0*x754))+(((7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((0.547028985507246)+((cj0*px*x754))+((py*sj0*x754))+(((7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((0.547028985507246)+((cj0*px*x754))+((py*sj0*x754))+(((7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.138)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x755=(sj0*sj1);
IkReal x756=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r01*x755))+((r00*x756)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x755))+((px*x756))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x757=((7.2463768115942)*cj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj0*px*x757))+(((-1.0)*py*sj0*x757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj0*px*x757))+(((-1.0)*py*sj0*x757))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((-0.553697536231884)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj0*px*x757))+(((-1.0)*py*sj0*x757))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07641026)+(((0.138)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x758=(sj0*sj1);
IkReal x759=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x758))+((r00*x759)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x758))+((px*x759))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x760=((7.2463768115942)*cj1);
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553693768115942)+((cj0*px*x760))+((py*sj0*x760))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((-0.553693768115942)+((cj0*px*x760))+((py*sj0*x760))+(((-7.2463768115942)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((-0.553693768115942)+((cj0*px*x760))+((py*sj0*x760))+(((-7.2463768115942)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x761=((500.0)*cj1);
CheckValue<IkReal> x762=IKPowWithIntegerCheck(sj3,-1);
if(!x762.valid){
continue;
}
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x762.value)*(((-0.00013)+(((-38.205)*sj3))+(((500.0)*pz*sj1))+(((-1.0)*py*sj0*x761))+(((-1.0)*cj0*px*x761)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x762.value)*(((-0.00013)+(((-38.205)*sj3))+(((500.0)*pz*sj1))+(((-1.0)*py*sj0*x761))+(((-1.0)*cj0*px*x761))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x762.value)*(((-0.00013)+(((-38.205)*sj3))+(((500.0)*pz*sj1))+(((-1.0)*py*sj0*x761))+(((-1.0)*cj0*px*x761))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x763=IKcos(j4);
IkReal x764=(cj0*px);
IkReal x765=(py*sj0);
IkReal x766=((0.138)*x763);
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj3*x766))+((sj1*x765))+((sj1*x764))+((cj1*pz))+(((0.07641)*cj3)));
evalcond[2]=((2.6e-7)+((sj3*x766))+((cj1*x764))+((cj1*x765))+(((-1.0)*pz*sj1))+(((0.07641)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x767=((500.0)*sj1);
CheckValue<IkReal> x768=IKPowWithIntegerCheck(cj3,-1);
if(!x768.valid){
continue;
}
if( IKabs(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x768.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x767))+(((-1.0)*cj0*px*x767))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))))+IKsqr(((0.0144927536231884)*(x768.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x767))+(((-1.0)*cj0*px*x767))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((7.2463768115942)*px*sj0))+(((-7.2463768115942)*cj0*py))), ((0.0144927536231884)*(x768.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*py*sj0*x767))+(((-1.0)*cj0*px*x767))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x769=IKcos(j4);
IkReal x770=(cj0*px);
IkReal x771=(py*sj0);
IkReal x772=((0.138)*x769);
evalcond[0]=((((0.138)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj3*x772))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x770))+((sj1*x771)));
evalcond[2]=((2.6e-7)+((cj1*x771))+((cj1*x770))+(((-1.0)*pz*sj1))+((sj3*x772))+(((0.07641)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x773=(r01*sj0);
IkReal x774=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(cj3+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x774))+((sj1*x773)));
evalcond[3]=(((cj1*x773))+((cj1*x774))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x775=(sj0*sj1);
IkReal x776=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r01*x775))+((r00*x776)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x776))+((py*x775)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x777=((7.2463768115942)*py);
IkReal x778=((7.2463768115942)*px);
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x778))+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((cj0*x777))+(((-1.0)*sj0*x778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x778))+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x777))))+IKsqr(((-0.553695652173913)+((cj0*x777))+(((-1.0)*sj0*x778))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*cj0*cj1*x778))+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x777))), ((-0.553695652173913)+((cj0*x777))+(((-1.0)*sj0*x778))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x779=(sj0*sj1);
IkReal x780=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r00*x780))+((cj1*r02))+((r01*x779)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x780))+((cj1*pz))+((py*x779)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x781=((7.2463768115942)*py);
IkReal x782=((7.2463768115942)*px);
if( IKabs(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x781))+(((-1.0)*cj0*cj1*x782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+(((-1.0)*cj0*x781))+((sj0*x782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x781))+(((-1.0)*cj0*cj1*x782))))+IKsqr(((-0.553695652173913)+(((-1.0)*cj0*x781))+((sj0*x782))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*cj1*sj0*x781))+(((-1.0)*cj0*cj1*x782))), ((-0.553695652173913)+(((-1.0)*cj0*x781))+((sj0*x782))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x783=(r01*sj0);
IkReal x784=(cj0*r00);
IkReal x785=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x785))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x784))+((sj1*x783)));
evalcond[3]=(((cj1*x784))+((cj1*x783))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x785))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x786=((7.2463768115942)*cj1);
IkReal x787=(py*sj0);
IkReal x788=((7.2463768115942)*sj1);
IkReal x789=(cj0*px);
if( IKabs(((-1.88405797101449e-6)+((pz*x788))+(((-1.0)*x786*x789))+(((-1.0)*x786*x787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x788*x789))+(((-1.0)*x787*x788))+(((-1.0)*pz*x786)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+((pz*x788))+(((-1.0)*x786*x789))+(((-1.0)*x786*x787))))+IKsqr(((-1.65442028985507)+(((-1.0)*x788*x789))+(((-1.0)*x787*x788))+(((-1.0)*pz*x786))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+((pz*x788))+(((-1.0)*x786*x789))+(((-1.0)*x786*x787))), ((-1.65442028985507)+(((-1.0)*x788*x789))+(((-1.0)*x787*x788))+(((-1.0)*pz*x786))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x790=(cj0*px);
IkReal x791=(py*sj0);
evalcond[0]=((0.22831)+(((0.138)*(IKcos(j4))))+((sj1*x790))+((sj1*x791))+((cj1*pz)));
evalcond[1]=((2.6e-7)+((cj1*x791))+((cj1*x790))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x792=(r01*sj0);
IkReal x793=(cj0*r00);
IkReal x794=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x794))+((cj0*r01)));
evalcond[2]=(((sj1*x792))+((sj1*x793))+((cj1*r02)));
evalcond[3]=(((cj1*x792))+((cj1*x793))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x794))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x795=((7.2463768115942)*cj1);
IkReal x796=(py*sj0);
IkReal x797=((7.2463768115942)*sj1);
IkReal x798=(cj0*px);
if( IKabs(((-1.88405797101449e-6)+(((-1.0)*x795*x798))+(((-1.0)*x795*x796))+((pz*x797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((x796*x797))+((pz*x795))+((x797*x798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((-1.0)*x795*x798))+(((-1.0)*x795*x796))+((pz*x797))))+IKsqr(((0.547028985507246)+((x796*x797))+((pz*x795))+((x797*x798))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((-1.0)*x795*x798))+(((-1.0)*x795*x796))+((pz*x797))), ((0.547028985507246)+((x796*x797))+((pz*x795))+((x797*x798))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x799=(cj0*px);
IkReal x800=(py*sj0);
evalcond[0]=((0.07549)+((sj1*x799))+((cj1*pz))+((sj1*x800))+(((-0.138)*(IKcos(j4)))));
evalcond[1]=((2.6e-7)+((cj1*x799))+((cj1*x800))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x801=((7.2463768115942)*cj1);
IkReal x802=(py*sj0);
IkReal x803=(cj0*px);
IkReal x804=((500.0)*sj1);
CheckValue<IkReal> x805=IKPowWithIntegerCheck(cj3,-1);
if(!x805.valid){
continue;
}
if( IKabs(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*x801*x803))+(((-1.0)*x801*x802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x805.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x803*x804))+(((-38.205)*cj3))+(((-1.0)*x802*x804)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*x801*x803))+(((-1.0)*x801*x802))))+IKsqr(((0.0144927536231884)*(x805.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x803*x804))+(((-38.205)*cj3))+(((-1.0)*x802*x804))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*x801*x803))+(((-1.0)*x801*x802))), ((0.0144927536231884)*(x805.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x803*x804))+(((-38.205)*cj3))+(((-1.0)*x802*x804))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x806=IKcos(j4);
IkReal x807=(cj0*px);
IkReal x808=(py*sj0);
IkReal x809=((0.138)*x806);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x809))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x808))+((cj1*x807))+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x809))+((sj1*x807))+((sj1*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x810=((7.2463768115942)*cj1);
CheckValue<IkReal> x811=IKPowWithIntegerCheck(sj3,-1);
if(!x811.valid){
continue;
}
if( IKabs(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x810))+(((-1.0)*cj0*px*x810)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x811.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-38.205)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x810))+(((-1.0)*cj0*px*x810))))+IKsqr(((0.0144927536231884)*(x811.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-38.205)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.88405797101449e-6)+(((7.2463768115942)*pz*sj1))+(((-1.0)*py*sj0*x810))+(((-1.0)*cj0*px*x810))), ((0.0144927536231884)*(x811.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-38.205)*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x812=IKcos(j4);
IkReal x813=(cj0*px);
IkReal x814=(py*sj0);
IkReal x815=((0.138)*x812);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*sj3*x815)));
evalcond[1]=((2.6e-7)+(((-1.0)*pz*sj1))+(((0.138)*(IKsin(j4))))+((cj1*x813))+((cj1*x814)));
evalcond[2]=((0.1519)+((cj3*x815))+((sj1*x813))+((sj1*x814))+((cj1*pz))+(((0.07641)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x816=(r01*sj0);
IkReal x817=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+(((-1.0)*cj3))+((cj0*r01)));
evalcond[2]=(sj3+((sj1*x816))+((sj1*x817))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x817))+((cj1*x816)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x818=(sj0*sj1);
IkReal x819=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r01*x818))+((cj1*r02))+((r00*x819)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x818))+((px*x819))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x820=((7.2463768115942)*py);
IkReal x821=((7.2463768115942)*px);
if( IKabs(((1.88405797101449e-6)+((cj1*sj0*x820))+((cj0*cj1*x821))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((sj0*x821))+(((-1.0)*cj0*x820)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((cj1*sj0*x820))+((cj0*cj1*x821))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+((sj0*x821))+(((-1.0)*cj0*x820))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((cj1*sj0*x820))+((cj0*cj1*x821))+(((-7.2463768115942)*pz*sj1))), ((-0.553695652173913)+((sj0*x821))+(((-1.0)*cj0*x820))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x822=(sj0*sj1);
IkReal x823=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r00*x823))+((r01*x822)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x822))+((px*x823))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x824=((7.2463768115942)*py);
IkReal x825=((7.2463768115942)*px);
if( IKabs(((1.88405797101449e-6)+((cj1*sj0*x824))+((cj0*cj1*x825))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.553695652173913)+((cj0*x824))+(((-1.0)*sj0*x825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((cj1*sj0*x824))+((cj0*cj1*x825))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((-0.553695652173913)+((cj0*x824))+(((-1.0)*sj0*x825))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((cj1*sj0*x824))+((cj0*cj1*x825))+(((-7.2463768115942)*pz*sj1))), ((-0.553695652173913)+((cj0*x824))+(((-1.0)*sj0*x825))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.138)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x826=(r01*sj0);
IkReal x827=(cj0*r00);
IkReal x828=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x828))+((cj0*r01)));
evalcond[2]=(((sj1*x826))+((sj1*x827))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x827))+((cj1*x826)));
evalcond[4]=((((-1.0)*px*x828))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x829=((7.2463768115942)*cj1);
IkReal x830=(py*sj0);
IkReal x831=((7.2463768115942)*sj1);
IkReal x832=(cj0*px);
if( IKabs(((1.88405797101449e-6)+(((-1.0)*pz*x831))+((x829*x830))+((x829*x832)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*pz*x829))+(((-1.0)*x830*x831))+(((-1.0)*x831*x832)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+(((-1.0)*pz*x831))+((x829*x830))+((x829*x832))))+IKsqr(((-1.65442028985507)+(((-1.0)*pz*x829))+(((-1.0)*x830*x831))+(((-1.0)*x831*x832))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+(((-1.0)*pz*x831))+((x829*x830))+((x829*x832))), ((-1.65442028985507)+(((-1.0)*pz*x829))+(((-1.0)*x830*x831))+(((-1.0)*x831*x832))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x833=(cj0*px);
IkReal x834=(py*sj0);
evalcond[0]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((sj1*x833))+((sj1*x834)));
evalcond[1]=((2.6e-7)+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4))))+((cj1*x834))+((cj1*x833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x835=(r01*sj0);
IkReal x836=(cj0*r00);
IkReal x837=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x837))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x836))+((sj1*x835)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x835))+((cj1*x836)));
evalcond[4]=((((-1.0)*px*x837))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x838=((7.2463768115942)*cj1);
IkReal x839=(py*sj0);
IkReal x840=((7.2463768115942)*sj1);
IkReal x841=(cj0*px);
if( IKabs(((1.88405797101449e-6)+((x838*x841))+((x838*x839))+(((-1.0)*pz*x840)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((x840*x841))+((x839*x840))+((pz*x838)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((x838*x841))+((x838*x839))+(((-1.0)*pz*x840))))+IKsqr(((0.547028985507246)+((x840*x841))+((x839*x840))+((pz*x838))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((x838*x841))+((x838*x839))+(((-1.0)*pz*x840))), ((0.547028985507246)+((x840*x841))+((x839*x840))+((pz*x838))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x842=(cj0*px);
IkReal x843=(py*sj0);
evalcond[0]=((0.07549)+((cj1*pz))+(((-0.138)*(IKcos(j4))))+((sj1*x842))+((sj1*x843)));
evalcond[1]=((2.6e-7)+((cj1*x842))+((cj1*x843))+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x844=((7.2463768115942)*cj1);
IkReal x845=(py*sj0);
IkReal x846=(cj0*px);
IkReal x847=((500.0)*sj1);
CheckValue<IkReal> x848=IKPowWithIntegerCheck(cj3,-1);
if(!x848.valid){
continue;
}
if( IKabs(((1.88405797101449e-6)+(((-7.2463768115942)*pz*sj1))+((x844*x846))+((x844*x845)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x848.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x846*x847))+(((-1.0)*x845*x847))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+(((-7.2463768115942)*pz*sj1))+((x844*x846))+((x844*x845))))+IKsqr(((0.0144927536231884)*(x848.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x846*x847))+(((-1.0)*x845*x847))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+(((-7.2463768115942)*pz*sj1))+((x844*x846))+((x844*x845))), ((0.0144927536231884)*(x848.value)*(((-75.95)+(((-500.0)*cj1*pz))+(((-1.0)*x846*x847))+(((-1.0)*x845*x847))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x849=IKcos(j4);
IkReal x850=(cj0*px);
IkReal x851=(py*sj0);
IkReal x852=((0.138)*x849);
evalcond[0]=(((sj3*x852))+(((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x850))+((cj1*x851))+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj3*x852))+((sj1*x851))+((sj1*x850))+((cj1*pz))+(((0.07641)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x853=((7.2463768115942)*cj1);
CheckValue<IkReal> x854=IKPowWithIntegerCheck(sj3,-1);
if(!x854.valid){
continue;
}
if( IKabs(((1.88405797101449e-6)+((cj0*px*x853))+((py*sj0*x853))+(((-7.2463768115942)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x854.value)*(((((-500.0)*cj0*py))+(((-38.205)*sj3))+(((500.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.88405797101449e-6)+((cj0*px*x853))+((py*sj0*x853))+(((-7.2463768115942)*pz*sj1))))+IKsqr(((0.0144927536231884)*(x854.value)*(((((-500.0)*cj0*py))+(((-38.205)*sj3))+(((500.0)*px*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.88405797101449e-6)+((cj0*px*x853))+((py*sj0*x853))+(((-7.2463768115942)*pz*sj1))), ((0.0144927536231884)*(x854.value)*(((((-500.0)*cj0*py))+(((-38.205)*sj3))+(((500.0)*px*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x855=IKcos(j4);
IkReal x856=(cj0*px);
IkReal x857=(py*sj0);
IkReal x858=((0.138)*x855);
evalcond[0]=(((sj3*x858))+(((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x856))+((cj1*x857))+(((-1.0)*pz*sj1))+(((-0.138)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj3*x858))+((sj1*x857))+((sj1*x856))+((cj1*pz))+(((0.07641)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x859=(r01*sj0);
IkReal x860=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(sj2+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x859))+((sj1*x860)));
evalcond[3]=(cj2+((cj1*x859))+(((-1.0)*r02*sj1))+((cj1*x860)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x861=((500.0)*cj1);
IkReal x862=(py*sj0);
IkReal x863=(cj0*px);
IkReal x864=((7.2463768115942)*sj1);
CheckValue<IkReal> x865=IKPowWithIntegerCheck(sj2,-1);
if(!x865.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x865.value)*(((-0.00013)+(((500.0)*pz*sj1))+(((-1.0)*x861*x863))+(((-1.0)*x861*x862)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*x862*x864))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*x863*x864)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x865.value)*(((-0.00013)+(((500.0)*pz*sj1))+(((-1.0)*x861*x863))+(((-1.0)*x861*x862))))))+IKsqr(((-1.65442028985507)+(((-1.0)*x862*x864))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*x863*x864))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x865.value)*(((-0.00013)+(((500.0)*pz*sj1))+(((-1.0)*x861*x863))+(((-1.0)*x861*x862))))), ((-1.65442028985507)+(((-1.0)*x862*x864))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*x863*x864))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x866=IKsin(j4);
IkReal x867=(cj0*px);
IkReal x868=(py*sj0);
IkReal x869=((0.138)*x866);
evalcond[0]=((((-1.0)*cj2*x869))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((sj1*x867))+((sj1*x868)));
evalcond[2]=((2.6e-7)+((sj2*x869))+((cj1*x868))+((cj1*x867))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x870=((7.2463768115942)*sj1);
CheckValue<IkReal> x871=IKPowWithIntegerCheck(cj2,-1);
if(!x871.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x871.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.65442028985507)+(((-1.0)*cj0*px*x870))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*py*sj0*x870)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x871.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))))))+IKsqr(((-1.65442028985507)+(((-1.0)*cj0*px*x870))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*py*sj0*x870))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x871.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))))), ((-1.65442028985507)+(((-1.0)*cj0*px*x870))+(((-7.2463768115942)*cj1*pz))+(((-1.0)*py*sj0*x870))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x872=IKsin(j4);
IkReal x873=(cj0*px);
IkReal x874=(py*sj0);
IkReal x875=((0.138)*x872);
evalcond[0]=((((-1.0)*cj2*x875))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.138)*(IKcos(j4))))+((cj1*pz))+((sj1*x874))+((sj1*x873)));
evalcond[2]=((2.6e-7)+((sj2*x875))+((cj1*x873))+((cj1*x874))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x876=(r01*sj0);
IkReal x877=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x877))+((sj1*x876)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x876))+((cj1*x877))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x878=((500.0)*cj1);
IkReal x879=(py*sj0);
IkReal x880=(cj0*px);
IkReal x881=((7.2463768115942)*sj1);
CheckValue<IkReal> x882=IKPowWithIntegerCheck(sj2,-1);
if(!x882.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x882.value)*(((-0.00013)+(((500.0)*pz*sj1))+(((-1.0)*x878*x879))+(((-1.0)*x878*x880)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+((x879*x881))+((x880*x881))+(((7.2463768115942)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x882.value)*(((-0.00013)+(((500.0)*pz*sj1))+(((-1.0)*x878*x879))+(((-1.0)*x878*x880))))))+IKsqr(((0.547028985507246)+((x879*x881))+((x880*x881))+(((7.2463768115942)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x882.value)*(((-0.00013)+(((500.0)*pz*sj1))+(((-1.0)*x878*x879))+(((-1.0)*x878*x880))))), ((0.547028985507246)+((x879*x881))+((x880*x881))+(((7.2463768115942)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x883=IKsin(j4);
IkReal x884=(cj0*px);
IkReal x885=(py*sj0);
IkReal x886=((0.138)*x883);
evalcond[0]=((((-1.0)*cj2*x886))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((sj1*x884))+((sj1*x885))+((cj1*pz))+(((-0.138)*(IKcos(j4)))));
evalcond[2]=((2.6e-7)+((sj2*x886))+(((-1.0)*pz*sj1))+((cj1*x885))+((cj1*x884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x887=((7.2463768115942)*sj1);
CheckValue<IkReal> x888=IKPowWithIntegerCheck(cj2,-1);
if(!x888.valid){
continue;
}
if( IKabs(((0.0144927536231884)*(x888.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.547028985507246)+(((7.2463768115942)*cj1*pz))+((py*sj0*x887))+((cj0*px*x887)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0144927536231884)*(x888.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))))))+IKsqr(((0.547028985507246)+(((7.2463768115942)*cj1*pz))+((py*sj0*x887))+((cj0*px*x887))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0144927536231884)*(x888.value)*(((((-500.0)*px*sj0))+(((500.0)*cj0*py))))), ((0.547028985507246)+(((7.2463768115942)*cj1*pz))+((py*sj0*x887))+((cj0*px*x887))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x889=IKsin(j4);
IkReal x890=(cj0*px);
IkReal x891=(py*sj0);
IkReal x892=((0.138)*x889);
evalcond[0]=((((-1.0)*cj2*x892))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((sj1*x891))+((sj1*x890))+((cj1*pz))+(((-0.138)*(IKcos(j4)))));
evalcond[2]=((2.6e-7)+((sj2*x892))+(((-1.0)*pz*sj1))+((cj1*x890))+((cj1*x891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x901=IKPowWithIntegerCheck(cj3,-1);
if(!x901.valid){
continue;
}
IkReal x893=x901.value;
IkReal x894=((500.0)*cj3);
IkReal x895=(py*sj0);
IkReal x896=(cj2*sj3);
IkReal x897=((0.0144927536231884)*x893);
IkReal x898=((500.0)*sj1);
IkReal x899=((500.0)*cj1*pz);
IkReal x900=(cj0*px*x898);
CheckValue<IkReal> x902=IKPowWithIntegerCheck(sj2,-1);
if(!x902.valid){
continue;
}
if( IKabs((x897*(x902.value)*(((((-1.0)*x896*x900))+(((-75.95)*x896))+(((-1.0)*cj1*x894*x895))+(((-1.0)*x896*x899))+(((-0.00013)*cj3))+(((-1.0)*cj0*cj1*px*x894))+((pz*sj1*x894))+(((-1.0)*x895*x896*x898)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x897*(((-75.95)+(((-1.0)*x895*x898))+(((-1.0)*x900))+(((-1.0)*x899))+(((-38.205)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x897*(x902.value)*(((((-1.0)*x896*x900))+(((-75.95)*x896))+(((-1.0)*cj1*x894*x895))+(((-1.0)*x896*x899))+(((-0.00013)*cj3))+(((-1.0)*cj0*cj1*px*x894))+((pz*sj1*x894))+(((-1.0)*x895*x896*x898))))))+IKsqr((x897*(((-75.95)+(((-1.0)*x895*x898))+(((-1.0)*x900))+(((-1.0)*x899))+(((-38.205)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x897*(x902.value)*(((((-1.0)*x896*x900))+(((-75.95)*x896))+(((-1.0)*cj1*x894*x895))+(((-1.0)*x896*x899))+(((-0.00013)*cj3))+(((-1.0)*cj0*cj1*px*x894))+((pz*sj1*x894))+(((-1.0)*x895*x896*x898))))), (x897*(((-75.95)+(((-1.0)*x895*x898))+(((-1.0)*x900))+(((-1.0)*x899))+(((-38.205)*cj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x903=IKcos(j4);
IkReal x904=IKsin(j4);
IkReal x905=(cj0*px);
IkReal x906=(sj2*sj3);
IkReal x907=((0.138)*cj2);
IkReal x908=(py*sj0);
IkReal x909=((0.138)*x903);
evalcond[0]=((0.1519)+((cj3*x909))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x908))+((sj1*x905)));
evalcond[1]=((((-0.07641)*x906))+(((-1.0)*x904*x907))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x906*x909)));
evalcond[2]=((2.6e-7)+((cj1*x905))+((cj1*x908))+(((-0.07641)*cj2*sj3))+(((-1.0)*pz*sj1))+(((0.138)*sj2*x904))+(((-1.0)*sj3*x903*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x917=IKPowWithIntegerCheck(cj3,-1);
if(!x917.valid){
continue;
}
IkReal x910=x917.value;
IkReal x911=((500.0)*py);
IkReal x912=(sj0*sj1);
IkReal x913=((0.0144927536231884)*x910);
IkReal x914=(sj2*sj3);
IkReal x915=((500.0)*cj1*pz);
IkReal x916=((500.0)*cj0*px*sj1);
CheckValue<IkReal> x918=IKPowWithIntegerCheck(cj2,-1);
if(!x918.valid){
continue;
}
if( IKabs((x913*(x918.value)*(((((-500.0)*cj3*px*sj0))+((x914*x916))+((x914*x915))+((cj0*cj3*x911))+(((75.95)*x914))+((x911*x912*x914)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x913*(((-75.95)+(((-1.0)*x915))+(((-1.0)*x916))+(((-38.205)*cj3))+(((-1.0)*x911*x912)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x913*(x918.value)*(((((-500.0)*cj3*px*sj0))+((x914*x916))+((x914*x915))+((cj0*cj3*x911))+(((75.95)*x914))+((x911*x912*x914))))))+IKsqr((x913*(((-75.95)+(((-1.0)*x915))+(((-1.0)*x916))+(((-38.205)*cj3))+(((-1.0)*x911*x912))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x913*(x918.value)*(((((-500.0)*cj3*px*sj0))+((x914*x916))+((x914*x915))+((cj0*cj3*x911))+(((75.95)*x914))+((x911*x912*x914))))), (x913*(((-75.95)+(((-1.0)*x915))+(((-1.0)*x916))+(((-38.205)*cj3))+(((-1.0)*x911*x912))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x919=IKcos(j4);
IkReal x920=IKsin(j4);
IkReal x921=(cj0*px);
IkReal x922=(sj2*sj3);
IkReal x923=((0.138)*cj2);
IkReal x924=(py*sj0);
IkReal x925=((0.138)*x919);
evalcond[0]=((0.1519)+((sj1*x921))+((sj1*x924))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x925)));
evalcond[1]=((((-1.0)*x920*x923))+(((-0.07641)*x922))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x922*x925)));
evalcond[2]=((2.6e-7)+(((0.138)*sj2*x920))+(((-0.07641)*cj2*sj3))+(((-1.0)*sj3*x919*x923))+(((-1.0)*pz*sj1))+((cj1*x924))+((cj1*x921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x926=(cj0*px);
IkReal x927=(py*sj0);
IkReal x928=((7.2463768115942)*sj2);
IkReal x929=(pz*sj1);
IkReal x930=(px*sj0);
IkReal x931=((7.2463768115942)*cj2);
IkReal x932=((500.0)*sj2);
IkReal x933=(cj0*py);
IkReal x934=((500.0)*cj1*cj2);
CheckValue<IkReal> x935=IKPowWithIntegerCheck(sj3,-1);
if(!x935.valid){
continue;
}
if( IKabs(((((-1.0)*x930*x931))+((x928*x929))+(((-1.0)*cj1*x926*x928))+(((-1.88405797101449e-6)*sj2))+((x931*x933))+(((-1.0)*cj1*x927*x928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0144927536231884)*(x935.value)*(((((-500.0)*cj2*x929))+(((-1.0)*x930*x932))+(((-38.205)*sj3))+((x927*x934))+(((0.00013)*cj2))+((x926*x934))+((x932*x933)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x930*x931))+((x928*x929))+(((-1.0)*cj1*x926*x928))+(((-1.88405797101449e-6)*sj2))+((x931*x933))+(((-1.0)*cj1*x927*x928))))+IKsqr(((0.0144927536231884)*(x935.value)*(((((-500.0)*cj2*x929))+(((-1.0)*x930*x932))+(((-38.205)*sj3))+((x927*x934))+(((0.00013)*cj2))+((x926*x934))+((x932*x933))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x930*x931))+((x928*x929))+(((-1.0)*cj1*x926*x928))+(((-1.88405797101449e-6)*sj2))+((x931*x933))+(((-1.0)*cj1*x927*x928))), ((0.0144927536231884)*(x935.value)*(((((-500.0)*cj2*x929))+(((-1.0)*x930*x932))+(((-38.205)*sj3))+((x927*x934))+(((0.00013)*cj2))+((x926*x934))+((x932*x933))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x936=IKcos(j4);
IkReal x937=IKsin(j4);
IkReal x938=(cj0*px);
IkReal x939=(sj2*sj3);
IkReal x940=((0.138)*cj2);
IkReal x941=(py*sj0);
IkReal x942=((0.138)*x936);
evalcond[0]=((0.1519)+((sj1*x941))+((sj1*x938))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x942)));
evalcond[1]=((((-1.0)*x939*x942))+(((-0.07641)*x939))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x937*x940)));
evalcond[2]=((2.6e-7)+(((0.138)*sj2*x937))+(((-0.07641)*cj2*sj3))+((cj1*x941))+(((-1.0)*pz*sj1))+(((-1.0)*sj3*x936*x940))+((cj1*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
static inline bool checkconsistency12(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 11; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-6*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[0]-Breal[1]) < tol && IKabs(Breal[0]*Breal[2]-Breal[3]) < tol && IKabs(Breal[1]*Breal[2]-Breal[4]) < tol && IKabs(Breal[2]*Breal[2]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol && IKabs(Breal[1]*Breal[5]-Breal[7]) < tol && IKabs(Breal[2]*Breal[5]-Breal[8]) < tol && IKabs(Breal[0]*Breal[8]-Breal[9]) < tol && IKabs(Breal[1]*Breal[8]-Breal[10]) < tol;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - up1 (8481f72265981a5dedb4b96b9342d614)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
