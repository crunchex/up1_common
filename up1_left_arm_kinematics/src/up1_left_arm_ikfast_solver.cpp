/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-08-03 19:09:10.597104
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[2]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.99999999995)*x0);
x11=((9.9999999995e-6)*x1);
x12=((0.866025504730542)*x9);
x13=((0.499999825156179)*x9);
x14=((0.12)*x2);
x15=(x2*x3);
x16=(x6*x7);
x17=(x3*x6);
x18=(x2*x7);
x19=((-0.12)*x4);
x20=(x3*x4);
x21=((((-1.0)*x10))+x11);
x22=((((-1.0)*x11))+x10);
x23=((((0.99999999995)*x1))+(((9.9999999995e-6)*x0)));
x24=((-1.0)*x23);
x25=((((1.51899999992405e-6)*x0))+(((0.151899999992405)*x1)));
x26=((((0.0764099999961795)*x1))+(((7.64099999961795e-7)*x0)));
x27=((-0.12)*x3*x5);
x28=(x5*x7*x8);
x29=((0.07641)*x21);
x30=(x21*x5);
x31=(x24*x3);
x32=((-0.12)*x24);
x33=(x23*x5);
x34=(x25*x7);
x35=((((-0.12)*x17))+(((-1.0)*x14*x4*x7)));
x36=(x33+((x20*x21)));
x37=(x30+((x20*x24)));
x38=(((x29*x5))+(((0.07641)*x20*x24)));
x39=(x37*x6);
x40=(((x19*x22))+((x24*x27)));
x41=(x2*x38);
x42=(x40*x8);
x43=((((0.12)*x16*x23))+((x14*x37)));
x44=(x43*x9);
eetrans[0]=((0.0053)+((x16*(((((0.0764099999961795)*x0))+(((-7.64099999961795e-7)*x1))))))+((x8*((((x21*x27))+((x19*x24))))))+((x7*(((((-1.51899999992405e-6)*x1))+(((0.151899999992405)*x0))))))+((x9*(((((0.12)*x16*x22))+((x14*x36))))))+((x2*(((((0.07641)*x33))+((x20*x29)))))));
eetrans[1]=((0.109039987694492)+(((0.0382049866401836)*x17))+(((-1.0)*x12*x43))+(((-0.866025504730542)*x16*x26))+(((-0.866025504730542)*x41))+(((-0.866025504730542)*x42))+(((-0.0599999790187414)*x28))+(((-0.866025504730542)*x34))+(((0.0759499734412235)*x3))+(((0.0382049866401836)*x18*x4))+(((-1.0)*x13*x35)));
eetrans[2]=((0.131350875022936)+(((0.0661730088164608)*x17))+(((-1.0)*x12*x35))+(((0.499999825156179)*x16*x26))+((x13*x43))+(((0.0661730088164608)*x18*x4))+(((-0.103923060567665)*x28))+(((0.499999825156179)*x41))+(((0.499999825156179)*x42))+(((0.499999825156179)*x34))+(((0.131549274168569)*x3)));
eerot[0]=(((x18*x21))+((x36*x6)));
eerot[1]=((((-0.499999825156179)*x15))+(((-0.866025504730542)*x39))+(((0.499999825156179)*x16*x4))+(((-0.866025504730542)*x18*x24)));
eerot[2]=((((0.866025504730542)*x16*x4))+(((0.499999825156179)*x18*x24))+(((-0.866025504730542)*x15))+(((0.499999825156179)*x39)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((-0.0053)+px);
new_r01=((((-0.866025504730542)*r01))+(((0.499999825156179)*r02)));
new_py=((0.0287559958333556)+(((-0.866025504730542)*py))+(((0.499999825156179)*pz)));
new_r02=((((-0.866025504730542)*r02))+(((-0.499999825156179)*r01)));
new_pz=((0.168273182620814)+(((-0.866025504730542)*pz))+(((-0.499999825156179)*py)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[162], zeror[48];
int numroots;;
IkReal x45=((9.9999999995e-6)*r00);
IkReal x46=((0.99999999995)*r01);
IkReal x47=pz*pz;
IkReal x48=py*py;
IkReal x49=px*px;
IkReal x50=((1.74145177191293e-8)*r01);
IkReal x51=((0.00174145177191293)*r00);
IkReal x52=((0.0183384)*pz);
IkReal x53=((1.74145177191293e-8)*r00);
IkReal x54=((0.00174145177191293)*r01);
IkReal x55=(px*r00);
IkReal x56=(pz*r02);
IkReal x57=(py*r01);
IkReal x58=((0.1519)*r02);
IkReal x59=((0.00278560295986072)*r00);
IkReal x60=((2.78560295986072e-8)*r01);
IkReal x61=((0.036456)*pz);
IkReal x62=((0.0729119999963544)*px);
IkReal x63=((7.29119999963544e-7)*py);
IkReal x64=((0.00557120592)*r02);
IkReal x65=((0.00557120591972144)*r01);
IkReal x66=((5.57120591972144e-8)*r00);
IkReal x67=((0.00283512189985824)*r01);
IkReal x68=((2.83512189985824e-8)*r00);
IkReal x69=((5.67024379971649e-8)*r01);
IkReal x70=((0.00567024379971649)*r00);
IkReal x71=((0.003796214628)*r02);
IkReal x72=((0.0183383999990831)*px);
IkReal x73=((1.83383999990831e-7)*py);
IkReal x74=((0.0366768)*pz);
IkReal x75=((7.59242925562038e-8)*r01);
IkReal x76=((0.00759242925562038)*r00);
IkReal x77=((3.9999999998)*r01);
IkReal x78=((3.9999999998e-5)*r00);
IkReal x79=((0.00348290354382585)*r01);
IkReal x80=((3.48290354382585e-8)*r00);
IkReal x81=((3.48290354382585e-8)*r01);
IkReal x82=((0.00348290354382585)*r00);
IkReal x83=((1.11424118394429e-7)*r01);
IkReal x84=((0.0111424118394429)*r00);
IkReal x85=((0.011340487599433)*r01);
IkReal x86=((1.1340487599433e-7)*r00);
IkReal x87=((0.0366767999981662)*py);
IkReal x88=((3.66767999981662e-7)*px);
IkReal x89=(px*r02);
IkReal x90=(pz*r01);
IkReal x91=(px*py);
IkReal x92=((2.39999999988e-6)*r01);
IkReal x93=((1.9999999999)*r00);
IkReal x94=((0.479999999976)*r01);
IkReal x95=(py*r02);
IkReal x96=(pz*r00);
IkReal x97=(py*r00);
IkReal x98=(px*r01);
IkReal x99=((1.9999999999e-5)*r01);
IkReal x100=((((-1.0)*x45))+x46);
IkReal x101=((((-1.0)*x46))+x45);
IkReal x102=((0.0364559999981772)*x89);
IkReal x103=((3.64559999981772e-7)*x95);
IkReal x104=((0.0364559999981772)*x96);
IkReal x105=((3.64559999981772e-7)*x90);
IkReal x106=((0.0364559999981772)*x90);
IkReal x107=((3.64559999981772e-7)*x89);
IkReal x108=((0.0364559999981772)*x95);
IkReal x109=((3.64559999981772e-7)*x96);
IkReal x110=(r02*x73);
IkReal x111=(r02*x72);
IkReal x112=((0.12)*x49);
IkReal x113=((0.0183383999990831)*x96);
IkReal x114=((0.12)*x47);
IkReal x115=((0.12)*x48);
IkReal x116=((1.83383999990831e-7)*x90);
IkReal x117=((3.66767999981662e-7)*x96);
IkReal x118=(r02*x87);
IkReal x119=((0.0366767999981662)*x90);
IkReal x120=(r02*x88);
IkReal x121=((0.6076)*x98);
IkReal x122=((0.6076)*x97);
IkReal x123=((0.30379999998481)*x95);
IkReal x124=((3.0379999998481e-6)*x96);
IkReal x125=((0.30379999998481)*x90);
IkReal x126=((3.0379999998481e-6)*x89);
IkReal x127=((0.60759999996962)*x89);
IkReal x128=((6.0759999996962e-6)*x95);
IkReal x129=((6.0759999996962e-6)*x90);
IkReal x130=((0.60759999996962)*x96);
IkReal x131=((0.036456)*x56);
IkReal x132=((0.036456)*x57);
IkReal x133=((0.036456)*x55);
IkReal x134=(x88+(((-1.0)*x87)));
IkReal x135=((0.0729119999963544)*x95);
IkReal x136=((7.29119999963544e-7)*x96);
IkReal x137=((7.29119999963544e-7)*x89);
IkReal x138=((0.0729119999963544)*x90);
IkReal x139=(r02*x63);
IkReal x140=(r02*x62);
IkReal x141=((7.29119999963544e-7)*x90);
IkReal x142=((0.0729119999963544)*x96);
IkReal x143=((((-1.45823999992709e-6)*px))+(((0.145823999992709)*py)));
IkReal x144=((7.33535999963323e-7)*x90);
IkReal x145=((0.0733535999963323)*x96);
IkReal x146=((0.0733535999963323)*x89);
IkReal x147=((7.33535999963323e-7)*x95);
IkReal x148=((1.21519999993924)*x95);
IkReal x149=((1.21519999993924e-5)*x96);
IkReal x150=((1.21519999993924)*x90);
IkReal x151=((1.21519999993924e-5)*x89);
IkReal x152=(x87+(((-1.0)*x88)));
IkReal x153=((-4.0)*r02);
IkReal x154=((0.00278560296)+x52);
IkReal x155=((-0.001741451772)+x61);
IkReal x156=(r02*x47);
IkReal x157=(r01*x48);
IkReal x158=(r00*x49);
IkReal x159=(r00*x47);
IkReal x160=(r01*x49);
IkReal x161=(r00*x48);
IkReal x162=(r02*x48);
IkReal x163=(r01*x47);
IkReal x164=(r02*x49);
IkReal x165=(x99+x93);
IkReal x166=((1.19999999994e-6)*x163);
IkReal x167=((0.119999999994)*x159);
IkReal x168=((0.119999999994)*x161);
IkReal x169=((1.19999999994e-6)*x160);
IkReal x170=((1.19999999994e-6)*x157);
IkReal x171=((0.239999999988)*px*x57);
IkReal x172=((0.239999999988)*px*x56);
IkReal x173=((2.39999999988e-6)*py*x56);
IkReal x174=((0.119999999994)*x158);
IkReal x175=((2.39999999988e-6)*py*x55);
IkReal x176=((0.119999999994)*x157);
IkReal x177=((1.19999999994e-6)*x161);
IkReal x178=((0.239999999988)*py*x55);
IkReal x179=((0.239999999988)*py*x56);
IkReal x180=((1.19999999994e-6)*x159);
IkReal x181=((0.119999999994)*x160);
IkReal x182=((0.119999999994)*x163);
IkReal x183=((2.39999999988e-6)*px*x56);
IkReal x184=((1.19999999994e-6)*x158);
IkReal x185=((2.39999999988e-6)*px*x57);
IkReal x186=((1.9999999999e-5)*px*x57);
IkReal x187=(x46*x49);
IkReal x188=((1.9999999999e-5)*px*x56);
IkReal x189=(x46*x47);
IkReal x190=(x45*x49);
IkReal x191=((1.9999999999)*py*x56);
IkReal x192=(x45*x47);
IkReal x193=(x46*x48);
IkReal x194=(x45*x48);
IkReal x195=((1.9999999999)*py*x55);
IkReal x196=(x48*x93);
IkReal x197=(x47*x93);
IkReal x198=(x49*x99);
IkReal x199=(x47*x99);
IkReal x200=(x49*x93);
IkReal x201=((3.9999999998)*px*x56);
IkReal x202=(x48*x99);
IkReal x203=((3.9999999998e-5)*py*x56);
IkReal x204=((3.9999999998)*px*x57);
IkReal x205=((3.9999999998e-5)*py*x55);
IkReal x206=((0.24)*pz*x57);
IkReal x207=(r02*x114);
IkReal x208=((0.24)*pz*x55);
IkReal x209=(r02*x112);
IkReal x210=(r02*x115);
IkReal x211=((0.239999999988)*x161);
IkReal x212=((0.239999999988)*x159);
IkReal x213=(x49*x92);
IkReal x214=(x47*x92);
IkReal x215=(x48*x92);
IkReal x216=((4.79999999976e-6)*py*x56);
IkReal x217=((0.239999999988)*x158);
IkReal x218=((0.479999999976)*px*x56);
IkReal x219=((4.79999999976e-6)*py*x55);
IkReal x220=((0.479999999976)*px*x57);
IkReal x221=((-1.0)*x165);
IkReal x222=((0.239999999988)*x160);
IkReal x223=((0.239999999988)*x163);
IkReal x224=((4.79999999976e-6)*px*x56);
IkReal x225=((4.79999999976e-6)*px*x57);
IkReal x226=((2.39999999988e-6)*x158);
IkReal x227=((2.39999999988e-6)*x161);
IkReal x228=((0.479999999976)*py*x55);
IkReal x229=((0.479999999976)*py*x56);
IkReal x230=((0.239999999988)*x157);
IkReal x231=((2.39999999988e-6)*x159);
IkReal x232=((7.9999999996e-5)*px*x57);
IkReal x233=(x49*x78);
IkReal x234=(x49*x77);
IkReal x235=(x47*x77);
IkReal x236=((7.9999999996e-5)*px*x56);
IkReal x237=(x48*x78);
IkReal x238=((7.9999999996)*py*x55);
IkReal x239=(x48*x77);
IkReal x240=((7.9999999996)*py*x56);
IkReal x241=(x47*x78);
IkReal x242=((((7.33535999963323e-7)*py))+(((0.0733535999963323)*px)));
IkReal x243=(x73+x72);
IkReal x244=(x59+x60);
IkReal x245=(x82+x81);
IkReal x246=(x83+x84);
IkReal x247=(x76+x75);
IkReal x248=(x62+x63);
IkReal x249=(x124+x123);
IkReal x250=(x113+x116);
IkReal x251=(x151+x150);
IkReal x252=(x127+x128);
IkReal x253=(x144+x145);
IkReal x254=(x146+x147);
IkReal x255=(x137+x138);
IkReal x256=(x135+x136);
IkReal x257=(x117+x118);
IkReal x258=(x111+x110);
IkReal x259=(x126+x125);
IkReal x260=(x140+x139);
IkReal x261=(x148+x149);
IkReal x262=(x120+x119);
IkReal x263=(x130+x129);
IkReal x264=(x55+x57+x56);
IkReal x265=(x141+x142);
IkReal x266=(x106+x107);
IkReal x267=(x108+x109);
IkReal x268=(x257+x66);
IkReal x269=(x262+x65);
IkReal x270=(x262+x66);
IkReal x271=(x257+x65);
IkReal x272=(x210+x209);
IkReal x273=(x112+x115+x114);
IkReal x274=(x131+x133+x132);
IkReal x275=(x207+x206+x208+x71);
IkReal x276=(x269+(((-1.0)*x268)));
IkReal x277=(x271+(((-1.0)*x270)));
IkReal x278=(x211+x212+x213+x214);
IkReal x279=(x199+x198+x197+x196+x70+x69);
IkReal x280=(x190+x186+x187+x188+x189+x67);
IkReal x281=(x232+x233+x236+x234+x235+x85);
IkReal x282=(x223+x222+x225+x224+x226+x79);
IkReal x283=(x229+x228+x227+x230+x231+x80);
IkReal x284=(x193+x192+x191+x195+x194+x68);
IkReal x285=(x238+x239+x237+x241+x240+x86);
IkReal x286=(x179+x178+x177+x176+x180+x53);
IkReal x287=(x184+x185+x181+x182+x183+x54);
IkReal x288=(x205+x204+x203+x202+x201+x200);
IkReal x289=(x215+x216+x217+x218+x219+x220);
IkReal x290=(x263+x279);
IkReal x291=(x252+x279);
IkReal x292=(x168+x169+x166+x167+x104+x105+x51+x50);
IkReal x293=(x249+x284);
IkReal x294=(x259+x280);
IkReal x295=(x259+x284);
IkReal x296=(x249+x280);
IkReal x297=(x252+x288);
IkReal x298=(x263+x288);
IkReal x299=(x171+x170+x173+x172+x175+x174+x102+x103);
IkReal x300=((((-1.0)*x48*x94))+(((9.59999999952e-6)*px*x57))+(((9.59999999952e-6)*px*x56))+(((-0.0151848585112408)*r01))+(((4.79999999976e-6)*x158))+((x49*x94))+(((1.51848585112408e-7)*r00))+(((-4.79999999976e-6)*x159))+(((-4.79999999976e-6)*x161))+((x47*x94))+(((-0.959999999952)*py*x55))+(((-0.959999999952)*py*x56)));
IkReal x301=((((-1.0)*x290))+x297);
IkReal x302=((((-1.0)*x298))+x291);
op[0]=x100;
op[1]=x221;
op[2]=x101;
op[3]=0;
op[4]=x153;
op[5]=0;
op[6]=x100;
op[7]=x165;
op[8]=x101;
op[9]=((((-1.0)*x292))+x154+x299);
op[10]=(x267+x286+(((-1.0)*x287))+(((-1.0)*x266)));
op[11]=0;
op[12]=((((0.24)*x156))+(((-3.66767999981662e-7)*py))+(((0.48)*pz*x57))+(((0.48)*pz*x55))+(((-0.003482903544)*r02))+(((-0.0366767999981662)*px))+(((-0.24)*x162))+(((-0.24)*x164)));
op[13]=((((0.072912)*x98))+(((-0.072912)*x97)));
op[14]=0;
op[15]=((0.00278560296)+(((-1.0)*x170))+(((-1.0)*x171))+(((-1.0)*x174))+(((-1.0)*x175))+(((-1.0)*x172))+(((-1.0)*x173))+(((-1.0)*x105))+(((-1.0)*x104))+x168+x169+x166+x167+x102+x103+x51+x50+(((-1.0)*x52)));
op[16]=(x266+x286+(((-1.0)*x287))+(((-1.0)*x267)));
op[17]=0;
op[18]=(x264+x58);
op[19]=0;
op[20]=0;
op[21]=((((-0.30379999998481)*r00))+(((-3.0379999998481e-6)*r01)));
op[22]=0;
op[23]=0;
op[24]=(x264+(((-1.0)*x58)));
op[25]=0;
op[26]=0;
op[27]=((-0.001741451772)+x250+x244+(((-1.0)*x273))+(((-1.0)*x61))+(((-1.0)*x258)));
op[28]=x276;
op[29]=((-0.001741451772)+x258+(((-1.0)*x273))+(((-1.0)*x244))+(((-1.0)*x61))+(((-1.0)*x250)));
op[30]=(x248+x64);
op[31]=((((-0.0733536)*x98))+(((0.0733536)*x97)));
op[32]=(x248+(((-1.0)*x64)));
op[33]=(x155+x250+(((-1.0)*x273))+(((-1.0)*x244))+(((-1.0)*x258)));
op[34]=x277;
op[35]=(x155+x258+x244+(((-1.0)*x273))+(((-1.0)*x250)));
op[36]=((((-1.0)*x293))+x294);
op[37]=x301;
op[38]=((((-1.0)*x294))+x293);
op[39]=((((-1.0)*x121))+x122);
op[40]=((((4.0)*x156))+(((-0.0113404876)*r02))+(((-4.0)*x162))+(((-4.0)*x164))+(((8.0)*pz*x57))+(((8.0)*pz*x55)));
op[41]=((((-1.0)*x122))+x121);
op[42]=((((-1.0)*x295))+x296);
op[43]=x302;
op[44]=((((-1.0)*x296))+x295);
op[45]=(x274+x275+(((-1.0)*x272))+(((-1.0)*x243)));
op[46]=x134;
op[47]=(x274+x275+x243+(((-1.0)*x272)));
op[48]=((((-1.0)*x74))+x278+(((-1.0)*x289))+(((-1.0)*x247)));
op[49]=0;
op[50]=(x278+x74+(((-1.0)*x289))+(((-1.0)*x247)));
op[51]=(x274+x272+x243+(((-1.0)*x275)));
op[52]=x134;
op[53]=(x274+x272+(((-1.0)*x275))+(((-1.0)*x243)));
op[54]=x221;
op[55]=((((-1.0)*x77))+x78);
op[56]=x165;
op[57]=0;
op[58]=0;
op[59]=0;
op[60]=x221;
op[61]=((((-1.0)*x78))+x77);
op[62]=x165;
op[63]=(x256+x283+(((-1.0)*x282))+(((-1.0)*x255)));
op[64]=(x265+x278+x245+(((-1.0)*x289))+(((-1.0)*x260)));
op[65]=0;
op[66]=((((-0.0733535999963323)*py))+(((7.33535999963323e-7)*px)));
op[67]=0;
op[68]=0;
op[69]=(x256+x282+(((-1.0)*x283))+(((-1.0)*x255)));
op[70]=(x260+x278+x245+(((-1.0)*x289))+(((-1.0)*x265)));
op[71]=0;
op[72]=0;
op[73]=0;
op[74]=0;
op[75]=((((-0.60759999996962)*r01))+(((6.0759999996962e-6)*r00)));
op[76]=0;
op[77]=0;
op[78]=0;
op[79]=0;
op[80]=0;
op[81]=x276;
op[82]=(x254+(((-1.0)*x246))+(((-1.0)*x253)));
op[83]=(x268+(((-1.0)*x269)));
op[84]=x143;
op[85]=0;
op[86]=x143;
op[87]=(x270+(((-1.0)*x271)));
op[88]=(x253+(((-1.0)*x246))+(((-1.0)*x254)));
op[89]=x277;
op[90]=x301;
op[91]=(x261+x285+(((-1.0)*x281))+(((-1.0)*x251)));
op[92]=((((-1.0)*x297))+x290);
op[93]=0;
op[94]=0;
op[95]=0;
op[96]=((((-1.0)*x291))+x298);
op[97]=(x261+x281+(((-1.0)*x285))+(((-1.0)*x251)));
op[98]=x302;
op[99]=x134;
op[100]=x242;
op[101]=x152;
op[102]=x300;
op[103]=0;
op[104]=x300;
op[105]=x152;
op[106]=x242;
op[107]=x134;
op[108]=x101;
op[109]=x165;
op[110]=x100;
op[111]=0;
op[112]=x153;
op[113]=0;
op[114]=x101;
op[115]=x221;
op[116]=x100;
op[117]=((((-1.0)*x299))+x154+x292);
IkReal x303=px*px;
IkReal x304=py*py;
IkReal x305=pz*pz;
IkReal x306=((0.00174145177191293)*r01);
IkReal x307=((1.74145177191293e-8)*r00);
IkReal x308=(px*r00);
IkReal x309=(pz*r02);
IkReal x310=(py*r01);
IkReal x311=((0.1519)*r02);
IkReal x312=((0.00278560295986072)*r00);
IkReal x313=((2.78560295986072e-8)*r01);
IkReal x314=((0.036456)*pz);
IkReal x315=((0.0729119999963544)*px);
IkReal x316=((0.00557120592)*r02);
IkReal x317=((7.29119999963544e-7)*py);
IkReal x318=((5.57120591972144e-8)*r00);
IkReal x319=((0.00557120591972144)*r01);
IkReal x320=((2.83512189985824e-8)*r00);
IkReal x321=((0.00283512189985824)*r01);
IkReal x322=((5.67024379971649e-8)*r01);
IkReal x323=((0.00567024379971649)*r00);
IkReal x324=((0.003796214628)*r02);
IkReal x325=((0.0183383999990831)*px);
IkReal x326=((1.83383999990831e-7)*py);
IkReal x327=((7.59242925562038e-8)*r01);
IkReal x328=((0.00759242925562038)*r00);
IkReal x329=((0.0366768)*pz);
IkReal x330=(px*r02);
IkReal x331=((0.48)*pz);
IkReal x332=((2.39999999988e-6)*px);
IkReal x333=((3.9999999998e-5)*py);
IkReal x334=(py*r00);
IkReal x335=((0.479999999976)*px);
IkReal x336=((3.9999999998)*px);
IkReal x337=(py*r02);
IkReal x338=(pz*r00);
IkReal x339=(px*r01);
IkReal x340=(pz*r01);
IkReal x341=((1.9999999999e-5)*px);
IkReal x342=((0.239999999988)*px);
IkReal x343=((0.0364559999981772)*x337);
IkReal x344=((3.64559999981772e-7)*x338);
IkReal x345=((0.0364559999981772)*x340);
IkReal x346=((3.64559999981772e-7)*x330);
IkReal x347=((0.0183383999990831)*x338);
IkReal x348=((1.83383999990831e-7)*x340);
IkReal x349=((0.12)*x303);
IkReal x350=((0.12)*x305);
IkReal x351=((0.12)*x304);
IkReal x352=(r02*x326);
IkReal x353=(r02*x325);
IkReal x354=((0.0366767999981662)*x340);
IkReal x355=((3.66767999981662e-7)*x330);
IkReal x356=((3.66767999981662e-7)*x338);
IkReal x357=((0.0366767999981662)*x337);
IkReal x358=((0.6076)*x339);
IkReal x359=((0.6076)*x334);
IkReal x360=((0.30379999998481)*x340);
IkReal x361=((3.0379999998481e-6)*x330);
IkReal x362=((0.30379999998481)*x337);
IkReal x363=((3.0379999998481e-6)*x338);
IkReal x364=((6.0759999996962e-6)*x340);
IkReal x365=((0.60759999996962)*x338);
IkReal x366=((0.60759999996962)*x330);
IkReal x367=((6.0759999996962e-6)*x337);
IkReal x368=((0.036456)*x309);
IkReal x369=((0.036456)*x310);
IkReal x370=((0.036456)*x308);
IkReal x371=((((0.0366767999981662)*py))+(((-3.66767999981662e-7)*px)));
IkReal x372=((-0.001741451772)+x314);
IkReal x373=(r02*x305);
IkReal x374=(r01*x304);
IkReal x375=(r00*x305);
IkReal x376=(r01*x303);
IkReal x377=(r02*x304);
IkReal x378=(r00*x304);
IkReal x379=(r01*x305);
IkReal x380=(r00*x303);
IkReal x381=(r02*x303);
IkReal x382=((0.119999999994)*x376);
IkReal x383=((0.119999999994)*x379);
IkReal x384=(x309*x332);
IkReal x385=((1.19999999994e-6)*x380);
IkReal x386=(x310*x332);
IkReal x387=((0.119999999994)*x374);
IkReal x388=((1.19999999994e-6)*x378);
IkReal x389=((0.239999999988)*py*x308);
IkReal x390=((0.239999999988)*py*x309);
IkReal x391=((1.19999999994e-6)*x375);
IkReal x392=((1.9999999999)*py*x309);
IkReal x393=((9.9999999995e-6)*x375);
IkReal x394=((0.99999999995)*x374);
IkReal x395=((9.9999999995e-6)*x378);
IkReal x396=((1.9999999999)*py*x308);
IkReal x397=(x310*x341);
IkReal x398=((0.99999999995)*x376);
IkReal x399=(x309*x341);
IkReal x400=((0.99999999995)*x379);
IkReal x401=((9.9999999995e-6)*x380);
IkReal x402=((1.9999999999)*x380);
IkReal x403=(x309*x336);
IkReal x404=((1.9999999999e-5)*x374);
IkReal x405=(x309*x333);
IkReal x406=(x310*x336);
IkReal x407=(x308*x333);
IkReal x408=((1.9999999999)*x378);
IkReal x409=((1.9999999999)*x375);
IkReal x410=((1.9999999999e-5)*x376);
IkReal x411=((1.9999999999e-5)*x379);
IkReal x412=((0.24)*pz*x310);
IkReal x413=(r02*x350);
IkReal x414=((0.24)*pz*x308);
IkReal x415=(r02*x349);
IkReal x416=(r02*x351);
IkReal x417=((2.39999999988e-6)*x374);
IkReal x418=((4.79999999976e-6)*py*x309);
IkReal x419=((0.239999999988)*x380);
IkReal x420=(x309*x335);
IkReal x421=((4.79999999976e-6)*py*x308);
IkReal x422=(x310*x335);
IkReal x423=((0.239999999988)*x378);
IkReal x424=((0.239999999988)*x375);
IkReal x425=((2.39999999988e-6)*x376);
IkReal x426=((2.39999999988e-6)*x379);
IkReal x427=(x325+x326);
IkReal x428=(x313+x312);
IkReal x429=(x315+x317);
IkReal x430=(x362+x363);
IkReal x431=(x347+x348);
IkReal x432=(x366+x367);
IkReal x433=(x357+x356);
IkReal x434=(x353+x352);
IkReal x435=(x360+x361);
IkReal x436=(x355+x354);
IkReal x437=(x364+x365);
IkReal x438=(x308+x309+x310);
IkReal x439=(x346+x345);
IkReal x440=(x343+x344);
IkReal x441=(x416+x415);
IkReal x442=(x351+x350+x349);
IkReal x443=(x370+x368+x369);
IkReal x444=(x324+x412+x413+x414);
IkReal x445=(x426+x425+x424+x423);
IkReal x446=(x322+x323+x409+x408+x410+x411);
IkReal x447=(x321+x397+x399+x398+x401+x400);
IkReal x448=(x320+x395+x394+x396+x393+x392);
IkReal x449=(x307+x387+x388+x389+x391+x390);
IkReal x450=(x306+x386+x384+x385+x382+x383);
IkReal x451=(x403+x402+x405+x404+x407+x406);
IkReal x452=(x435+x447);
IkReal x453=(x430+x448);
IkReal x454=(x430+x447);
IkReal x455=(x435+x448);
IkReal x456=(x327+x328+x417+x418+x419+x422+x421+x420);
op[118]=((((-1.0)*x449))+(((-1.0)*x440))+x439+x450);
op[119]=0;
op[120]=((((-0.24)*x377))+(((0.0366767999981662)*px))+((x308*x331))+(((0.24)*x373))+(((-0.003482903544)*r02))+(((-0.24)*x381))+(((3.66767999981662e-7)*py))+((x310*x331)));
op[121]=((((0.072912)*x339))+(((-0.072912)*x334)));
op[122]=0;
op[123]=((0.00278560296)+(((1.19999999994e-6)*x374))+(((-1.74145177191293e-8)*r01))+(((2.39999999988e-6)*py*x309))+(((2.39999999988e-6)*py*x308))+(((-3.64559999981772e-7)*x337))+(((-0.0183384)*pz))+(((-0.0364559999981772)*x330))+(((3.64559999981772e-7)*x340))+(((-0.119999999994)*x375))+(((-0.119999999994)*x378))+(((0.119999999994)*x380))+(((-1.19999999994e-6)*x379))+(((-1.19999999994e-6)*x376))+(((-0.00174145177191293)*r00))+((x310*x342))+((x309*x342))+(((0.0364559999981772)*x338)));
op[124]=((((-1.0)*x449))+(((-1.0)*x439))+x440+x450);
op[125]=0;
op[126]=(x311+x438);
op[127]=0;
op[128]=0;
op[129]=((((0.30379999998481)*r00))+(((3.0379999998481e-6)*r01)));
op[130]=0;
op[131]=0;
op[132]=((((-1.0)*x311))+x438);
op[133]=0;
op[134]=0;
op[135]=((-0.001741451772)+(((-1.0)*x442))+(((-1.0)*x431))+(((-1.0)*x428))+(((-1.0)*x314))+x434);
op[136]=((((-1.0)*x436))+x318+(((-1.0)*x319))+x433);
op[137]=((-0.001741451772)+(((-1.0)*x442))+(((-1.0)*x434))+(((-1.0)*x314))+x428+x431);
op[138]=((((-1.0)*x429))+x316);
op[139]=((((0.0733536)*x334))+(((-0.0733536)*x339)));
op[140]=((((-1.0)*x429))+(((-1.0)*x316)));
op[141]=((((-1.0)*x442))+(((-1.0)*x431))+x372+x428+x434);
op[142]=((((-1.0)*x433))+x318+(((-1.0)*x319))+x436);
op[143]=((((-1.0)*x442))+(((-1.0)*x434))+(((-1.0)*x428))+x372+x431);
op[144]=((((-1.0)*x452))+x453);
op[145]=((((-1.0)*x432))+(((-1.0)*x451))+x437+x446);
op[146]=((((-1.0)*x453))+x452);
op[147]=((((-1.0)*x358))+x359);
op[148]=((((4.0)*x373))+(((-0.0113404876)*r02))+(((8.0)*pz*x310))+(((-4.0)*x381))+(((8.0)*pz*x308))+(((-4.0)*x377)));
op[149]=((((-1.0)*x359))+x358);
op[150]=((((-1.0)*x454))+x455);
op[151]=((((-1.0)*x446))+(((-1.0)*x432))+x437+x451);
op[152]=((((-1.0)*x455))+x454);
op[153]=((((-1.0)*x441))+x427+x444+x443);
op[154]=x371;
op[155]=((((-1.0)*x441))+(((-1.0)*x427))+x444+x443);
op[156]=((((-1.0)*x445))+(((-1.0)*x329))+x456);
op[157]=0;
op[158]=((((-1.0)*x445))+x329+x456);
op[159]=((((-1.0)*x444))+(((-1.0)*x427))+x441+x443);
op[160]=x371;
op[161]=((((-1.0)*x444))+x427+x441+x443);
solvedialyticpoly12qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj1 = zeror[ij0+1], htj2 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj1)||isnan(htj2)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x457=htj0*htj0;
CheckValue<IkReal> x458=IKPowWithIntegerCheck(((1.0)+x457),-1);
if(!x458.valid){
continue;
}
cj0array[numsolutions]=((x458.value)*(((1.0)+(((-1.0)*x457)))));
CheckValue<IkReal> x459=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x459.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x459.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x460=htj1*htj1;
CheckValue<IkReal> x461=IKPowWithIntegerCheck(((1.0)+x460),-1);
if(!x461.valid){
continue;
}
cj1array[numsolutions]=((x461.value)*(((1.0)+(((-1.0)*x460)))));
CheckValue<IkReal> x462=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x462.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x462.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x463=htj2*htj2;
CheckValue<IkReal> x464=IKPowWithIntegerCheck(((1.0)+x463),-1);
if(!x464.valid){
continue;
}
cj2array[numsolutions]=((x464.value)*(((1.0)+(((-1.0)*x463)))));
CheckValue<IkReal> x465=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x465.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x465.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj1 = 1;
_nj2 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij0]-cj2array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij0]-sj2array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij1[1] = 0; _ij2[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

    j2 = j2array[ij0]; cj2 = cj2array[ij0]; sj2 = sj2array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly12qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[24*24]) = {0};
    IkReal IKFAST_ALIGNED16(A[12*12]);
    IkReal IKFAST_ALIGNED16(work[24*24*23]);
    int ipiv[12];
    int info, coeffindex;
    const int worksize=24*24*23;
    const int matrixdim = 12;
    const int matrixdim2 = 24;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 3; ++k) {
            A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 6; ++j) {
            for(int k = 0; k < 9; ++k) {
                IkReal a = matcoeffs[coeffindex+108], b = matcoeffs[coeffindex+54], c = matcoeffs[coeffindex];
                A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 3; ++k) {
                A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[24]);
    IkReal IKFAST_ALIGNED16(wi[24]);
    IkReal IKFAST_ALIGNED16(vr[24*24]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency12(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[3]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[5]/ev[2];
                    rawroots[numroots++] = ev[2]/ev[1];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[9]/ev[6];
                    rawroots[numroots++] = ev[10]/ev[9];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[11]/ev[8];
                    rawroots[numroots++] = ev[11]/ev[10];
                }
            }
        }
    }
}inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x466=(cj1*sj0);
IkReal x467=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((0.99999999995)*r01*x466))+(((9.9999999995e-6)*r01*x467))+(((0.99999999995)*r00*x467))+((r02*sj1))+(((-9.9999999995e-6)*r00*x466)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x468=((9.9999999995e-6)*sj0);
IkReal x469=(r00*sj1);
IkReal x470=((0.99999999995)*cj0);
IkReal x471=(r01*sj1);
IkReal x472=((9.9999999995e-6)*cj0);
IkReal x473=((0.99999999995)*sj0);
if( IKabs((((x468*x469))+(((-1.0)*x469*x470))+((cj1*r02))+(((-1.0)*x471*x472))+(((-1.0)*x471*x473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x470))+((r01*x468))+((r00*x473))+((r00*x472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x468*x469))+(((-1.0)*x469*x470))+((cj1*r02))+(((-1.0)*x471*x472))+(((-1.0)*x471*x473))))+IKsqr(((((-1.0)*r01*x470))+((r01*x468))+((r00*x473))+((r00*x472))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x468*x469))+(((-1.0)*x469*x470))+((cj1*r02))+(((-1.0)*x471*x472))+(((-1.0)*x471*x473))), ((((-1.0)*r01*x470))+((r01*x468))+((r00*x473))+((r00*x472))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x474=((9.9999999995e-6)*sj0);
IkReal x475=(r00*sj1);
IkReal x476=((0.99999999995)*cj0);
IkReal x477=(r01*sj1);
IkReal x478=((9.9999999995e-6)*cj0);
IkReal x479=((0.99999999995)*sj0);
evalcond[0]=((((-1.0)*r00*x478))+(((-1.0)*r00*x479))+(((-1.0)*r01*x474))+(IKcos(j3))+((r01*x476)));
evalcond[1]=((((-1.0)*x477*x478))+(((-1.0)*x477*x479))+(((-1.0)*x475*x476))+((cj1*r02))+(((-1.0)*(IKsin(j3))))+((x474*x475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x480=((9.9999999995e-6)*r00);
IkReal x481=(cj1*sj0);
IkReal x482=(py*sj1);
IkReal x483=((9.9999999995e-6)*cj0);
IkReal x484=(sj0*sj1);
IkReal x485=((0.99999999995)*sj0);
IkReal x486=((0.99999999995)*r01);
IkReal x487=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x486))+(((-1.0)*cj0*x480))+(((-1.0)*r00*x485)));
evalcond[2]=((-1.0)+(((-1.0)*x484*x486))+(((-1.0)*sj1*x487))+((cj1*r02))+((x480*x484))+(((-1.0)*r01*sj1*x483)));
evalcond[3]=(((r02*sj1))+((x481*x486))+(((-1.0)*x480*x481))+((cj1*x487))+((cj1*r01*x483)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x484))+((cj1*pz))+(((-1.0)*x482*x485))+(((-1.0)*x482*x483)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x488=(cj0*py);
IkReal x489=((8.33333333291667e-5)*cj1);
IkReal x490=(px*sj0);
IkReal x491=((8.33333333291667)*cj1);
IkReal x492=(py*sj0);
IkReal x493=(cj0*px);
if( IKabs((((x491*x493))+((x491*x492))+(((-1.0)*x489*x490))+((x488*x489))+(((8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((8.33333333291667)*x490))+(((-8.33333333291667)*x488))+(((8.33333333291667e-5)*x492))+(((8.33333333291667e-5)*x493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x491*x493))+((x491*x492))+(((-1.0)*x489*x490))+((x488*x489))+(((8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((8.33333333291667)*x490))+(((-8.33333333291667)*x488))+(((8.33333333291667e-5)*x492))+(((8.33333333291667e-5)*x493))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x491*x493))+((x491*x492))+(((-1.0)*x489*x490))+((x488*x489))+(((8.33333333333333)*pz*sj1))), ((-0.63675)+(((8.33333333291667)*x490))+(((-8.33333333291667)*x488))+(((8.33333333291667e-5)*x492))+(((8.33333333291667e-5)*x493))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x494=((9.9999999995e-6)*px);
IkReal x495=((9.9999999995e-6)*py);
IkReal x496=((0.99999999995)*px);
IkReal x497=(cj1*sj0);
IkReal x498=(cj0*cj1);
IkReal x499=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((-1.0)*sj0*x495))+(((-1.0)*sj0*x496))+(((0.12)*(IKcos(j4))))+((cj0*x499))+(((-1.0)*cj0*x494)));
evalcond[1]=((((-1.0)*x494*x497))+((x495*x498))+((x496*x498))+((x497*x499))+(((-0.12)*(IKsin(j4))))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x500=((9.9999999995e-6)*r00);
IkReal x501=(cj1*sj0);
IkReal x502=(py*sj1);
IkReal x503=((9.9999999995e-6)*cj0);
IkReal x504=(sj0*sj1);
IkReal x505=((0.99999999995)*sj0);
IkReal x506=((0.99999999995)*r01);
IkReal x507=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x500))+(((-1.0)*r00*x505))+((cj0*x506)));
evalcond[2]=((1.0)+(((-1.0)*sj1*x507))+((x500*x504))+((cj1*r02))+(((-1.0)*x504*x506))+(((-1.0)*r01*sj1*x503)));
evalcond[3]=(((cj1*r01*x503))+((cj1*x507))+((r02*sj1))+((x501*x506))+(((-1.0)*x500*x501)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x502*x503))+(((-1.0)*x502*x505))+((cj1*pz))+(((9.9999999995e-6)*px*x504)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x508=(cj0*py);
IkReal x509=((8.33333333291667e-5)*cj1);
IkReal x510=(px*sj0);
IkReal x511=((8.33333333291667)*cj1);
IkReal x512=(py*sj0);
IkReal x513=(cj0*px);
if( IKabs((((x511*x513))+((x511*x512))+(((8.33333333333333)*pz*sj1))+((x508*x509))+(((-1.0)*x509*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-8.33333333291667e-5)*x513))+(((-8.33333333291667e-5)*x512))+(((8.33333333291667)*x508))+(((-8.33333333291667)*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x511*x513))+((x511*x512))+(((8.33333333333333)*pz*sj1))+((x508*x509))+(((-1.0)*x509*x510))))+IKsqr(((-0.63675)+(((-8.33333333291667e-5)*x513))+(((-8.33333333291667e-5)*x512))+(((8.33333333291667)*x508))+(((-8.33333333291667)*x510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x511*x513))+((x511*x512))+(((8.33333333333333)*pz*sj1))+((x508*x509))+(((-1.0)*x509*x510))), ((-0.63675)+(((-8.33333333291667e-5)*x513))+(((-8.33333333291667e-5)*x512))+(((8.33333333291667)*x508))+(((-8.33333333291667)*x510))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x514=((9.9999999995e-6)*px);
IkReal x515=((9.9999999995e-6)*py);
IkReal x516=((0.99999999995)*px);
IkReal x517=(cj1*sj0);
IkReal x518=(cj0*cj1);
IkReal x519=((0.99999999995)*py);
evalcond[0]=((-0.07641)+((cj0*x519))+(((-0.12)*(IKcos(j4))))+(((-1.0)*sj0*x515))+(((-1.0)*sj0*x516))+(((-1.0)*cj0*x514)));
evalcond[1]=((((-1.0)*x514*x517))+((x517*x519))+((x516*x518))+(((-0.12)*(IKsin(j4))))+((x515*x518))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x520=((9.9999999995e-6)*r00);
IkReal x521=(cj1*sj0);
IkReal x522=((0.99999999995)*sj0);
IkReal x523=(r01*sj1);
IkReal x524=((9.9999999995e-6)*sj0);
IkReal x525=((9.9999999995e-6)*cj0);
IkReal x526=((0.99999999995)*r01);
IkReal x527=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((cj0*x526))+(((-1.0)*r01*x524))+(((-1.0)*r00*x522))+(((-1.0)*cj0*x520)));
evalcond[2]=((((-1.0)*sj1*x527))+(((-1.0)*x523*x525))+((cj1*r02))+(((-1.0)*x522*x523))+((sj0*sj1*x520)));
evalcond[3]=(((cj1*r01*x525))+(((-1.0)*x520*x521))+((r02*sj1))+((x521*x526))+((cj1*x527)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*px*x525))+(((-1.0)*px*x522))+(((-1.0)*py*x524)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x528=((8.33333333291667e-5)*cj1);
IkReal x529=(px*sj0);
IkReal x530=(cj0*py);
IkReal x531=((8.33333333333333)*pz);
IkReal x532=((8.33333333291667e-5)*sj1);
IkReal x533=((8.33333333291667)*py*sj0);
IkReal x534=((8.33333333291667)*cj0*px);
if( IKabs((((sj1*x531))+(((-1.0)*x528*x529))+((cj1*x533))+((cj1*x534))+((x528*x530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+((sj1*x534))+((sj1*x533))+(((-1.0)*x529*x532))+(((-1.0)*cj1*x531))+((x530*x532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x531))+(((-1.0)*x528*x529))+((cj1*x533))+((cj1*x534))+((x528*x530))))+IKsqr(((-1.90258333333333)+((sj1*x534))+((sj1*x533))+(((-1.0)*x529*x532))+(((-1.0)*cj1*x531))+((x530*x532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x531))+(((-1.0)*x528*x529))+((cj1*x533))+((cj1*x534))+((x528*x530))), ((-1.90258333333333)+((sj1*x534))+((sj1*x533))+(((-1.0)*x529*x532))+(((-1.0)*cj1*x531))+((x530*x532))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x535=(py*sj1);
IkReal x536=((9.9999999995e-6)*cj0);
IkReal x537=((0.99999999995)*sj0);
IkReal x538=(cj1*px);
IkReal x539=((9.9999999995e-6)*sj0);
IkReal x540=((0.99999999995)*cj0);
IkReal x541=(px*sj1);
IkReal x542=(cj1*py);
evalcond[0]=((((-1.0)*x538*x539))+((x536*x542))+((x537*x542))+(((-0.12)*(IKsin(j4))))+((pz*sj1))+((x538*x540)));
evalcond[1]=((0.22831)+((x539*x541))+(((0.12)*(IKcos(j4))))+(((-1.0)*x540*x541))+((cj1*pz))+(((-1.0)*x535*x537))+(((-1.0)*x535*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x543=((9.9999999995e-6)*r00);
IkReal x544=(cj1*sj0);
IkReal x545=((0.99999999995)*sj0);
IkReal x546=(r01*sj1);
IkReal x547=((9.9999999995e-6)*sj0);
IkReal x548=((9.9999999995e-6)*cj0);
IkReal x549=((0.99999999995)*r01);
IkReal x550=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((cj0*x549))+(((-1.0)*r00*x545))+(((-1.0)*r01*x547))+(((-1.0)*cj0*x543)));
evalcond[2]=((((-1.0)*x545*x546))+(((-1.0)*sj1*x550))+((cj1*r02))+((sj0*sj1*x543))+(((-1.0)*x546*x548)));
evalcond[3]=(((cj1*r01*x548))+((x544*x549))+((cj1*x550))+((r02*sj1))+(((-1.0)*x543*x544)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*px*x545))+(((-1.0)*px*x548))+(((-1.0)*py*x547)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x551=((8.33333333291667e-5)*cj1);
IkReal x552=(px*sj0);
IkReal x553=(cj0*py);
IkReal x554=((8.33333333333333)*pz);
IkReal x555=((8.33333333291667e-5)*sj1);
IkReal x556=((8.33333333291667)*py*sj0);
IkReal x557=((8.33333333291667)*cj0*px);
if( IKabs((((sj1*x554))+(((-1.0)*x551*x552))+((cj1*x557))+((cj1*x556))+((x551*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-1.0)*sj1*x556))+(((-1.0)*sj1*x557))+(((-1.0)*x553*x555))+((cj1*x554))+((x552*x555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x554))+(((-1.0)*x551*x552))+((cj1*x557))+((cj1*x556))+((x551*x553))))+IKsqr(((0.629083333333333)+(((-1.0)*sj1*x556))+(((-1.0)*sj1*x557))+(((-1.0)*x553*x555))+((cj1*x554))+((x552*x555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x554))+(((-1.0)*x551*x552))+((cj1*x557))+((cj1*x556))+((x551*x553))), ((0.629083333333333)+(((-1.0)*sj1*x556))+(((-1.0)*sj1*x557))+(((-1.0)*x553*x555))+((cj1*x554))+((x552*x555))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x558=(py*sj1);
IkReal x559=((9.9999999995e-6)*cj0);
IkReal x560=((0.99999999995)*sj0);
IkReal x561=(cj1*px);
IkReal x562=((9.9999999995e-6)*sj0);
IkReal x563=((0.99999999995)*cj0);
IkReal x564=(px*sj1);
IkReal x565=(cj1*py);
evalcond[0]=(((x561*x563))+((x560*x565))+(((-0.12)*(IKsin(j4))))+((pz*sj1))+(((-1.0)*x561*x562))+((x559*x565)));
evalcond[1]=((0.07549)+(((-1.0)*x558*x560))+((x562*x564))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x563*x564))+(((-1.0)*x558*x559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x566=((8.33333333291667e-5)*cj1);
IkReal x567=(px*sj0);
IkReal x568=(cj0*py);
IkReal x569=((0.0002499999999875)*sj1);
IkReal x570=(py*sj0);
IkReal x571=((24.99999999875)*sj1);
IkReal x572=((8.33333333291667)*cj1);
IkReal x573=(cj0*px);
CheckValue<IkReal> x574=IKPowWithIntegerCheck(cj3,-1);
if(!x574.valid){
continue;
}
if( IKabs((((x566*x568))+(((-1.0)*x566*x567))+(((8.33333333333333)*pz*sj1))+((x572*x573))+((x570*x572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x574.value)*(((-3.7975)+((x571*x573))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x567*x569))+((x568*x569))+((x570*x571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x566*x568))+(((-1.0)*x566*x567))+(((8.33333333333333)*pz*sj1))+((x572*x573))+((x570*x572))))+IKsqr(((0.333333333333333)*(x574.value)*(((-3.7975)+((x571*x573))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x567*x569))+((x568*x569))+((x570*x571))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x566*x568))+(((-1.0)*x566*x567))+(((8.33333333333333)*pz*sj1))+((x572*x573))+((x570*x572))), ((0.333333333333333)*(x574.value)*(((-3.7975)+((x571*x573))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x567*x569))+((x568*x569))+((x570*x571))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x575=IKcos(j4);
IkReal x576=((9.9999999995e-6)*px);
IkReal x577=((0.99999999995)*px);
IkReal x578=((9.9999999995e-6)*py);
IkReal x579=(cj1*sj0);
IkReal x580=(cj0*sj1);
IkReal x581=(cj0*cj1);
IkReal x582=(sj0*sj1);
IkReal x583=((0.99999999995)*py);
IkReal x584=((0.12)*x575);
evalcond[0]=((((-1.0)*cj0*x576))+((cj0*x583))+((sj3*x584))+(((-1.0)*sj0*x578))+(((-1.0)*sj0*x577))+(((0.07641)*sj3)));
evalcond[1]=(((x578*x581))+((x579*x583))+((x577*x581))+(((-1.0)*x576*x579))+(((-0.12)*(IKsin(j4))))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x582*x583))+(((-1.0)*x578*x580))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x577*x580))+((x576*x582))+((cj3*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x585=((8.33333333291667e-5)*cj1);
IkReal x586=(px*sj0);
IkReal x587=(cj0*py);
IkReal x588=((8.33333333291667)*cj1);
IkReal x589=(py*sj0);
IkReal x590=(cj0*px);
CheckValue<IkReal> x591=IKPowWithIntegerCheck(sj3,-1);
if(!x591.valid){
continue;
}
if( IKabs((((x588*x589))+(((8.33333333333333)*pz*sj1))+((x585*x587))+(((-1.0)*x585*x586))+((x588*x590)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x591.value)*(((((-24.99999999875)*x587))+(((0.0002499999999875)*x589))+(((-1.91025)*sj3))+(((24.99999999875)*x586))+(((0.0002499999999875)*x590)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x588*x589))+(((8.33333333333333)*pz*sj1))+((x585*x587))+(((-1.0)*x585*x586))+((x588*x590))))+IKsqr(((0.333333333333333)*(x591.value)*(((((-24.99999999875)*x587))+(((0.0002499999999875)*x589))+(((-1.91025)*sj3))+(((24.99999999875)*x586))+(((0.0002499999999875)*x590))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x588*x589))+(((8.33333333333333)*pz*sj1))+((x585*x587))+(((-1.0)*x585*x586))+((x588*x590))), ((0.333333333333333)*(x591.value)*(((((-24.99999999875)*x587))+(((0.0002499999999875)*x589))+(((-1.91025)*sj3))+(((24.99999999875)*x586))+(((0.0002499999999875)*x590))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x592=IKcos(j4);
IkReal x593=((9.9999999995e-6)*px);
IkReal x594=((0.99999999995)*px);
IkReal x595=((9.9999999995e-6)*py);
IkReal x596=(cj1*sj0);
IkReal x597=(cj0*sj1);
IkReal x598=(cj0*cj1);
IkReal x599=(sj0*sj1);
IkReal x600=((0.99999999995)*py);
IkReal x601=((0.12)*x592);
evalcond[0]=((((-1.0)*sj0*x594))+(((-1.0)*sj0*x595))+(((0.07641)*sj3))+(((-1.0)*cj0*x593))+((cj0*x600))+((sj3*x601)));
evalcond[1]=(((x594*x598))+((x595*x598))+(((-1.0)*x593*x596))+((x596*x600))+(((-0.12)*(IKsin(j4))))+((pz*sj1)));
evalcond[2]=((0.1519)+((cj3*x601))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x599*x600))+(((-1.0)*x594*x597))+(((-1.0)*x595*x597))+((x593*x599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x602=(cj1*sj0);
IkReal x603=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((0.99999999995)*r01*x602))+(((9.9999999995e-6)*r01*x603))+(((0.99999999995)*r00*x603))+(((-9.9999999995e-6)*r00*x602))+((r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x604=((9.9999999995e-6)*sj0);
IkReal x605=(r00*sj1);
IkReal x606=((0.99999999995)*cj0);
IkReal x607=(r01*sj1);
IkReal x608=((9.9999999995e-6)*cj0);
IkReal x609=((0.99999999995)*sj0);
if( IKabs((((x604*x605))+((cj1*r02))+(((-1.0)*x605*x606))+(((-1.0)*x607*x609))+(((-1.0)*x607*x608)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x604))+(((-1.0)*r00*x609))+(((-1.0)*r00*x608))+((r01*x606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x604*x605))+((cj1*r02))+(((-1.0)*x605*x606))+(((-1.0)*x607*x609))+(((-1.0)*x607*x608))))+IKsqr(((((-1.0)*r01*x604))+(((-1.0)*r00*x609))+(((-1.0)*r00*x608))+((r01*x606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x604*x605))+((cj1*r02))+(((-1.0)*x605*x606))+(((-1.0)*x607*x609))+(((-1.0)*x607*x608))), ((((-1.0)*r01*x604))+(((-1.0)*r00*x609))+(((-1.0)*r00*x608))+((r01*x606))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x610=((9.9999999995e-6)*sj0);
IkReal x611=(r00*sj1);
IkReal x612=((0.99999999995)*cj0);
IkReal x613=(r01*sj1);
IkReal x614=((9.9999999995e-6)*cj0);
IkReal x615=((0.99999999995)*sj0);
evalcond[0]=(((r01*x612))+(((-1.0)*r00*x614))+(((-1.0)*r00*x615))+(((-1.0)*r01*x610))+(((-1.0)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*x611*x612))+((cj1*r02))+(((-1.0)*(IKsin(j3))))+(((-1.0)*x613*x615))+(((-1.0)*x613*x614))+((x610*x611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x616=((9.9999999995e-6)*r00);
IkReal x617=(cj1*sj0);
IkReal x618=(py*sj1);
IkReal x619=((9.9999999995e-6)*cj0);
IkReal x620=(sj0*sj1);
IkReal x621=((0.99999999995)*sj0);
IkReal x622=((0.99999999995)*r01);
IkReal x623=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x616))+(((-1.0)*r00*x621))+((cj0*x622)));
evalcond[2]=((-1.0)+((x616*x620))+((cj1*r02))+(((-1.0)*x620*x622))+(((-1.0)*r01*sj1*x619))+(((-1.0)*sj1*x623)));
evalcond[3]=(((x617*x622))+((r02*sj1))+(((-1.0)*x616*x617))+((cj1*r01*x619))+((cj1*x623)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x620))+(((-1.0)*x618*x619))+((cj1*pz))+(((-1.0)*x618*x621)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x624=(cj0*py);
IkReal x625=((8.33333333291667e-5)*cj1);
IkReal x626=(px*sj0);
IkReal x627=((8.33333333291667)*cj1);
IkReal x628=(py*sj0);
IkReal x629=(cj0*px);
if( IKabs((((x625*x626))+(((-1.0)*x624*x625))+(((-1.0)*x627*x629))+(((-1.0)*x627*x628))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((8.33333333291667)*x624))+(((-8.33333333291667e-5)*x628))+(((-8.33333333291667e-5)*x629))+(((-8.33333333291667)*x626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x625*x626))+(((-1.0)*x624*x625))+(((-1.0)*x627*x629))+(((-1.0)*x627*x628))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((8.33333333291667)*x624))+(((-8.33333333291667e-5)*x628))+(((-8.33333333291667e-5)*x629))+(((-8.33333333291667)*x626))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x625*x626))+(((-1.0)*x624*x625))+(((-1.0)*x627*x629))+(((-1.0)*x627*x628))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+(((8.33333333291667)*x624))+(((-8.33333333291667e-5)*x628))+(((-8.33333333291667e-5)*x629))+(((-8.33333333291667)*x626))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x630=((9.9999999995e-6)*px);
IkReal x631=((9.9999999995e-6)*py);
IkReal x632=((0.99999999995)*px);
IkReal x633=(cj1*sj0);
IkReal x634=(cj0*cj1);
IkReal x635=((0.99999999995)*py);
evalcond[0]=((-0.07641)+(((-1.0)*cj0*x630))+((cj0*x635))+(((-0.12)*(IKcos(j4))))+(((-1.0)*sj0*x631))+(((-1.0)*sj0*x632)));
evalcond[1]=((((-1.0)*x630*x633))+(((0.12)*(IKsin(j4))))+((x632*x634))+((pz*sj1))+((x631*x634))+((x633*x635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x636=((9.9999999995e-6)*r00);
IkReal x637=(cj1*sj0);
IkReal x638=(py*sj1);
IkReal x639=((9.9999999995e-6)*cj0);
IkReal x640=(sj0*sj1);
IkReal x641=((0.99999999995)*sj0);
IkReal x642=((0.99999999995)*r01);
IkReal x643=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x641))+(((-1.0)*cj0*x636))+((cj0*x642)));
evalcond[2]=((1.0)+((x636*x640))+(((-1.0)*x640*x642))+(((-1.0)*sj1*x643))+((cj1*r02))+(((-1.0)*r01*sj1*x639)));
evalcond[3]=(((cj1*r01*x639))+((x637*x642))+((cj1*x643))+((r02*sj1))+(((-1.0)*x636*x637)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x638*x639))+((cj1*pz))+(((9.9999999995e-6)*px*x640))+(((-1.0)*x638*x641)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x644=(cj0*py);
IkReal x645=((8.33333333291667e-5)*cj1);
IkReal x646=(px*sj0);
IkReal x647=((8.33333333291667)*cj1);
IkReal x648=(py*sj0);
IkReal x649=(cj0*px);
if( IKabs(((((-1.0)*x647*x648))+(((-1.0)*x647*x649))+((x645*x646))+(((-1.0)*x644*x645))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((8.33333333291667e-5)*x648))+(((8.33333333291667e-5)*x649))+(((-8.33333333291667)*x644))+(((8.33333333291667)*x646)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x647*x648))+(((-1.0)*x647*x649))+((x645*x646))+(((-1.0)*x644*x645))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((8.33333333291667e-5)*x648))+(((8.33333333291667e-5)*x649))+(((-8.33333333291667)*x644))+(((8.33333333291667)*x646))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x647*x648))+(((-1.0)*x647*x649))+((x645*x646))+(((-1.0)*x644*x645))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+(((8.33333333291667e-5)*x648))+(((8.33333333291667e-5)*x649))+(((-8.33333333291667)*x644))+(((8.33333333291667)*x646))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x650=((9.9999999995e-6)*px);
IkReal x651=((9.9999999995e-6)*py);
IkReal x652=((0.99999999995)*px);
IkReal x653=(cj1*sj0);
IkReal x654=(cj0*cj1);
IkReal x655=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((-1.0)*sj0*x652))+(((-1.0)*sj0*x651))+(((0.12)*(IKcos(j4))))+(((-1.0)*cj0*x650))+((cj0*x655)));
evalcond[1]=(((x652*x654))+((x653*x655))+(((0.12)*(IKsin(j4))))+((x651*x654))+(((-1.0)*x650*x653))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x656=((9.9999999995e-6)*r00);
IkReal x657=(cj1*sj0);
IkReal x658=((0.99999999995)*sj0);
IkReal x659=(r01*sj1);
IkReal x660=((9.9999999995e-6)*sj0);
IkReal x661=((9.9999999995e-6)*cj0);
IkReal x662=((0.99999999995)*r01);
IkReal x663=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((cj0*x662))+(((-1.0)*r01*x660))+(((-1.0)*r00*x658))+(((-1.0)*cj0*x656)));
evalcond[2]=((((-1.0)*sj1*x663))+(((-1.0)*x659*x661))+((sj0*sj1*x656))+((cj1*r02))+(((-1.0)*x658*x659)));
evalcond[3]=(((x657*x662))+(((-1.0)*x656*x657))+((r02*sj1))+((cj1*x663))+((cj1*r01*x661)));
evalcond[4]=((((-1.0)*px*x658))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x660))+(((-1.0)*px*x661)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x664=((8.33333333291667e-5)*cj1);
IkReal x665=(px*sj0);
IkReal x666=(cj0*py);
IkReal x667=((8.33333333333333)*pz);
IkReal x668=((8.33333333291667e-5)*sj1);
IkReal x669=((8.33333333291667)*py*sj0);
IkReal x670=((8.33333333291667)*cj0*px);
if( IKabs(((((-1.0)*sj1*x667))+((x664*x665))+(((-1.0)*cj1*x669))+(((-1.0)*cj1*x670))+(((-1.0)*x664*x666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*x665*x668))+((x666*x668))+((sj1*x669))+(((-1.0)*cj1*x667))+((sj1*x670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x667))+((x664*x665))+(((-1.0)*cj1*x669))+(((-1.0)*cj1*x670))+(((-1.0)*x664*x666))))+IKsqr(((-1.90258333333333)+(((-1.0)*x665*x668))+((x666*x668))+((sj1*x669))+(((-1.0)*cj1*x667))+((sj1*x670))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj1*x667))+((x664*x665))+(((-1.0)*cj1*x669))+(((-1.0)*cj1*x670))+(((-1.0)*x664*x666))), ((-1.90258333333333)+(((-1.0)*x665*x668))+((x666*x668))+((sj1*x669))+(((-1.0)*cj1*x667))+((sj1*x670))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x671=(py*sj1);
IkReal x672=((9.9999999995e-6)*cj0);
IkReal x673=((0.99999999995)*sj0);
IkReal x674=(cj1*px);
IkReal x675=((9.9999999995e-6)*sj0);
IkReal x676=((0.99999999995)*cj0);
IkReal x677=(px*sj1);
IkReal x678=(cj1*py);
evalcond[0]=(((x673*x678))+((x672*x678))+((x674*x676))+(((0.12)*(IKsin(j4))))+((pz*sj1))+(((-1.0)*x674*x675)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*x676*x677))+(((-1.0)*x671*x672))+(((-1.0)*x671*x673))+((x675*x677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x679=((9.9999999995e-6)*r00);
IkReal x680=(cj1*sj0);
IkReal x681=((0.99999999995)*sj0);
IkReal x682=(r01*sj1);
IkReal x683=((9.9999999995e-6)*sj0);
IkReal x684=((9.9999999995e-6)*cj0);
IkReal x685=((0.99999999995)*r01);
IkReal x686=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*cj0*x679))+(((-1.0)*r01*x683))+(((-1.0)*r00*x681))+((cj0*x685)));
evalcond[2]=((((-1.0)*x681*x682))+((cj1*r02))+(((-1.0)*sj1*x686))+(((-1.0)*x682*x684))+((sj0*sj1*x679)));
evalcond[3]=(((cj1*x686))+((cj1*r01*x684))+(((-1.0)*x679*x680))+((r02*sj1))+((x680*x685)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*px*x684))+(((-1.0)*px*x681))+(((-1.0)*py*x683)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x687=((8.33333333291667e-5)*cj1);
IkReal x688=(px*sj0);
IkReal x689=(cj0*py);
IkReal x690=((8.33333333333333)*pz);
IkReal x691=((8.33333333291667e-5)*sj1);
IkReal x692=((8.33333333291667)*py*sj0);
IkReal x693=((8.33333333291667)*cj0*px);
if( IKabs(((((-1.0)*x687*x689))+((x687*x688))+(((-1.0)*sj1*x690))+(((-1.0)*cj1*x692))+(((-1.0)*cj1*x693)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((x688*x691))+(((-1.0)*sj1*x693))+(((-1.0)*sj1*x692))+((cj1*x690))+(((-1.0)*x689*x691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x687*x689))+((x687*x688))+(((-1.0)*sj1*x690))+(((-1.0)*cj1*x692))+(((-1.0)*cj1*x693))))+IKsqr(((0.629083333333333)+((x688*x691))+(((-1.0)*sj1*x693))+(((-1.0)*sj1*x692))+((cj1*x690))+(((-1.0)*x689*x691))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x687*x689))+((x687*x688))+(((-1.0)*sj1*x690))+(((-1.0)*cj1*x692))+(((-1.0)*cj1*x693))), ((0.629083333333333)+((x688*x691))+(((-1.0)*sj1*x693))+(((-1.0)*sj1*x692))+((cj1*x690))+(((-1.0)*x689*x691))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x694=(py*sj1);
IkReal x695=((9.9999999995e-6)*cj0);
IkReal x696=((0.99999999995)*sj0);
IkReal x697=(cj1*px);
IkReal x698=((9.9999999995e-6)*sj0);
IkReal x699=((0.99999999995)*cj0);
IkReal x700=(px*sj1);
IkReal x701=(cj1*py);
evalcond[0]=((((-1.0)*x697*x698))+((x697*x699))+(((0.12)*(IKsin(j4))))+((x695*x701))+((x696*x701))+((pz*sj1)));
evalcond[1]=((0.07549)+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x699*x700))+(((-1.0)*x694*x696))+(((-1.0)*x694*x695))+((x698*x700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x702=((8.33333333291667e-5)*cj1);
IkReal x703=(px*sj0);
IkReal x704=(cj0*py);
IkReal x705=((0.0002499999999875)*sj1);
IkReal x706=(py*sj0);
IkReal x707=((24.99999999875)*sj1);
IkReal x708=((8.33333333291667)*cj1);
IkReal x709=(cj0*px);
CheckValue<IkReal> x710=IKPowWithIntegerCheck(cj3,-1);
if(!x710.valid){
continue;
}
if( IKabs(((((-1.0)*x706*x708))+((x702*x703))+(((-1.0)*x702*x704))+(((-1.0)*x708*x709))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x710.value)*(((-3.7975)+((x706*x707))+((x707*x709))+(((-1.0)*x703*x705))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x704*x705)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x706*x708))+((x702*x703))+(((-1.0)*x702*x704))+(((-1.0)*x708*x709))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x710.value)*(((-3.7975)+((x706*x707))+((x707*x709))+(((-1.0)*x703*x705))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x704*x705))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x706*x708))+((x702*x703))+(((-1.0)*x702*x704))+(((-1.0)*x708*x709))+(((-8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x710.value)*(((-3.7975)+((x706*x707))+((x707*x709))+(((-1.0)*x703*x705))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x704*x705))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x711=IKcos(j4);
IkReal x712=((9.9999999995e-6)*px);
IkReal x713=((9.9999999995e-6)*py);
IkReal x714=((0.99999999995)*px);
IkReal x715=(cj1*sj0);
IkReal x716=(cj0*sj1);
IkReal x717=(cj0*cj1);
IkReal x718=(sj0*sj1);
IkReal x719=((0.99999999995)*py);
IkReal x720=((0.12)*x711);
evalcond[0]=((((-0.07641)*sj3))+((cj0*x719))+(((-1.0)*sj3*x720))+(((-1.0)*cj0*x712))+(((-1.0)*sj0*x714))+(((-1.0)*sj0*x713)));
evalcond[1]=(((x715*x719))+((x714*x717))+(((0.12)*(IKsin(j4))))+(((-1.0)*x712*x715))+((pz*sj1))+((x713*x717)));
evalcond[2]=((0.1519)+(((-1.0)*x714*x716))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x718*x719))+((cj3*x720))+(((-1.0)*x713*x716))+((x712*x718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x721=((8.33333333291667e-5)*cj1);
IkReal x722=(px*sj0);
IkReal x723=(cj0*py);
IkReal x724=((8.33333333291667)*cj1);
IkReal x725=(py*sj0);
IkReal x726=(cj0*px);
CheckValue<IkReal> x727=IKPowWithIntegerCheck(sj3,-1);
if(!x727.valid){
continue;
}
if( IKabs((((x721*x722))+(((-1.0)*x724*x725))+(((-1.0)*x724*x726))+(((-1.0)*x721*x723))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x727.value)*(((((-1.91025)*sj3))+(((24.99999999875)*x723))+(((-24.99999999875)*x722))+(((-0.0002499999999875)*x726))+(((-0.0002499999999875)*x725)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x721*x722))+(((-1.0)*x724*x725))+(((-1.0)*x724*x726))+(((-1.0)*x721*x723))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x727.value)*(((((-1.91025)*sj3))+(((24.99999999875)*x723))+(((-24.99999999875)*x722))+(((-0.0002499999999875)*x726))+(((-0.0002499999999875)*x725))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x721*x722))+(((-1.0)*x724*x725))+(((-1.0)*x724*x726))+(((-1.0)*x721*x723))+(((-8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x727.value)*(((((-1.91025)*sj3))+(((24.99999999875)*x723))+(((-24.99999999875)*x722))+(((-0.0002499999999875)*x726))+(((-0.0002499999999875)*x725))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x728=IKcos(j4);
IkReal x729=((9.9999999995e-6)*px);
IkReal x730=((9.9999999995e-6)*py);
IkReal x731=((0.99999999995)*px);
IkReal x732=(cj1*sj0);
IkReal x733=(cj0*sj1);
IkReal x734=(cj0*cj1);
IkReal x735=(sj0*sj1);
IkReal x736=((0.99999999995)*py);
IkReal x737=((0.12)*x728);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*cj0*x729))+(((-1.0)*sj0*x730))+(((-1.0)*sj0*x731))+((cj0*x736))+(((-1.0)*sj3*x737)));
evalcond[1]=(((x731*x734))+(((0.12)*(IKsin(j4))))+((pz*sj1))+((x732*x736))+(((-1.0)*x729*x732))+((x730*x734)));
evalcond[2]=((0.1519)+(((-1.0)*x731*x733))+(((-1.0)*x735*x736))+((x729*x735))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x730*x733))+((cj3*x737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((0.99999999995)*cj0*r01))+(((-0.99999999995)*r00*sj0))+(((-9.9999999995e-6)*cj0*r00)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x738=(cj0*sj1);
IkReal x739=((0.99999999995)*r00);
IkReal x740=((9.9999999995e-6)*r01);
IkReal x741=(cj0*cj1);
IkReal x742=((9.9999999995e-6)*r00*sj0);
IkReal x743=((0.99999999995)*r01*sj0);
if( IKabs(((((-1.0)*sj1*x743))+((cj1*r02))+((sj1*x742))+(((-1.0)*x738*x740))+(((-1.0)*x738*x739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x742))+(((-1.0)*r02*sj1))+(((-1.0)*x740*x741))+(((-1.0)*x739*x741))+(((-1.0)*cj1*x743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x743))+((cj1*r02))+((sj1*x742))+(((-1.0)*x738*x740))+(((-1.0)*x738*x739))))+IKsqr((((cj1*x742))+(((-1.0)*r02*sj1))+(((-1.0)*x740*x741))+(((-1.0)*x739*x741))+(((-1.0)*cj1*x743))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj1*x743))+((cj1*r02))+((sj1*x742))+(((-1.0)*x738*x740))+(((-1.0)*x738*x739))), (((cj1*x742))+(((-1.0)*r02*sj1))+(((-1.0)*x740*x741))+(((-1.0)*x739*x741))+(((-1.0)*cj1*x743))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x744=((0.99999999995)*sj1);
IkReal x745=(cj0*r00);
IkReal x746=(r01*sj0);
IkReal x747=((0.99999999995)*cj1);
IkReal x748=((9.9999999995e-6)*r00*sj0);
IkReal x749=((9.9999999995e-6)*cj0*r01);
evalcond[0]=(((x745*x747))+((cj1*x749))+((x746*x747))+((r02*sj1))+(IKcos(j3))+(((-1.0)*cj1*x748)));
evalcond[1]=((((-1.0)*sj1*x749))+((cj1*r02))+(((-1.0)*x744*x746))+(((-1.0)*x744*x745))+(((-1.0)*(IKsin(j3))))+((sj1*x748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x750=((9.9999999995e-6)*r00);
IkReal x751=(cj1*sj0);
IkReal x752=(py*sj1);
IkReal x753=((9.9999999995e-6)*cj0);
IkReal x754=(sj0*sj1);
IkReal x755=((0.99999999995)*sj0);
IkReal x756=((0.99999999995)*r01);
IkReal x757=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x750))+(((-1.0)*r00*x755))+((cj0*x756)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x757))+(((-1.0)*x754*x756))+((cj1*r02))+(((-1.0)*r01*sj1*x753))+((x750*x754)));
evalcond[3]=(((cj1*x757))+(((-1.0)*x750*x751))+((x751*x756))+((r02*sj1))+((cj1*r01*x753)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((-1.0)*x752*x755))+(((-1.0)*x752*x753))+(((9.9999999995e-6)*px*x754)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x758=(cj0*py);
IkReal x759=((8.33333333291667e-5)*cj1);
IkReal x760=(px*sj0);
IkReal x761=(py*sj0);
IkReal x762=(cj0*px);
IkReal x763=((8.33333333291667)*cj1);
if( IKabs(((((8.33333333291667)*x760))+(((8.33333333291667e-5)*x761))+(((8.33333333291667e-5)*x762))+(((-8.33333333291667)*x758)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*x762*x763))+((x759*x760))+(((-1.0)*x758*x759))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x761*x763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x760))+(((8.33333333291667e-5)*x761))+(((8.33333333291667e-5)*x762))+(((-8.33333333291667)*x758))))+IKsqr(((-0.63675)+(((-1.0)*x762*x763))+((x759*x760))+(((-1.0)*x758*x759))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x761*x763))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x760))+(((8.33333333291667e-5)*x761))+(((8.33333333291667e-5)*x762))+(((-8.33333333291667)*x758))), ((-0.63675)+(((-1.0)*x762*x763))+((x759*x760))+(((-1.0)*x758*x759))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x761*x763))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x764=((9.9999999995e-6)*px);
IkReal x765=((9.9999999995e-6)*py);
IkReal x766=((0.99999999995)*px);
IkReal x767=(cj1*sj0);
IkReal x768=(cj0*cj1);
IkReal x769=((0.99999999995)*py);
evalcond[0]=((((-1.0)*sj0*x766))+(((-1.0)*sj0*x765))+(((0.12)*(IKsin(j4))))+((cj0*x769))+(((-1.0)*cj0*x764)));
evalcond[1]=((0.07641)+(((0.12)*(IKcos(j4))))+(((-1.0)*x764*x767))+((x765*x768))+((x766*x768))+((pz*sj1))+((x767*x769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x770=((9.9999999995e-6)*r00);
IkReal x771=(cj1*sj0);
IkReal x772=(py*sj1);
IkReal x773=((9.9999999995e-6)*cj0);
IkReal x774=(sj0*sj1);
IkReal x775=((0.99999999995)*sj0);
IkReal x776=((0.99999999995)*r01);
IkReal x777=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x770))+(((-1.0)*r00*x775))+((cj0*x776)));
evalcond[2]=((1.0)+((x770*x774))+(((-1.0)*r01*sj1*x773))+(((-1.0)*x774*x776))+((cj1*r02))+(((-1.0)*sj1*x777)));
evalcond[3]=(((x771*x776))+((cj1*x777))+((r02*sj1))+(((-1.0)*x770*x771))+((cj1*r01*x773)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x774))+((cj1*pz))+(((-1.0)*x772*x773))+(((-1.0)*x772*x775)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x778=(cj0*py);
IkReal x779=((8.33333333291667e-5)*cj1);
IkReal x780=(px*sj0);
IkReal x781=(py*sj0);
IkReal x782=(cj0*px);
IkReal x783=((8.33333333291667)*cj1);
if( IKabs(((((8.33333333291667)*x780))+(((8.33333333291667e-5)*x782))+(((8.33333333291667e-5)*x781))+(((-8.33333333291667)*x778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((x781*x783))+((x782*x783))+(((8.33333333333333)*pz*sj1))+((x778*x779))+(((-1.0)*x779*x780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x780))+(((8.33333333291667e-5)*x782))+(((8.33333333291667e-5)*x781))+(((-8.33333333291667)*x778))))+IKsqr(((-0.63675)+((x781*x783))+((x782*x783))+(((8.33333333333333)*pz*sj1))+((x778*x779))+(((-1.0)*x779*x780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x780))+(((8.33333333291667e-5)*x782))+(((8.33333333291667e-5)*x781))+(((-8.33333333291667)*x778))), ((-0.63675)+((x781*x783))+((x782*x783))+(((8.33333333333333)*pz*sj1))+((x778*x779))+(((-1.0)*x779*x780))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x784=((9.9999999995e-6)*px);
IkReal x785=((9.9999999995e-6)*py);
IkReal x786=((0.99999999995)*px);
IkReal x787=(cj1*sj0);
IkReal x788=(cj0*cj1);
IkReal x789=((0.99999999995)*py);
evalcond[0]=((((-1.0)*cj0*x784))+(((-1.0)*sj0*x786))+(((-1.0)*sj0*x785))+(((0.12)*(IKsin(j4))))+((cj0*x789)));
evalcond[1]=((-0.07641)+((x786*x788))+((x785*x788))+((x787*x789))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x784*x787))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x790=((9.9999999995e-6)*r00);
IkReal x791=(cj1*sj0);
IkReal x792=(sj0*sj1);
IkReal x793=((0.99999999995)*r01);
IkReal x794=(cj0*cj1);
IkReal x795=((9.9999999995e-6)*r01);
IkReal x796=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x790))+(((-1.0)*sj0*x795))+(((-0.99999999995)*r00*sj0))+((cj0*x793)));
evalcond[2]=((((-1.0)*x792*x793))+((x790*x792))+((cj1*r02))+(((-1.0)*sj1*x796))+(((-1.0)*cj0*sj1*x795)));
evalcond[3]=((1.0)+((r02*sj1))+(((0.99999999995)*r00*x794))+(((-1.0)*x790*x791))+((x794*x795))+((x791*x793)));
evalcond[4]=((((-9.9999999995e-6)*px*x791))+(((0.99999999995)*py*x791))+(((9.9999999995e-6)*py*x794))+(((0.99999999995)*px*x794))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x797=((8.33333333291667)*cj0);
IkReal x798=((8.33333333291667)*sj0);
IkReal x799=((8.33333333291667e-5)*py);
IkReal x800=(px*sj1);
if( IKabs((((px*x798))+((sj0*x799))+(((-1.0)*py*x797))+(((8.33333333291667e-5)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-8.33333333291667e-5)*sj0*x800))+((x797*x800))+((py*sj1*x798))+((cj0*sj1*x799)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x798))+((sj0*x799))+(((-1.0)*py*x797))+(((8.33333333291667e-5)*cj0*px))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-8.33333333291667e-5)*sj0*x800))+((x797*x800))+((py*sj1*x798))+((cj0*sj1*x799))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x798))+((sj0*x799))+(((-1.0)*py*x797))+(((8.33333333291667e-5)*cj0*px))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-8.33333333291667e-5)*sj0*x800))+((x797*x800))+((py*sj1*x798))+((cj0*sj1*x799))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x801=(cj0*px);
IkReal x802=(py*sj0);
IkReal x803=((0.99999999995)*sj1);
IkReal x804=(px*sj0);
IkReal x805=((9.9999999995e-6)*sj1);
IkReal x806=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x802))+(((-9.9999999995e-6)*x801))+(((-0.99999999995)*x804))+(((0.99999999995)*x806))+(((0.12)*(IKsin(j4)))));
evalcond[1]=((0.22831)+((x804*x805))+(((-1.0)*x805*x806))+(((0.12)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*x801*x803))+(((-1.0)*x802*x803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x807=((9.9999999995e-6)*r00);
IkReal x808=(cj1*sj0);
IkReal x809=(sj0*sj1);
IkReal x810=((0.99999999995)*r01);
IkReal x811=(cj0*cj1);
IkReal x812=((9.9999999995e-6)*r01);
IkReal x813=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj0*x810))+(((-1.0)*sj0*x812))+(((-1.0)*cj0*x807))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=(((cj1*r02))+(((-1.0)*x809*x810))+(((-1.0)*cj0*sj1*x812))+(((-1.0)*sj1*x813))+((x807*x809)));
evalcond[3]=((-1.0)+(((-1.0)*x807*x808))+((x808*x810))+((r02*sj1))+(((0.99999999995)*r00*x811))+((x811*x812)));
evalcond[4]=((((0.99999999995)*py*x808))+(((9.9999999995e-6)*py*x811))+(((0.99999999995)*px*x811))+(((-9.9999999995e-6)*px*x808))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x814=((8.33333333291667)*py);
IkReal x815=((8.33333333291667)*px);
IkReal x816=((8.33333333291667e-5)*py);
IkReal x817=(sj0*sj1);
IkReal x818=((8.33333333291667e-5)*px);
IkReal x819=(cj0*sj1);
if( IKabs((((sj0*x816))+((sj0*x815))+((cj0*x818))+(((-1.0)*cj0*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-1.0)*x816*x819))+(((-1.0)*x815*x819))+(((-1.0)*x814*x817))+((x817*x818))+(((8.33333333333333)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x816))+((sj0*x815))+((cj0*x818))+(((-1.0)*cj0*x814))))+IKsqr(((0.629083333333333)+(((-1.0)*x816*x819))+(((-1.0)*x815*x819))+(((-1.0)*x814*x817))+((x817*x818))+(((8.33333333333333)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj0*x816))+((sj0*x815))+((cj0*x818))+(((-1.0)*cj0*x814))), ((0.629083333333333)+(((-1.0)*x816*x819))+(((-1.0)*x815*x819))+(((-1.0)*x814*x817))+((x817*x818))+(((8.33333333333333)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x820=(cj0*px);
IkReal x821=(py*sj0);
IkReal x822=((0.99999999995)*sj1);
IkReal x823=(px*sj0);
IkReal x824=((9.9999999995e-6)*sj1);
IkReal x825=(cj0*py);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-9.9999999995e-6)*x820))+(((-9.9999999995e-6)*x821))+(((0.99999999995)*x825))+(((-0.99999999995)*x823)));
evalcond[1]=((0.07549)+(((-1.0)*x824*x825))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x821*x822))+(((-1.0)*x820*x822))+((x823*x824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x826=(cj0*py);
IkReal x827=(px*sj0);
IkReal x828=(py*sj0);
IkReal x829=((24.99999999875)*sj1);
IkReal x830=(cj0*px);
IkReal x831=((0.0002499999999875)*sj1);
CheckValue<IkReal> x832=IKPowWithIntegerCheck(cj3,-1);
if(!x832.valid){
continue;
}
if( IKabs(((((8.33333333291667)*x827))+(((-8.33333333291667)*x826))+(((8.33333333291667e-5)*x828))+(((8.33333333291667e-5)*x830)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x832.value)*(((-3.7975)+(((-1.0)*x827*x831))+((x826*x831))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x829*x830))+((x828*x829)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x827))+(((-8.33333333291667)*x826))+(((8.33333333291667e-5)*x828))+(((8.33333333291667e-5)*x830))))+IKsqr(((0.333333333333333)*(x832.value)*(((-3.7975)+(((-1.0)*x827*x831))+((x826*x831))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x829*x830))+((x828*x829))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x827))+(((-8.33333333291667)*x826))+(((8.33333333291667e-5)*x828))+(((8.33333333291667e-5)*x830))), ((0.333333333333333)*(x832.value)*(((-3.7975)+(((-1.0)*x827*x831))+((x826*x831))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x829*x830))+((x828*x829))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x833=IKcos(j4);
IkReal x834=((9.9999999995e-6)*px);
IkReal x835=((9.9999999995e-6)*py);
IkReal x836=((0.99999999995)*px);
IkReal x837=(cj1*sj0);
IkReal x838=(cj0*sj1);
IkReal x839=(cj0*cj1);
IkReal x840=(sj0*sj1);
IkReal x841=((0.99999999995)*py);
IkReal x842=((0.12)*x833);
evalcond[0]=((((-1.0)*sj0*x836))+(((-1.0)*sj0*x835))+((cj0*x841))+(((0.12)*(IKsin(j4))))+(((-1.0)*cj0*x834)));
evalcond[1]=(((x835*x839))+((x837*x841))+((x836*x839))+(((-1.0)*x834*x837))+((pz*sj1))+(((0.07641)*sj3))+((sj3*x842)));
evalcond[2]=((0.1519)+(((-1.0)*x835*x838))+(((-1.0)*x836*x838))+(((-1.0)*x840*x841))+((cj1*pz))+(((0.07641)*cj3))+((x834*x840))+((cj3*x842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x843=(cj0*py);
IkReal x844=(px*sj0);
IkReal x845=(py*sj0);
IkReal x846=((24.99999999875)*cj1);
IkReal x847=(cj0*px);
IkReal x848=((0.0002499999999875)*cj1);
CheckValue<IkReal> x849=IKPowWithIntegerCheck(sj3,-1);
if(!x849.valid){
continue;
}
if( IKabs(((((-8.33333333291667)*x843))+(((8.33333333291667)*x844))+(((8.33333333291667e-5)*x845))+(((8.33333333291667e-5)*x847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x849.value)*(((((-25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x843*x848))+(((-1.0)*x846*x847))+(((-1.0)*x845*x846))+((x844*x848)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667)*x843))+(((8.33333333291667)*x844))+(((8.33333333291667e-5)*x845))+(((8.33333333291667e-5)*x847))))+IKsqr(((0.333333333333333)*(x849.value)*(((((-25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x843*x848))+(((-1.0)*x846*x847))+(((-1.0)*x845*x846))+((x844*x848))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667)*x843))+(((8.33333333291667)*x844))+(((8.33333333291667e-5)*x845))+(((8.33333333291667e-5)*x847))), ((0.333333333333333)*(x849.value)*(((((-25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x843*x848))+(((-1.0)*x846*x847))+(((-1.0)*x845*x846))+((x844*x848))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x850=IKcos(j4);
IkReal x851=((9.9999999995e-6)*px);
IkReal x852=((9.9999999995e-6)*py);
IkReal x853=((0.99999999995)*px);
IkReal x854=(cj1*sj0);
IkReal x855=(cj0*sj1);
IkReal x856=(cj0*cj1);
IkReal x857=(sj0*sj1);
IkReal x858=((0.99999999995)*py);
IkReal x859=((0.12)*x850);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*sj0*x853))+(((-1.0)*sj0*x852))+((cj0*x858))+(((-1.0)*cj0*x851)));
evalcond[1]=(((sj3*x859))+((x854*x858))+((x852*x856))+((pz*sj1))+(((0.07641)*sj3))+(((-1.0)*x851*x854))+((x853*x856)));
evalcond[2]=((0.1519)+(((-1.0)*x853*x855))+(((-1.0)*x852*x855))+((cj3*x859))+((cj1*pz))+(((0.07641)*cj3))+((x851*x857))+(((-1.0)*x857*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((0.99999999995)*cj0*r01))+(((-0.99999999995)*r00*sj0))+(((-9.9999999995e-6)*cj0*r00)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x860=(cj0*sj1);
IkReal x861=((0.99999999995)*r00);
IkReal x862=((9.9999999995e-6)*r01);
IkReal x863=(cj0*cj1);
IkReal x864=((9.9999999995e-6)*r00*sj0);
IkReal x865=((0.99999999995)*r01*sj0);
if( IKabs((((cj1*r02))+(((-1.0)*x860*x861))+(((-1.0)*x860*x862))+(((-1.0)*sj1*x865))+((sj1*x864)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+((cj1*x865))+(((-1.0)*cj1*x864))+((x862*x863))+((x861*x863)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+(((-1.0)*x860*x861))+(((-1.0)*x860*x862))+(((-1.0)*sj1*x865))+((sj1*x864))))+IKsqr((((r02*sj1))+((cj1*x865))+(((-1.0)*cj1*x864))+((x862*x863))+((x861*x863))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r02))+(((-1.0)*x860*x861))+(((-1.0)*x860*x862))+(((-1.0)*sj1*x865))+((sj1*x864))), (((r02*sj1))+((cj1*x865))+(((-1.0)*cj1*x864))+((x862*x863))+((x861*x863))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x866=(cj0*sj1);
IkReal x867=((0.99999999995)*r00);
IkReal x868=((9.9999999995e-6)*r01);
IkReal x869=(cj0*cj1);
IkReal x870=((9.9999999995e-6)*r00*sj0);
IkReal x871=((0.99999999995)*r01*sj0);
evalcond[0]=((((-1.0)*x866*x867))+(((-1.0)*x866*x868))+((cj1*r02))+(((-1.0)*sj1*x871))+(((-1.0)*(IKsin(j3))))+((sj1*x870)));
evalcond[1]=(((x868*x869))+((x867*x869))+((r02*sj1))+((cj1*x871))+(((-1.0)*cj1*x870))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x872=((9.9999999995e-6)*r00);
IkReal x873=(cj1*sj0);
IkReal x874=(py*sj1);
IkReal x875=((9.9999999995e-6)*cj0);
IkReal x876=(sj0*sj1);
IkReal x877=((0.99999999995)*sj0);
IkReal x878=((0.99999999995)*r01);
IkReal x879=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x872))+(((-1.0)*r00*x877))+((cj0*x878)));
evalcond[2]=((-1.0)+((x872*x876))+(((-1.0)*x876*x878))+((cj1*r02))+(((-1.0)*sj1*x879))+(((-1.0)*r01*sj1*x875)));
evalcond[3]=((((-1.0)*x872*x873))+((cj1*r01*x875))+((x873*x878))+((r02*sj1))+((cj1*x879)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((9.9999999995e-6)*px*x876))+(((-1.0)*x874*x877))+(((-1.0)*x874*x875)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x880=(cj0*py);
IkReal x881=((8.33333333291667e-5)*cj1);
IkReal x882=(px*sj0);
IkReal x883=(py*sj0);
IkReal x884=(cj0*px);
IkReal x885=((8.33333333291667)*cj1);
if( IKabs(((((8.33333333291667)*x880))+(((-8.33333333291667)*x882))+(((-8.33333333291667e-5)*x884))+(((-8.33333333291667e-5)*x883)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((x880*x881))+((x883*x885))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x881*x882))+((x884*x885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x880))+(((-8.33333333291667)*x882))+(((-8.33333333291667e-5)*x884))+(((-8.33333333291667e-5)*x883))))+IKsqr(((-0.63675)+((x880*x881))+((x883*x885))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x881*x882))+((x884*x885))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x880))+(((-8.33333333291667)*x882))+(((-8.33333333291667e-5)*x884))+(((-8.33333333291667e-5)*x883))), ((-0.63675)+((x880*x881))+((x883*x885))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x881*x882))+((x884*x885))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x886=((9.9999999995e-6)*px);
IkReal x887=((9.9999999995e-6)*py);
IkReal x888=((0.99999999995)*px);
IkReal x889=(cj1*sj0);
IkReal x890=(cj0*cj1);
IkReal x891=((0.99999999995)*py);
evalcond[0]=(((cj0*x891))+(((-1.0)*cj0*x886))+(((-1.0)*sj0*x888))+(((-1.0)*sj0*x887))+(((-0.12)*(IKsin(j4)))));
evalcond[1]=((-0.07641)+(((-1.0)*x886*x889))+(((-0.12)*(IKcos(j4))))+((x889*x891))+((pz*sj1))+((x888*x890))+((x887*x890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x892=((9.9999999995e-6)*r00);
IkReal x893=(cj1*sj0);
IkReal x894=(py*sj1);
IkReal x895=((9.9999999995e-6)*cj0);
IkReal x896=(sj0*sj1);
IkReal x897=((0.99999999995)*sj0);
IkReal x898=((0.99999999995)*r01);
IkReal x899=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x892))+((cj0*x898))+(((-1.0)*r00*x897)));
evalcond[2]=((1.0)+(((-1.0)*x896*x898))+(((-1.0)*r01*sj1*x895))+((cj1*r02))+((x892*x896))+(((-1.0)*sj1*x899)));
evalcond[3]=((((-1.0)*x892*x893))+((r02*sj1))+((x893*x898))+((cj1*x899))+((cj1*r01*x895)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x896))+((cj1*pz))+(((-1.0)*x894*x895))+(((-1.0)*x894*x897)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x900=(cj0*py);
IkReal x901=((8.33333333291667e-5)*cj1);
IkReal x902=(px*sj0);
IkReal x903=(py*sj0);
IkReal x904=(cj0*px);
IkReal x905=((8.33333333291667)*cj1);
if( IKabs(((((8.33333333291667)*x900))+(((-8.33333333291667)*x902))+(((-8.33333333291667e-5)*x903))+(((-8.33333333291667e-5)*x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*x900*x901))+(((-1.0)*x903*x905))+((x901*x902))+(((-1.0)*x904*x905))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x900))+(((-8.33333333291667)*x902))+(((-8.33333333291667e-5)*x903))+(((-8.33333333291667e-5)*x904))))+IKsqr(((-0.63675)+(((-1.0)*x900*x901))+(((-1.0)*x903*x905))+((x901*x902))+(((-1.0)*x904*x905))+(((-8.33333333333333)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x900))+(((-8.33333333291667)*x902))+(((-8.33333333291667e-5)*x903))+(((-8.33333333291667e-5)*x904))), ((-0.63675)+(((-1.0)*x900*x901))+(((-1.0)*x903*x905))+((x901*x902))+(((-1.0)*x904*x905))+(((-8.33333333333333)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x906=((9.9999999995e-6)*px);
IkReal x907=((9.9999999995e-6)*py);
IkReal x908=((0.99999999995)*px);
IkReal x909=(cj1*sj0);
IkReal x910=(cj0*cj1);
IkReal x911=((0.99999999995)*py);
evalcond[0]=((((-1.0)*sj0*x908))+(((-1.0)*sj0*x907))+(((-1.0)*cj0*x906))+((cj0*x911))+(((-0.12)*(IKsin(j4)))));
evalcond[1]=((0.07641)+((x909*x911))+(((0.12)*(IKcos(j4))))+((x907*x910))+((x908*x910))+((pz*sj1))+(((-1.0)*x906*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x912=((9.9999999995e-6)*r00);
IkReal x913=(cj1*sj0);
IkReal x914=(sj0*sj1);
IkReal x915=((0.99999999995)*r01);
IkReal x916=(cj0*cj1);
IkReal x917=((9.9999999995e-6)*r01);
IkReal x918=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj0*x917))+(((-1.0)*cj0*x912))+((cj0*x915))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*cj0*sj1*x917))+((cj1*r02))+(((-1.0)*sj1*x918))+(((-1.0)*x914*x915))+((x912*x914)));
evalcond[3]=((-1.0)+((r02*sj1))+(((0.99999999995)*r00*x916))+(((-1.0)*x912*x913))+((x916*x917))+((x913*x915)));
evalcond[4]=((((9.9999999995e-6)*py*x916))+(((0.99999999995)*px*x916))+(((0.99999999995)*py*x913))+(((-9.9999999995e-6)*px*x913))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x919=((8.33333333291667)*cj0);
IkReal x920=((8.33333333291667)*sj0);
IkReal x921=((8.33333333291667e-5)*py);
IkReal x922=(px*sj1);
if( IKabs(((((-8.33333333291667e-5)*cj0*px))+(((-1.0)*px*x920))+(((-1.0)*sj0*x921))+((py*x919)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+((py*sj1*x920))+(((-8.33333333333333)*cj1*pz))+((x919*x922))+(((-8.33333333291667e-5)*sj0*x922))+((cj0*sj1*x921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667e-5)*cj0*px))+(((-1.0)*px*x920))+(((-1.0)*sj0*x921))+((py*x919))))+IKsqr(((-1.90258333333333)+((py*sj1*x920))+(((-8.33333333333333)*cj1*pz))+((x919*x922))+(((-8.33333333291667e-5)*sj0*x922))+((cj0*sj1*x921))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667e-5)*cj0*px))+(((-1.0)*px*x920))+(((-1.0)*sj0*x921))+((py*x919))), ((-1.90258333333333)+((py*sj1*x920))+(((-8.33333333333333)*cj1*pz))+((x919*x922))+(((-8.33333333291667e-5)*sj0*x922))+((cj0*sj1*x921))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x923=(cj0*px);
IkReal x924=(py*sj0);
IkReal x925=((0.99999999995)*sj1);
IkReal x926=(px*sj0);
IkReal x927=((9.9999999995e-6)*sj1);
IkReal x928=(cj0*py);
evalcond[0]=((((-0.99999999995)*x926))+(((0.99999999995)*x928))+(((-9.9999999995e-6)*x924))+(((-9.9999999995e-6)*x923))+(((-0.12)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+(((-1.0)*x924*x925))+(((-1.0)*x927*x928))+((cj1*pz))+((x926*x927))+(((-1.0)*x923*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x929=((9.9999999995e-6)*r00);
IkReal x930=(cj1*sj0);
IkReal x931=(sj0*sj1);
IkReal x932=((0.99999999995)*r01);
IkReal x933=(cj0*cj1);
IkReal x934=((9.9999999995e-6)*r01);
IkReal x935=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x929))+((cj0*x932))+(((-1.0)*sj0*x934))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj1*x935))+(((-1.0)*x931*x932))+((cj1*r02))+((x929*x931))+(((-1.0)*cj0*sj1*x934)));
evalcond[3]=((1.0)+((r02*sj1))+((x930*x932))+(((-1.0)*x929*x930))+(((0.99999999995)*r00*x933))+((x933*x934)));
evalcond[4]=((((0.99999999995)*py*x930))+(((9.9999999995e-6)*py*x933))+(((0.99999999995)*px*x933))+(((-9.9999999995e-6)*px*x930))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x936=((8.33333333291667)*py);
IkReal x937=((8.33333333291667)*px);
IkReal x938=((8.33333333291667e-5)*py);
IkReal x939=(sj0*sj1);
IkReal x940=((8.33333333291667e-5)*px);
IkReal x941=(cj0*sj1);
if( IKabs((((cj0*x936))+(((-1.0)*sj0*x938))+(((-1.0)*sj0*x937))+(((-1.0)*cj0*x940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-1.0)*x938*x941))+((x939*x940))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x936*x939))+(((-1.0)*x937*x941)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x936))+(((-1.0)*sj0*x938))+(((-1.0)*sj0*x937))+(((-1.0)*cj0*x940))))+IKsqr(((0.629083333333333)+(((-1.0)*x938*x941))+((x939*x940))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x936*x939))+(((-1.0)*x937*x941))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*x936))+(((-1.0)*sj0*x938))+(((-1.0)*sj0*x937))+(((-1.0)*cj0*x940))), ((0.629083333333333)+(((-1.0)*x938*x941))+((x939*x940))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x936*x939))+(((-1.0)*x937*x941))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x942=(cj0*px);
IkReal x943=(py*sj0);
IkReal x944=((0.99999999995)*sj1);
IkReal x945=(px*sj0);
IkReal x946=((9.9999999995e-6)*sj1);
IkReal x947=(cj0*py);
evalcond[0]=((((-0.99999999995)*x945))+(((0.99999999995)*x947))+(((-9.9999999995e-6)*x943))+(((-9.9999999995e-6)*x942))+(((-0.12)*(IKsin(j4)))));
evalcond[1]=((0.07549)+((x945*x946))+(((-1.0)*x946*x947))+(((-1.0)*x942*x944))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x943*x944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x948=(cj0*py);
IkReal x949=(px*sj0);
IkReal x950=(py*sj0);
IkReal x951=((24.99999999875)*sj1);
IkReal x952=(cj0*px);
IkReal x953=((0.0002499999999875)*sj1);
CheckValue<IkReal> x954=IKPowWithIntegerCheck(cj3,-1);
if(!x954.valid){
continue;
}
if( IKabs(((((8.33333333291667)*x948))+(((-8.33333333291667)*x949))+(((-8.33333333291667e-5)*x950))+(((-8.33333333291667e-5)*x952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x954.value)*(((-3.7975)+((x951*x952))+(((-1.91025)*cj3))+((x948*x953))+(((-25.0)*cj1*pz))+(((-1.0)*x949*x953))+((x950*x951)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x948))+(((-8.33333333291667)*x949))+(((-8.33333333291667e-5)*x950))+(((-8.33333333291667e-5)*x952))))+IKsqr(((0.333333333333333)*(x954.value)*(((-3.7975)+((x951*x952))+(((-1.91025)*cj3))+((x948*x953))+(((-25.0)*cj1*pz))+(((-1.0)*x949*x953))+((x950*x951))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x948))+(((-8.33333333291667)*x949))+(((-8.33333333291667e-5)*x950))+(((-8.33333333291667e-5)*x952))), ((0.333333333333333)*(x954.value)*(((-3.7975)+((x951*x952))+(((-1.91025)*cj3))+((x948*x953))+(((-25.0)*cj1*pz))+(((-1.0)*x949*x953))+((x950*x951))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x955=IKcos(j4);
IkReal x956=((9.9999999995e-6)*px);
IkReal x957=((9.9999999995e-6)*py);
IkReal x958=((0.99999999995)*px);
IkReal x959=(cj1*sj0);
IkReal x960=(cj0*sj1);
IkReal x961=(cj0*cj1);
IkReal x962=(sj0*sj1);
IkReal x963=((0.99999999995)*py);
IkReal x964=((0.12)*x955);
evalcond[0]=(((cj0*x963))+(((-1.0)*sj0*x957))+(((-1.0)*sj0*x958))+(((-1.0)*cj0*x956))+(((-0.12)*(IKsin(j4)))));
evalcond[1]=((((-0.07641)*sj3))+(((-1.0)*x956*x959))+((x957*x961))+(((-1.0)*sj3*x964))+((x959*x963))+((pz*sj1))+((x958*x961)));
evalcond[2]=((0.1519)+(((-1.0)*x962*x963))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x958*x960))+((cj3*x964))+(((-1.0)*x957*x960))+((x956*x962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x965=(cj0*py);
IkReal x966=(px*sj0);
IkReal x967=(py*sj0);
IkReal x968=((24.99999999875)*cj1);
IkReal x969=(cj0*px);
IkReal x970=((0.0002499999999875)*cj1);
CheckValue<IkReal> x971=IKPowWithIntegerCheck(sj3,-1);
if(!x971.valid){
continue;
}
if( IKabs(((((8.33333333291667)*x965))+(((-8.33333333291667e-5)*x967))+(((-8.33333333291667e-5)*x969))+(((-8.33333333291667)*x966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x971.value)*(((((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x966*x970))+((x965*x970))+((x967*x968))+((x968*x969)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x965))+(((-8.33333333291667e-5)*x967))+(((-8.33333333291667e-5)*x969))+(((-8.33333333291667)*x966))))+IKsqr(((0.333333333333333)*(x971.value)*(((((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x966*x970))+((x965*x970))+((x967*x968))+((x968*x969))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x965))+(((-8.33333333291667e-5)*x967))+(((-8.33333333291667e-5)*x969))+(((-8.33333333291667)*x966))), ((0.333333333333333)*(x971.value)*(((((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x966*x970))+((x965*x970))+((x967*x968))+((x968*x969))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x972=IKcos(j4);
IkReal x973=((9.9999999995e-6)*px);
IkReal x974=((9.9999999995e-6)*py);
IkReal x975=((0.99999999995)*px);
IkReal x976=(cj1*sj0);
IkReal x977=(cj0*sj1);
IkReal x978=(cj0*cj1);
IkReal x979=(sj0*sj1);
IkReal x980=((0.99999999995)*py);
IkReal x981=((0.12)*x972);
evalcond[0]=((((-1.0)*sj0*x974))+(((-1.0)*sj0*x975))+(((-1.0)*cj0*x973))+(((-0.12)*(IKsin(j4))))+((cj0*x980)));
evalcond[1]=((((-0.07641)*sj3))+((x975*x978))+((x976*x980))+((x974*x978))+(((-1.0)*sj3*x981))+((pz*sj1))+(((-1.0)*x973*x976)));
evalcond[2]=((0.1519)+(((-1.0)*x974*x977))+((cj1*pz))+((x973*x979))+(((0.07641)*cj3))+((cj3*x981))+(((-1.0)*x979*x980))+(((-1.0)*x975*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x982=(cj0*sj1);
IkReal x983=((0.99999999995)*r00);
IkReal x984=((9.9999999995e-6)*r01);
IkReal x985=(cj0*cj1);
IkReal x986=((9.9999999995e-6)*r00*sj0);
IkReal x987=((0.99999999995)*r01*sj0);
CheckValue<IkReal> x988=IKPowWithIntegerCheck(cj2,-1);
if(!x988.valid){
continue;
}
if( IKabs((((cj1*r02))+((sj1*x986))+(((-1.0)*x982*x983))+(((-1.0)*x982*x984))+(((-1.0)*sj1*x987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x988.value)*(((((-1.0)*cj1*x987))+((cj1*x986))+(((-1.0)*r02*sj1))+(((-1.0)*x984*x985))+(((-1.0)*x983*x985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x986))+(((-1.0)*x982*x983))+(((-1.0)*x982*x984))+(((-1.0)*sj1*x987))))+IKsqr(((x988.value)*(((((-1.0)*cj1*x987))+((cj1*x986))+(((-1.0)*r02*sj1))+(((-1.0)*x984*x985))+(((-1.0)*x983*x985))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r02))+((sj1*x986))+(((-1.0)*x982*x983))+(((-1.0)*x982*x984))+(((-1.0)*sj1*x987))), ((x988.value)*(((((-1.0)*cj1*x987))+((cj1*x986))+(((-1.0)*r02*sj1))+(((-1.0)*x984*x985))+(((-1.0)*x983*x985))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x989=IKcos(j3);
IkReal x990=((9.9999999995e-6)*sj0);
IkReal x991=(cj1*r00);
IkReal x992=(r00*sj1);
IkReal x993=((0.99999999995)*cj0);
IkReal x994=(r01*sj1);
IkReal x995=((9.9999999995e-6)*cj0);
IkReal x996=((0.99999999995)*sj0);
IkReal x997=(cj1*r01);
evalcond[0]=(((r01*x993))+(((-1.0)*r01*x990))+(((-1.0)*r00*x996))+(((-1.0)*r00*x995))+((sj2*x989)));
evalcond[1]=((((-1.0)*x994*x996))+(((-1.0)*x994*x995))+(((-1.0)*x992*x993))+((x990*x992))+((cj1*r02))+(((-1.0)*(IKsin(j3)))));
evalcond[2]=(((x991*x993))+(((-1.0)*x990*x991))+((r02*sj1))+((x995*x997))+((cj2*x989))+((x996*x997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x998=((9.9999999995e-6)*r00);
IkReal x999=(cj1*sj0);
IkReal x1000=(py*sj1);
IkReal x1001=((9.9999999995e-6)*cj0);
IkReal x1002=(sj0*sj1);
IkReal x1003=((0.99999999995)*sj0);
IkReal x1004=((0.99999999995)*r01);
IkReal x1005=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x998))+((cj0*x1004))+(((-1.0)*r00*x1003)));
evalcond[2]=((-1.0)+((cj1*r02))+((x1002*x998))+(((-1.0)*x1002*x1004))+(((-1.0)*sj1*x1005))+(((-1.0)*r01*sj1*x1001)));
evalcond[3]=(((r02*sj1))+((cj1*r01*x1001))+((cj1*x1005))+((x1004*x999))+(((-1.0)*x998*x999)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1002))+((cj1*pz))+(((-1.0)*x1000*x1003))+(((-1.0)*x1000*x1001)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1006=(cj0*cj1);
IkReal x1007=((8.33333333291667e-5)*py);
IkReal x1008=((8.33333333291667)*cj2);
IkReal x1009=(cj2*sj0);
IkReal x1010=(cj0*py);
IkReal x1011=(px*sj0);
IkReal x1012=((8.33333333291667)*sj2);
IkReal x1013=((8.33333333291667e-5)*sj2);
IkReal x1014=(cj0*px);
IkReal x1015=((8.33333333333333)*pz*sj1);
IkReal x1016=(cj1*py*sj0);
if( IKabs((((px*x1006*x1012))+(((-1.0)*x1008*x1010))+(((-1.0)*cj1*x1011*x1013))+((sj2*x1006*x1007))+((x1012*x1016))+(((8.33333333291667e-5)*cj2*x1014))+((sj2*x1015))+((x1007*x1009))+((x1008*x1011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*cj2*x1006*x1007))+(((-1.0)*x1010*x1012))+(((-1.0)*x1008*x1016))+((x1013*x1014))+(((8.33333333291667e-5)*cj1*px*x1009))+(((-1.0)*px*x1006*x1008))+(((-1.0)*cj2*x1015))+((x1011*x1012))+((sj0*sj2*x1007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1006*x1012))+(((-1.0)*x1008*x1010))+(((-1.0)*cj1*x1011*x1013))+((sj2*x1006*x1007))+((x1012*x1016))+(((8.33333333291667e-5)*cj2*x1014))+((sj2*x1015))+((x1007*x1009))+((x1008*x1011))))+IKsqr(((-0.63675)+(((-1.0)*cj2*x1006*x1007))+(((-1.0)*x1010*x1012))+(((-1.0)*x1008*x1016))+((x1013*x1014))+(((8.33333333291667e-5)*cj1*px*x1009))+(((-1.0)*px*x1006*x1008))+(((-1.0)*cj2*x1015))+((x1011*x1012))+((sj0*sj2*x1007))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x1006*x1012))+(((-1.0)*x1008*x1010))+(((-1.0)*cj1*x1011*x1013))+((sj2*x1006*x1007))+((x1012*x1016))+(((8.33333333291667e-5)*cj2*x1014))+((sj2*x1015))+((x1007*x1009))+((x1008*x1011))), ((-0.63675)+(((-1.0)*cj2*x1006*x1007))+(((-1.0)*x1010*x1012))+(((-1.0)*x1008*x1016))+((x1013*x1014))+(((8.33333333291667e-5)*cj1*px*x1009))+(((-1.0)*px*x1006*x1008))+(((-1.0)*cj2*x1015))+((x1011*x1012))+((sj0*sj2*x1007))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1017=IKcos(j4);
IkReal x1018=IKsin(j4);
IkReal x1019=((9.9999999995e-6)*px);
IkReal x1020=((0.12)*cj2);
IkReal x1021=((9.9999999995e-6)*py);
IkReal x1022=((0.99999999995)*px);
IkReal x1023=(cj1*sj0);
IkReal x1024=(cj0*cj1);
IkReal x1025=((0.12)*sj2);
IkReal x1026=((0.99999999995)*py);
evalcond[0]=(((x1017*x1025))+(((-1.0)*sj0*x1021))+(((-1.0)*sj0*x1022))+((x1018*x1020))+((cj0*x1026))+(((0.07641)*sj2))+(((-1.0)*cj0*x1019)));
evalcond[1]=(((x1017*x1020))+(((-1.0)*x1018*x1025))+(((-1.0)*x1019*x1023))+((x1023*x1026))+(((0.07641)*cj2))+((x1022*x1024))+((x1021*x1024))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1027=((9.9999999995e-6)*r00);
IkReal x1028=(cj1*sj0);
IkReal x1029=(py*sj1);
IkReal x1030=((9.9999999995e-6)*cj0);
IkReal x1031=(sj0*sj1);
IkReal x1032=((0.99999999995)*sj0);
IkReal x1033=((0.99999999995)*r01);
IkReal x1034=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1027))+((cj0*x1033))+(((-1.0)*r00*x1032)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj1*x1030))+((cj1*r02))+(((-1.0)*sj1*x1034))+(((-1.0)*x1031*x1033))+((x1027*x1031)));
evalcond[3]=(((cj1*r01*x1030))+((r02*sj1))+((x1028*x1033))+((cj1*x1034))+(((-1.0)*x1027*x1028)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1031))+(((-1.0)*x1029*x1030))+(((-1.0)*x1029*x1032))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1035=(cj0*cj1);
IkReal x1036=((8.33333333291667e-5)*py);
IkReal x1037=((8.33333333291667)*cj2);
IkReal x1038=(cj2*sj0);
IkReal x1039=(cj0*py);
IkReal x1040=(px*sj0);
IkReal x1041=((8.33333333291667)*sj2);
IkReal x1042=((8.33333333291667e-5)*sj2);
IkReal x1043=(cj0*px);
IkReal x1044=((8.33333333333333)*pz*sj1);
IkReal x1045=(cj1*py*sj0);
if( IKabs(((((-1.0)*x1037*x1039))+((x1036*x1038))+((x1037*x1040))+(((8.33333333291667e-5)*cj2*x1043))+((px*x1035*x1041))+((sj2*x1044))+((x1041*x1045))+(((-1.0)*cj1*x1040*x1042))+((sj2*x1035*x1036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((x1037*x1045))+((x1039*x1041))+(((-1.0)*sj0*sj2*x1036))+((cj2*x1044))+(((-1.0)*x1042*x1043))+((cj2*x1035*x1036))+(((-8.33333333291667e-5)*cj1*px*x1038))+(((-1.0)*x1040*x1041))+((px*x1035*x1037)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1037*x1039))+((x1036*x1038))+((x1037*x1040))+(((8.33333333291667e-5)*cj2*x1043))+((px*x1035*x1041))+((sj2*x1044))+((x1041*x1045))+(((-1.0)*cj1*x1040*x1042))+((sj2*x1035*x1036))))+IKsqr(((-0.63675)+((x1037*x1045))+((x1039*x1041))+(((-1.0)*sj0*sj2*x1036))+((cj2*x1044))+(((-1.0)*x1042*x1043))+((cj2*x1035*x1036))+(((-8.33333333291667e-5)*cj1*px*x1038))+(((-1.0)*x1040*x1041))+((px*x1035*x1037))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1037*x1039))+((x1036*x1038))+((x1037*x1040))+(((8.33333333291667e-5)*cj2*x1043))+((px*x1035*x1041))+((sj2*x1044))+((x1041*x1045))+(((-1.0)*cj1*x1040*x1042))+((sj2*x1035*x1036))), ((-0.63675)+((x1037*x1045))+((x1039*x1041))+(((-1.0)*sj0*sj2*x1036))+((cj2*x1044))+(((-1.0)*x1042*x1043))+((cj2*x1035*x1036))+(((-8.33333333291667e-5)*cj1*px*x1038))+(((-1.0)*x1040*x1041))+((px*x1035*x1037))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1046=IKcos(j4);
IkReal x1047=IKsin(j4);
IkReal x1048=((9.9999999995e-6)*px);
IkReal x1049=((0.12)*cj2);
IkReal x1050=((9.9999999995e-6)*py);
IkReal x1051=((0.99999999995)*px);
IkReal x1052=(cj1*sj0);
IkReal x1053=(cj0*cj1);
IkReal x1054=((0.12)*sj2);
IkReal x1055=((0.99999999995)*py);
evalcond[0]=((((-0.07641)*sj2))+(((-1.0)*x1046*x1054))+((cj0*x1055))+(((-1.0)*cj0*x1048))+(((-1.0)*sj0*x1051))+(((-1.0)*sj0*x1050))+((x1047*x1049)));
evalcond[1]=((((-1.0)*x1046*x1049))+((x1052*x1055))+((x1050*x1053))+((x1051*x1053))+(((-0.07641)*cj2))+(((-1.0)*x1048*x1052))+((pz*sj1))+(((-1.0)*x1047*x1054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1056=((9.9999999995e-6)*r00);
IkReal x1057=(cj1*sj0);
IkReal x1058=(sj0*sj1);
IkReal x1059=((0.99999999995)*r01);
IkReal x1060=((0.99999999995)*cj0*r00);
IkReal x1061=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1059))+(((-1.0)*cj0*x1056))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj3))+((x1056*x1058))+(((-1.0)*x1058*x1059))+(((-1.0)*sj1*x1060))+(((-1.0)*sj1*x1061))+((cj1*r02)));
evalcond[3]=(cj3+((x1057*x1059))+((r02*sj1))+((cj1*x1061))+((cj1*x1060))+(((-1.0)*x1056*x1057)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1062=((9.9999999995e-6)*r00);
IkReal x1063=(cj1*sj0);
IkReal x1064=(py*sj1);
IkReal x1065=((9.9999999995e-6)*cj0);
IkReal x1066=(sj0*sj1);
IkReal x1067=((0.99999999995)*sj0);
IkReal x1068=((0.99999999995)*r01);
IkReal x1069=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1068))+(((-1.0)*r00*x1067))+(((-1.0)*cj0*x1062)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x1069))+((cj1*r02))+((x1062*x1066))+(((-1.0)*x1066*x1068))+(((-1.0)*r01*sj1*x1065)));
evalcond[3]=(((r02*sj1))+(((-1.0)*x1062*x1063))+((cj1*x1069))+((x1063*x1068))+((cj1*r01*x1065)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((9.9999999995e-6)*px*x1066))+(((-1.0)*x1064*x1065))+(((-1.0)*x1064*x1067)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1070=(cj0*py);
IkReal x1071=((8.33333333291667e-5)*cj1);
IkReal x1072=(px*sj0);
IkReal x1073=(py*sj0);
IkReal x1074=(cj0*px);
IkReal x1075=((8.33333333291667)*cj1);
if( IKabs(((((-8.33333333291667)*x1070))+(((8.33333333291667)*x1072))+(((8.33333333291667e-5)*x1074))+(((8.33333333291667e-5)*x1073)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*x1074*x1075))+(((-1.0)*x1073*x1075))+(((-1.0)*x1070*x1071))+((x1071*x1072))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667)*x1070))+(((8.33333333291667)*x1072))+(((8.33333333291667e-5)*x1074))+(((8.33333333291667e-5)*x1073))))+IKsqr(((-0.63675)+(((-1.0)*x1074*x1075))+(((-1.0)*x1073*x1075))+(((-1.0)*x1070*x1071))+((x1071*x1072))+(((-8.33333333333333)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667)*x1070))+(((8.33333333291667)*x1072))+(((8.33333333291667e-5)*x1074))+(((8.33333333291667e-5)*x1073))), ((-0.63675)+(((-1.0)*x1074*x1075))+(((-1.0)*x1073*x1075))+(((-1.0)*x1070*x1071))+((x1071*x1072))+(((-8.33333333333333)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1076=((9.9999999995e-6)*px);
IkReal x1077=((9.9999999995e-6)*py);
IkReal x1078=((0.99999999995)*px);
IkReal x1079=(cj1*sj0);
IkReal x1080=(cj0*cj1);
IkReal x1081=((0.99999999995)*py);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*cj0*x1076))+(((-1.0)*sj0*x1078))+(((-1.0)*sj0*x1077))+((cj0*x1081)));
evalcond[1]=((0.07641)+((x1079*x1081))+((x1078*x1080))+(((-1.0)*x1076*x1079))+(((0.12)*(IKcos(j4))))+((x1077*x1080))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1082=((9.9999999995e-6)*r00);
IkReal x1083=(cj1*sj0);
IkReal x1084=(py*sj1);
IkReal x1085=((9.9999999995e-6)*cj0);
IkReal x1086=(sj0*sj1);
IkReal x1087=((0.99999999995)*sj0);
IkReal x1088=((0.99999999995)*r01);
IkReal x1089=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1082))+(((-1.0)*r00*x1087))+((cj0*x1088)));
evalcond[2]=((1.0)+((x1082*x1086))+(((-1.0)*sj1*x1089))+(((-1.0)*r01*sj1*x1085))+((cj1*r02))+(((-1.0)*x1086*x1088)));
evalcond[3]=(((cj1*r01*x1085))+((cj1*x1089))+((r02*sj1))+(((-1.0)*x1082*x1083))+((x1083*x1088)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((-1.0)*x1084*x1087))+(((-1.0)*x1084*x1085))+(((9.9999999995e-6)*px*x1086)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1090=(cj0*py);
IkReal x1091=((8.33333333291667e-5)*cj1);
IkReal x1092=(px*sj0);
IkReal x1093=(py*sj0);
IkReal x1094=(cj0*px);
IkReal x1095=((8.33333333291667)*cj1);
if( IKabs(((((8.33333333291667e-5)*x1093))+(((8.33333333291667e-5)*x1094))+(((-8.33333333291667)*x1090))+(((8.33333333291667)*x1092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*x1091*x1092))+(((8.33333333333333)*pz*sj1))+((x1094*x1095))+((x1093*x1095))+((x1090*x1091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667e-5)*x1093))+(((8.33333333291667e-5)*x1094))+(((-8.33333333291667)*x1090))+(((8.33333333291667)*x1092))))+IKsqr(((-0.63675)+(((-1.0)*x1091*x1092))+(((8.33333333333333)*pz*sj1))+((x1094*x1095))+((x1093*x1095))+((x1090*x1091))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667e-5)*x1093))+(((8.33333333291667e-5)*x1094))+(((-8.33333333291667)*x1090))+(((8.33333333291667)*x1092))), ((-0.63675)+(((-1.0)*x1091*x1092))+(((8.33333333333333)*pz*sj1))+((x1094*x1095))+((x1093*x1095))+((x1090*x1091))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1096=((9.9999999995e-6)*px);
IkReal x1097=((9.9999999995e-6)*py);
IkReal x1098=((0.99999999995)*px);
IkReal x1099=(cj1*sj0);
IkReal x1100=(cj0*cj1);
IkReal x1101=((0.99999999995)*py);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*cj0*x1096))+((cj0*x1101))+(((-1.0)*sj0*x1097))+(((-1.0)*sj0*x1098)));
evalcond[1]=((-0.07641)+((x1098*x1100))+((x1097*x1100))+(((-1.0)*x1096*x1099))+((x1099*x1101))+(((-0.12)*(IKcos(j4))))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1102=((9.9999999995e-6)*r00);
IkReal x1103=(cj1*sj0);
IkReal x1104=(sj0*sj1);
IkReal x1105=((0.99999999995)*r01);
IkReal x1106=(cj0*cj1);
IkReal x1107=((9.9999999995e-6)*r01);
IkReal x1108=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-0.99999999995)*r00*sj0))+((cj0*x1105))+(((-1.0)*cj0*x1102))+(((-1.0)*sj0*x1107)));
evalcond[2]=(((x1102*x1104))+((cj1*r02))+(((-1.0)*sj1*x1108))+(((-1.0)*cj0*sj1*x1107))+(((-1.0)*x1104*x1105)));
evalcond[3]=((1.0)+(((0.99999999995)*r00*x1106))+((r02*sj1))+((x1103*x1105))+(((-1.0)*x1102*x1103))+((x1106*x1107)));
evalcond[4]=((((0.99999999995)*px*x1106))+(((0.99999999995)*py*x1103))+((pz*sj1))+(((-9.9999999995e-6)*px*x1103))+(((9.9999999995e-6)*py*x1106)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1109=((8.33333333291667)*cj0);
IkReal x1110=((8.33333333291667)*sj0);
IkReal x1111=((8.33333333291667e-5)*py);
IkReal x1112=(px*sj1);
if( IKabs(((((-1.0)*py*x1109))+((sj0*x1111))+((px*x1110))+(((8.33333333291667e-5)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+((x1109*x1112))+(((-8.33333333333333)*cj1*pz))+((py*sj1*x1110))+(((-8.33333333291667e-5)*sj0*x1112))+((cj0*sj1*x1111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x1109))+((sj0*x1111))+((px*x1110))+(((8.33333333291667e-5)*cj0*px))))+IKsqr(((-1.90258333333333)+((x1109*x1112))+(((-8.33333333333333)*cj1*pz))+((py*sj1*x1110))+(((-8.33333333291667e-5)*sj0*x1112))+((cj0*sj1*x1111))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*py*x1109))+((sj0*x1111))+((px*x1110))+(((8.33333333291667e-5)*cj0*px))), ((-1.90258333333333)+((x1109*x1112))+(((-8.33333333333333)*cj1*pz))+((py*sj1*x1110))+(((-8.33333333291667e-5)*sj0*x1112))+((cj0*sj1*x1111))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1113=(cj0*px);
IkReal x1114=(py*sj0);
IkReal x1115=((0.99999999995)*sj1);
IkReal x1116=(px*sj0);
IkReal x1117=((9.9999999995e-6)*sj1);
IkReal x1118=(cj0*py);
evalcond[0]=((((-0.99999999995)*x1116))+(((0.99999999995)*x1118))+(((-9.9999999995e-6)*x1114))+(((-9.9999999995e-6)*x1113))+(((0.12)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((-1.0)*x1114*x1115))+(((0.12)*(IKcos(j4))))+(((-1.0)*x1113*x1115))+((cj1*pz))+((x1116*x1117))+(((-1.0)*x1117*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1119=((9.9999999995e-6)*r00);
IkReal x1120=(cj1*sj0);
IkReal x1121=(sj0*sj1);
IkReal x1122=((0.99999999995)*r01);
IkReal x1123=(cj0*cj1);
IkReal x1124=((9.9999999995e-6)*r01);
IkReal x1125=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj0*x1122))+(((-1.0)*sj0*x1124))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj0*x1119)));
evalcond[2]=((((-1.0)*cj0*sj1*x1124))+(((-1.0)*sj1*x1125))+(((-1.0)*x1121*x1122))+((x1119*x1121))+((cj1*r02)));
evalcond[3]=((-1.0)+((x1120*x1122))+((r02*sj1))+(((0.99999999995)*r00*x1123))+(((-1.0)*x1119*x1120))+((x1123*x1124)));
evalcond[4]=((((9.9999999995e-6)*py*x1123))+(((0.99999999995)*px*x1123))+(((0.99999999995)*py*x1120))+((pz*sj1))+(((-9.9999999995e-6)*px*x1120)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1126=((8.33333333291667)*py);
IkReal x1127=((8.33333333291667)*px);
IkReal x1128=((8.33333333291667e-5)*py);
IkReal x1129=(sj0*sj1);
IkReal x1130=((8.33333333291667e-5)*px);
IkReal x1131=(cj0*sj1);
if( IKabs((((cj0*x1130))+((sj0*x1128))+((sj0*x1127))+(((-1.0)*cj0*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((x1129*x1130))+(((-1.0)*x1126*x1129))+(((-1.0)*x1127*x1131))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x1128*x1131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x1130))+((sj0*x1128))+((sj0*x1127))+(((-1.0)*cj0*x1126))))+IKsqr(((0.629083333333333)+((x1129*x1130))+(((-1.0)*x1126*x1129))+(((-1.0)*x1127*x1131))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x1128*x1131))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*x1130))+((sj0*x1128))+((sj0*x1127))+(((-1.0)*cj0*x1126))), ((0.629083333333333)+((x1129*x1130))+(((-1.0)*x1126*x1129))+(((-1.0)*x1127*x1131))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x1128*x1131))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1132=(cj0*px);
IkReal x1133=(py*sj0);
IkReal x1134=((0.99999999995)*sj1);
IkReal x1135=(px*sj0);
IkReal x1136=((9.9999999995e-6)*sj1);
IkReal x1137=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x1132))+(((-9.9999999995e-6)*x1133))+(((0.12)*(IKsin(j4))))+(((-0.99999999995)*x1135))+(((0.99999999995)*x1137)));
evalcond[1]=((0.07549)+((x1135*x1136))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x1132*x1134))+(((-1.0)*x1136*x1137))+(((-1.0)*x1133*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1138=(cj0*py);
IkReal x1139=(px*sj0);
IkReal x1140=(py*sj0);
IkReal x1141=((24.99999999875)*sj1);
IkReal x1142=(cj0*px);
IkReal x1143=((0.0002499999999875)*sj1);
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(cj3,-1);
if(!x1144.valid){
continue;
}
if( IKabs(((((8.33333333291667)*x1139))+(((-8.33333333291667)*x1138))+(((8.33333333291667e-5)*x1140))+(((8.33333333291667e-5)*x1142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1144.value)*(((-3.7975)+((x1140*x1141))+((x1141*x1142))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x1139*x1143))+((x1138*x1143)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x1139))+(((-8.33333333291667)*x1138))+(((8.33333333291667e-5)*x1140))+(((8.33333333291667e-5)*x1142))))+IKsqr(((0.333333333333333)*(x1144.value)*(((-3.7975)+((x1140*x1141))+((x1141*x1142))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x1139*x1143))+((x1138*x1143))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x1139))+(((-8.33333333291667)*x1138))+(((8.33333333291667e-5)*x1140))+(((8.33333333291667e-5)*x1142))), ((0.333333333333333)*(x1144.value)*(((-3.7975)+((x1140*x1141))+((x1141*x1142))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x1139*x1143))+((x1138*x1143))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1145=IKcos(j4);
IkReal x1146=((9.9999999995e-6)*px);
IkReal x1147=((9.9999999995e-6)*py);
IkReal x1148=((0.99999999995)*px);
IkReal x1149=(cj1*sj0);
IkReal x1150=(cj0*sj1);
IkReal x1151=(cj0*cj1);
IkReal x1152=(sj0*sj1);
IkReal x1153=((0.99999999995)*py);
IkReal x1154=((0.12)*x1145);
evalcond[0]=(((cj0*x1153))+(((0.12)*(IKsin(j4))))+(((-1.0)*cj0*x1146))+(((-1.0)*sj0*x1148))+(((-1.0)*sj0*x1147)));
evalcond[1]=(((x1149*x1153))+((sj3*x1154))+(((-1.0)*x1146*x1149))+((x1147*x1151))+((x1148*x1151))+((pz*sj1))+(((0.07641)*sj3)));
evalcond[2]=((0.1519)+((x1146*x1152))+((cj3*x1154))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1147*x1150))+(((-1.0)*x1152*x1153))+(((-1.0)*x1148*x1150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1155=(cj0*py);
IkReal x1156=(px*sj0);
IkReal x1157=(py*sj0);
IkReal x1158=((24.99999999875)*cj1);
IkReal x1159=(cj0*px);
IkReal x1160=((0.0002499999999875)*cj1);
CheckValue<IkReal> x1161=IKPowWithIntegerCheck(sj3,-1);
if(!x1161.valid){
continue;
}
if( IKabs(((((8.33333333291667)*x1156))+(((-8.33333333291667)*x1155))+(((8.33333333291667e-5)*x1159))+(((8.33333333291667e-5)*x1157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1161.value)*(((((-1.0)*x1157*x1158))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x1158*x1159))+((x1156*x1160))+(((-1.0)*x1155*x1160)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x1156))+(((-8.33333333291667)*x1155))+(((8.33333333291667e-5)*x1159))+(((8.33333333291667e-5)*x1157))))+IKsqr(((0.333333333333333)*(x1161.value)*(((((-1.0)*x1157*x1158))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x1158*x1159))+((x1156*x1160))+(((-1.0)*x1155*x1160))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x1156))+(((-8.33333333291667)*x1155))+(((8.33333333291667e-5)*x1159))+(((8.33333333291667e-5)*x1157))), ((0.333333333333333)*(x1161.value)*(((((-1.0)*x1157*x1158))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x1158*x1159))+((x1156*x1160))+(((-1.0)*x1155*x1160))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1162=IKcos(j4);
IkReal x1163=((9.9999999995e-6)*px);
IkReal x1164=((9.9999999995e-6)*py);
IkReal x1165=((0.99999999995)*px);
IkReal x1166=(cj1*sj0);
IkReal x1167=(cj0*sj1);
IkReal x1168=(cj0*cj1);
IkReal x1169=(sj0*sj1);
IkReal x1170=((0.99999999995)*py);
IkReal x1171=((0.12)*x1162);
evalcond[0]=((((-1.0)*cj0*x1163))+((cj0*x1170))+(((-1.0)*sj0*x1165))+(((-1.0)*sj0*x1164))+(((0.12)*(IKsin(j4)))));
evalcond[1]=(((sj3*x1171))+((x1164*x1168))+((x1165*x1168))+((x1166*x1170))+(((-1.0)*x1163*x1166))+((pz*sj1))+(((0.07641)*sj3)));
evalcond[2]=((0.1519)+((x1163*x1169))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1169*x1170))+((cj3*x1171))+(((-1.0)*x1164*x1167))+(((-1.0)*x1165*x1167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1172=((9.9999999995e-6)*r00);
IkReal x1173=(cj1*sj0);
IkReal x1174=(sj0*sj1);
IkReal x1175=((0.99999999995)*r01);
IkReal x1176=((0.99999999995)*cj0*r00);
IkReal x1177=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1172))+((cj0*x1175))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*sj1*x1176))+(((-1.0)*sj1*x1177))+((cj1*r02))+((x1172*x1174))+(((-1.0)*x1174*x1175)));
evalcond[3]=(((cj1*x1177))+((cj1*x1176))+((x1173*x1175))+(((-1.0)*x1172*x1173))+((r02*sj1))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1178=((9.9999999995e-6)*r00);
IkReal x1179=(cj1*sj0);
IkReal x1180=(py*sj1);
IkReal x1181=((9.9999999995e-6)*cj0);
IkReal x1182=(sj0*sj1);
IkReal x1183=((0.99999999995)*sj0);
IkReal x1184=((0.99999999995)*r01);
IkReal x1185=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1178))+((cj0*x1184))+(((-1.0)*r00*x1183)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x1185))+((x1178*x1182))+((cj1*r02))+(((-1.0)*x1182*x1184))+(((-1.0)*r01*sj1*x1181)));
evalcond[3]=(((x1179*x1184))+(((-1.0)*x1178*x1179))+((r02*sj1))+((cj1*r01*x1181))+((cj1*x1185)));
evalcond[4]=((0.1519)+(((9.9999999995e-6)*px*x1182))+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((-1.0)*x1180*x1181))+(((-1.0)*x1180*x1183)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1186=(cj0*py);
IkReal x1187=((8.33333333291667e-5)*cj1);
IkReal x1188=(px*sj0);
IkReal x1189=(py*sj0);
IkReal x1190=(cj0*px);
IkReal x1191=((8.33333333291667)*cj1);
if( IKabs(((((-8.33333333291667e-5)*x1190))+(((8.33333333291667)*x1186))+(((-8.33333333291667e-5)*x1189))+(((-8.33333333291667)*x1188)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((x1186*x1187))+(((8.33333333333333)*pz*sj1))+((x1189*x1191))+(((-1.0)*x1187*x1188))+((x1190*x1191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667e-5)*x1190))+(((8.33333333291667)*x1186))+(((-8.33333333291667e-5)*x1189))+(((-8.33333333291667)*x1188))))+IKsqr(((-0.63675)+((x1186*x1187))+(((8.33333333333333)*pz*sj1))+((x1189*x1191))+(((-1.0)*x1187*x1188))+((x1190*x1191))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667e-5)*x1190))+(((8.33333333291667)*x1186))+(((-8.33333333291667e-5)*x1189))+(((-8.33333333291667)*x1188))), ((-0.63675)+((x1186*x1187))+(((8.33333333333333)*pz*sj1))+((x1189*x1191))+(((-1.0)*x1187*x1188))+((x1190*x1191))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1192=((9.9999999995e-6)*px);
IkReal x1193=((9.9999999995e-6)*py);
IkReal x1194=((0.99999999995)*px);
IkReal x1195=(cj1*sj0);
IkReal x1196=(cj0*cj1);
IkReal x1197=((0.99999999995)*py);
evalcond[0]=(((cj0*x1197))+(((-0.12)*(IKsin(j4))))+(((-1.0)*sj0*x1193))+(((-1.0)*sj0*x1194))+(((-1.0)*cj0*x1192)));
evalcond[1]=((-0.07641)+((x1194*x1196))+((x1195*x1197))+(((-0.12)*(IKcos(j4))))+((x1193*x1196))+((pz*sj1))+(((-1.0)*x1192*x1195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1198=((9.9999999995e-6)*r00);
IkReal x1199=(cj1*sj0);
IkReal x1200=(py*sj1);
IkReal x1201=((9.9999999995e-6)*cj0);
IkReal x1202=(sj0*sj1);
IkReal x1203=((0.99999999995)*sj0);
IkReal x1204=((0.99999999995)*r01);
IkReal x1205=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj0*x1204))+(((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1203))+(((-1.0)*cj0*x1198)));
evalcond[2]=((1.0)+(((-1.0)*sj1*x1205))+((cj1*r02))+(((-1.0)*x1202*x1204))+(((-1.0)*r01*sj1*x1201))+((x1198*x1202)));
evalcond[3]=(((cj1*r01*x1201))+(((-1.0)*x1198*x1199))+((cj1*x1205))+((r02*sj1))+((x1199*x1204)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1202))+((cj1*pz))+(((-1.0)*x1200*x1203))+(((-1.0)*x1200*x1201)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1206=(cj0*py);
IkReal x1207=((8.33333333291667e-5)*cj1);
IkReal x1208=(px*sj0);
IkReal x1209=(py*sj0);
IkReal x1210=(cj0*px);
IkReal x1211=((8.33333333291667)*cj1);
if( IKabs(((((-8.33333333291667e-5)*x1209))+(((-8.33333333291667e-5)*x1210))+(((-8.33333333291667)*x1208))+(((8.33333333291667)*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*x1209*x1211))+(((-1.0)*x1210*x1211))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1206*x1207))+((x1207*x1208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667e-5)*x1209))+(((-8.33333333291667e-5)*x1210))+(((-8.33333333291667)*x1208))+(((8.33333333291667)*x1206))))+IKsqr(((-0.63675)+(((-1.0)*x1209*x1211))+(((-1.0)*x1210*x1211))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1206*x1207))+((x1207*x1208))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667e-5)*x1209))+(((-8.33333333291667e-5)*x1210))+(((-8.33333333291667)*x1208))+(((8.33333333291667)*x1206))), ((-0.63675)+(((-1.0)*x1209*x1211))+(((-1.0)*x1210*x1211))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1206*x1207))+((x1207*x1208))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1212=((9.9999999995e-6)*px);
IkReal x1213=((9.9999999995e-6)*py);
IkReal x1214=((0.99999999995)*px);
IkReal x1215=(cj1*sj0);
IkReal x1216=(cj0*cj1);
IkReal x1217=((0.99999999995)*py);
evalcond[0]=(((cj0*x1217))+(((-0.12)*(IKsin(j4))))+(((-1.0)*cj0*x1212))+(((-1.0)*sj0*x1213))+(((-1.0)*sj0*x1214)));
evalcond[1]=((0.07641)+((x1214*x1216))+((x1213*x1216))+(((0.12)*(IKcos(j4))))+(((-1.0)*x1212*x1215))+((pz*sj1))+((x1215*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1218=((9.9999999995e-6)*r00);
IkReal x1219=(cj1*sj0);
IkReal x1220=(sj0*sj1);
IkReal x1221=((0.99999999995)*r01);
IkReal x1222=(cj0*cj1);
IkReal x1223=((9.9999999995e-6)*r01);
IkReal x1224=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj0*x1221))+(((-1.0)*sj0*x1223))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj0*x1218)));
evalcond[2]=((((-1.0)*cj0*sj1*x1223))+((cj1*r02))+(((-1.0)*x1220*x1221))+((x1218*x1220))+(((-1.0)*sj1*x1224)));
evalcond[3]=((-1.0)+((x1219*x1221))+(((-1.0)*x1218*x1219))+((r02*sj1))+((x1222*x1223))+(((0.99999999995)*r00*x1222)));
evalcond[4]=((((9.9999999995e-6)*py*x1222))+(((0.99999999995)*px*x1222))+(((0.99999999995)*py*x1219))+((pz*sj1))+(((-9.9999999995e-6)*px*x1219)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1225=((8.33333333291667)*cj0);
IkReal x1226=((8.33333333291667)*sj0);
IkReal x1227=((8.33333333291667e-5)*py);
IkReal x1228=(px*sj1);
if( IKabs(((((-1.0)*px*x1226))+(((-8.33333333291667e-5)*cj0*px))+((py*x1225))+(((-1.0)*sj0*x1227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((py*sj1*x1226))+((x1225*x1228))+(((-8.33333333291667e-5)*sj0*x1228))+((cj0*sj1*x1227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x1226))+(((-8.33333333291667e-5)*cj0*px))+((py*x1225))+(((-1.0)*sj0*x1227))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((py*sj1*x1226))+((x1225*x1228))+(((-8.33333333291667e-5)*sj0*x1228))+((cj0*sj1*x1227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*px*x1226))+(((-8.33333333291667e-5)*cj0*px))+((py*x1225))+(((-1.0)*sj0*x1227))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((py*sj1*x1226))+((x1225*x1228))+(((-8.33333333291667e-5)*sj0*x1228))+((cj0*sj1*x1227))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1229=(cj0*px);
IkReal x1230=(py*sj0);
IkReal x1231=((0.99999999995)*sj1);
IkReal x1232=(px*sj0);
IkReal x1233=((9.9999999995e-6)*sj1);
IkReal x1234=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x1230))+(((-9.9999999995e-6)*x1229))+(((-0.99999999995)*x1232))+(((0.99999999995)*x1234))+(((-0.12)*(IKsin(j4)))));
evalcond[1]=((0.22831)+(((-1.0)*x1230*x1231))+(((0.12)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*x1229*x1231))+(((-1.0)*x1233*x1234))+((x1232*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1235=((9.9999999995e-6)*r00);
IkReal x1236=(cj1*sj0);
IkReal x1237=(sj0*sj1);
IkReal x1238=((0.99999999995)*r01);
IkReal x1239=(cj0*cj1);
IkReal x1240=((9.9999999995e-6)*r01);
IkReal x1241=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x1235))+(((-1.0)*sj0*x1240))+((cj0*x1238))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj1*x1241))+(((-1.0)*cj0*sj1*x1240))+((x1235*x1237))+((cj1*r02))+(((-1.0)*x1237*x1238)));
evalcond[3]=((1.0)+((x1239*x1240))+((r02*sj1))+(((-1.0)*x1235*x1236))+(((0.99999999995)*r00*x1239))+((x1236*x1238)));
evalcond[4]=((((0.99999999995)*py*x1236))+(((9.9999999995e-6)*py*x1239))+(((0.99999999995)*px*x1239))+(((-9.9999999995e-6)*px*x1236))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1242=((8.33333333291667)*py);
IkReal x1243=((8.33333333291667)*px);
IkReal x1244=((8.33333333291667e-5)*py);
IkReal x1245=(sj0*sj1);
IkReal x1246=((8.33333333291667e-5)*px);
IkReal x1247=(cj0*sj1);
if( IKabs(((((-1.0)*sj0*x1244))+(((-1.0)*sj0*x1243))+(((-1.0)*cj0*x1246))+((cj0*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-1.0)*x1244*x1247))+(((-1.0)*x1243*x1247))+(((-1.0)*x1242*x1245))+(((8.33333333333333)*cj1*pz))+((x1245*x1246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x1244))+(((-1.0)*sj0*x1243))+(((-1.0)*cj0*x1246))+((cj0*x1242))))+IKsqr(((0.629083333333333)+(((-1.0)*x1244*x1247))+(((-1.0)*x1243*x1247))+(((-1.0)*x1242*x1245))+(((8.33333333333333)*cj1*pz))+((x1245*x1246))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj0*x1244))+(((-1.0)*sj0*x1243))+(((-1.0)*cj0*x1246))+((cj0*x1242))), ((0.629083333333333)+(((-1.0)*x1244*x1247))+(((-1.0)*x1243*x1247))+(((-1.0)*x1242*x1245))+(((8.33333333333333)*cj1*pz))+((x1245*x1246))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1248=(cj0*px);
IkReal x1249=(py*sj0);
IkReal x1250=((0.99999999995)*sj1);
IkReal x1251=(px*sj0);
IkReal x1252=((9.9999999995e-6)*sj1);
IkReal x1253=(cj0*py);
evalcond[0]=((((-0.99999999995)*x1251))+(((0.99999999995)*x1253))+(((-9.9999999995e-6)*x1248))+(((-9.9999999995e-6)*x1249))+(((-0.12)*(IKsin(j4)))));
evalcond[1]=((0.07549)+(((-1.0)*x1249*x1250))+(((-1.0)*x1248*x1250))+(((-1.0)*x1252*x1253))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+((x1251*x1252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1254=(cj0*py);
IkReal x1255=(px*sj0);
IkReal x1256=(py*sj0);
IkReal x1257=((24.99999999875)*sj1);
IkReal x1258=(cj0*px);
IkReal x1259=((0.0002499999999875)*sj1);
CheckValue<IkReal> x1260=IKPowWithIntegerCheck(cj3,-1);
if(!x1260.valid){
continue;
}
if( IKabs(((((8.33333333291667)*x1254))+(((-8.33333333291667e-5)*x1256))+(((-8.33333333291667e-5)*x1258))+(((-8.33333333291667)*x1255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1260.value)*(((-3.7975)+((x1256*x1257))+(((-1.0)*x1255*x1259))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x1254*x1259))+((x1257*x1258)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x1254))+(((-8.33333333291667e-5)*x1256))+(((-8.33333333291667e-5)*x1258))+(((-8.33333333291667)*x1255))))+IKsqr(((0.333333333333333)*(x1260.value)*(((-3.7975)+((x1256*x1257))+(((-1.0)*x1255*x1259))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x1254*x1259))+((x1257*x1258))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x1254))+(((-8.33333333291667e-5)*x1256))+(((-8.33333333291667e-5)*x1258))+(((-8.33333333291667)*x1255))), ((0.333333333333333)*(x1260.value)*(((-3.7975)+((x1256*x1257))+(((-1.0)*x1255*x1259))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x1254*x1259))+((x1257*x1258))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1261=IKcos(j4);
IkReal x1262=((9.9999999995e-6)*px);
IkReal x1263=((9.9999999995e-6)*py);
IkReal x1264=((0.99999999995)*px);
IkReal x1265=(cj1*sj0);
IkReal x1266=(cj0*sj1);
IkReal x1267=(cj0*cj1);
IkReal x1268=(sj0*sj1);
IkReal x1269=((0.99999999995)*py);
IkReal x1270=((0.12)*x1261);
evalcond[0]=((((-1.0)*cj0*x1262))+((cj0*x1269))+(((-0.12)*(IKsin(j4))))+(((-1.0)*sj0*x1264))+(((-1.0)*sj0*x1263)));
evalcond[1]=((((-0.07641)*sj3))+((x1264*x1267))+(((-1.0)*x1262*x1265))+(((-1.0)*sj3*x1270))+((x1263*x1267))+((pz*sj1))+((x1265*x1269)));
evalcond[2]=((0.1519)+(((-1.0)*x1264*x1266))+(((-1.0)*x1268*x1269))+(((-1.0)*x1263*x1266))+((cj1*pz))+((cj3*x1270))+(((0.07641)*cj3))+((x1262*x1268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1271=(cj0*py);
IkReal x1272=(px*sj0);
IkReal x1273=(py*sj0);
IkReal x1274=((24.99999999875)*cj1);
IkReal x1275=(cj0*px);
IkReal x1276=((0.0002499999999875)*cj1);
CheckValue<IkReal> x1277=IKPowWithIntegerCheck(sj3,-1);
if(!x1277.valid){
continue;
}
if( IKabs(((((-8.33333333291667)*x1272))+(((8.33333333291667)*x1271))+(((-8.33333333291667e-5)*x1273))+(((-8.33333333291667e-5)*x1275)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1277.value)*(((((25.0)*pz*sj1))+(((-1.91025)*sj3))+((x1273*x1274))+((x1274*x1275))+(((-1.0)*x1272*x1276))+((x1271*x1276)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667)*x1272))+(((8.33333333291667)*x1271))+(((-8.33333333291667e-5)*x1273))+(((-8.33333333291667e-5)*x1275))))+IKsqr(((0.333333333333333)*(x1277.value)*(((((25.0)*pz*sj1))+(((-1.91025)*sj3))+((x1273*x1274))+((x1274*x1275))+(((-1.0)*x1272*x1276))+((x1271*x1276))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667)*x1272))+(((8.33333333291667)*x1271))+(((-8.33333333291667e-5)*x1273))+(((-8.33333333291667e-5)*x1275))), ((0.333333333333333)*(x1277.value)*(((((25.0)*pz*sj1))+(((-1.91025)*sj3))+((x1273*x1274))+((x1274*x1275))+(((-1.0)*x1272*x1276))+((x1271*x1276))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1278=IKcos(j4);
IkReal x1279=((9.9999999995e-6)*px);
IkReal x1280=((9.9999999995e-6)*py);
IkReal x1281=((0.99999999995)*px);
IkReal x1282=(cj1*sj0);
IkReal x1283=(cj0*sj1);
IkReal x1284=(cj0*cj1);
IkReal x1285=(sj0*sj1);
IkReal x1286=((0.99999999995)*py);
IkReal x1287=((0.12)*x1278);
evalcond[0]=((((-1.0)*cj0*x1279))+((cj0*x1286))+(((-0.12)*(IKsin(j4))))+(((-1.0)*sj0*x1280))+(((-1.0)*sj0*x1281)));
evalcond[1]=((((-0.07641)*sj3))+((pz*sj1))+((x1282*x1286))+((x1280*x1284))+(((-1.0)*sj3*x1287))+(((-1.0)*x1279*x1282))+((x1281*x1284)));
evalcond[2]=((0.1519)+((x1279*x1285))+(((-1.0)*x1285*x1286))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x1287))+(((-1.0)*x1280*x1283))+(((-1.0)*x1281*x1283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1288=((9.9999999995e-6)*r00);
IkReal x1289=(cj1*sj0);
IkReal x1290=(sj0*sj1);
IkReal x1291=((0.99999999995)*r01);
IkReal x1292=((0.99999999995)*cj0*r00);
IkReal x1293=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+cj3+((cj0*x1291))+(((-1.0)*cj0*x1288))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*sj1*x1292))+(((-1.0)*sj1*x1293))+((cj1*r02))+((x1288*x1290))+(((-1.0)*x1290*x1291)));
evalcond[3]=(((cj1*x1293))+((cj1*x1292))+((r02*sj1))+(((-1.0)*x1288*x1289))+((x1289*x1291)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1294=((9.9999999995e-6)*r00);
IkReal x1295=(cj1*sj0);
IkReal x1296=(py*sj1);
IkReal x1297=((9.9999999995e-6)*cj0);
IkReal x1298=(sj0*sj1);
IkReal x1299=((0.99999999995)*sj0);
IkReal x1300=((0.99999999995)*r01);
IkReal x1301=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1299))+(((-1.0)*cj0*x1294))+((cj0*x1300)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj1*x1297))+((x1294*x1298))+((cj1*r02))+(((-1.0)*sj1*x1301))+(((-1.0)*x1298*x1300)));
evalcond[3]=(((cj1*r01*x1297))+((x1295*x1300))+((r02*sj1))+((cj1*x1301))+(((-1.0)*x1294*x1295)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1298))+((cj1*pz))+(((-1.0)*x1296*x1299))+(((-1.0)*x1296*x1297)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1302=(cj0*py);
IkReal x1303=((8.33333333291667e-5)*cj1);
IkReal x1304=(px*sj0);
IkReal x1305=((8.33333333291667)*cj1);
IkReal x1306=(py*sj0);
IkReal x1307=(cj0*px);
if( IKabs((((x1305*x1307))+((x1305*x1306))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x1303*x1304))+((x1302*x1303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((8.33333333291667e-5)*x1306))+(((8.33333333291667e-5)*x1307))+(((-8.33333333291667)*x1302))+(((8.33333333291667)*x1304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1305*x1307))+((x1305*x1306))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x1303*x1304))+((x1302*x1303))))+IKsqr(((-0.63675)+(((8.33333333291667e-5)*x1306))+(((8.33333333291667e-5)*x1307))+(((-8.33333333291667)*x1302))+(((8.33333333291667)*x1304))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1305*x1307))+((x1305*x1306))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x1303*x1304))+((x1302*x1303))), ((-0.63675)+(((8.33333333291667e-5)*x1306))+(((8.33333333291667e-5)*x1307))+(((-8.33333333291667)*x1302))+(((8.33333333291667)*x1304))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1308=((9.9999999995e-6)*px);
IkReal x1309=((9.9999999995e-6)*py);
IkReal x1310=((0.99999999995)*px);
IkReal x1311=(cj1*sj0);
IkReal x1312=(cj0*cj1);
IkReal x1313=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((-1.0)*sj0*x1309))+(((-1.0)*cj0*x1308))+(((0.12)*(IKcos(j4))))+(((-1.0)*sj0*x1310))+((cj0*x1313)));
evalcond[1]=(((x1310*x1312))+((x1311*x1313))+(((-1.0)*x1308*x1311))+((x1309*x1312))+(((-0.12)*(IKsin(j4))))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1314=((9.9999999995e-6)*r00);
IkReal x1315=(cj1*sj0);
IkReal x1316=(py*sj1);
IkReal x1317=((9.9999999995e-6)*cj0);
IkReal x1318=(sj0*sj1);
IkReal x1319=((0.99999999995)*sj0);
IkReal x1320=((0.99999999995)*r01);
IkReal x1321=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1319))+(((-1.0)*cj0*x1314))+((cj0*x1320)));
evalcond[2]=((1.0)+((x1314*x1318))+((cj1*r02))+(((-1.0)*sj1*x1321))+(((-1.0)*r01*sj1*x1317))+(((-1.0)*x1318*x1320)));
evalcond[3]=((((-1.0)*x1314*x1315))+((r02*sj1))+((cj1*r01*x1317))+((cj1*x1321))+((x1315*x1320)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((-1.0)*x1316*x1317))+(((-1.0)*x1316*x1319))+(((9.9999999995e-6)*px*x1318)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1322=(cj0*py);
IkReal x1323=((8.33333333291667e-5)*cj1);
IkReal x1324=(px*sj0);
IkReal x1325=((8.33333333291667)*cj1);
IkReal x1326=(py*sj0);
IkReal x1327=(cj0*px);
if( IKabs(((((-1.0)*x1323*x1324))+(((8.33333333333333)*pz*sj1))+((x1322*x1323))+((x1325*x1326))+((x1325*x1327)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-8.33333333291667)*x1324))+(((8.33333333291667)*x1322))+(((-8.33333333291667e-5)*x1327))+(((-8.33333333291667e-5)*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1323*x1324))+(((8.33333333333333)*pz*sj1))+((x1322*x1323))+((x1325*x1326))+((x1325*x1327))))+IKsqr(((-0.63675)+(((-8.33333333291667)*x1324))+(((8.33333333291667)*x1322))+(((-8.33333333291667e-5)*x1327))+(((-8.33333333291667e-5)*x1326))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1323*x1324))+(((8.33333333333333)*pz*sj1))+((x1322*x1323))+((x1325*x1326))+((x1325*x1327))), ((-0.63675)+(((-8.33333333291667)*x1324))+(((8.33333333291667)*x1322))+(((-8.33333333291667e-5)*x1327))+(((-8.33333333291667e-5)*x1326))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1328=((9.9999999995e-6)*px);
IkReal x1329=((9.9999999995e-6)*py);
IkReal x1330=((0.99999999995)*px);
IkReal x1331=(cj1*sj0);
IkReal x1332=(cj0*cj1);
IkReal x1333=((0.99999999995)*py);
evalcond[0]=((-0.07641)+((cj0*x1333))+(((-1.0)*sj0*x1329))+(((-1.0)*cj0*x1328))+(((-0.12)*(IKcos(j4))))+(((-1.0)*sj0*x1330)));
evalcond[1]=(((x1329*x1332))+((x1331*x1333))+(((-1.0)*x1328*x1331))+(((-0.12)*(IKsin(j4))))+((pz*sj1))+((x1330*x1332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1334=((9.9999999995e-6)*r00);
IkReal x1335=(cj1*sj0);
IkReal x1336=((0.99999999995)*sj0);
IkReal x1337=(r01*sj1);
IkReal x1338=((9.9999999995e-6)*sj0);
IkReal x1339=((9.9999999995e-6)*cj0);
IkReal x1340=((0.99999999995)*r01);
IkReal x1341=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((cj0*x1340))+(((-1.0)*r00*x1336))+(((-1.0)*cj0*x1334))+(((-1.0)*r01*x1338)));
evalcond[2]=(((sj0*sj1*x1334))+(((-1.0)*x1337*x1339))+((cj1*r02))+(((-1.0)*sj1*x1341))+(((-1.0)*x1336*x1337)));
evalcond[3]=(((cj1*x1341))+(((-1.0)*x1334*x1335))+((cj1*r01*x1339))+((r02*sj1))+((x1335*x1340)));
evalcond[4]=((((-1.0)*px*x1336))+(((-1.0)*px*x1339))+(((-1.0)*py*x1338))+(((0.99999999995)*cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1342=((8.33333333291667e-5)*cj1);
IkReal x1343=(px*sj0);
IkReal x1344=(cj0*py);
IkReal x1345=((8.33333333333333)*pz);
IkReal x1346=((8.33333333291667e-5)*sj1);
IkReal x1347=((8.33333333291667)*py*sj0);
IkReal x1348=((8.33333333291667)*cj0*px);
if( IKabs((((sj1*x1345))+((cj1*x1347))+((cj1*x1348))+((x1342*x1344))+(((-1.0)*x1342*x1343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+((sj1*x1348))+((sj1*x1347))+((x1344*x1346))+(((-1.0)*cj1*x1345))+(((-1.0)*x1343*x1346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1345))+((cj1*x1347))+((cj1*x1348))+((x1342*x1344))+(((-1.0)*x1342*x1343))))+IKsqr(((-1.90258333333333)+((sj1*x1348))+((sj1*x1347))+((x1344*x1346))+(((-1.0)*cj1*x1345))+(((-1.0)*x1343*x1346))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x1345))+((cj1*x1347))+((cj1*x1348))+((x1342*x1344))+(((-1.0)*x1342*x1343))), ((-1.90258333333333)+((sj1*x1348))+((sj1*x1347))+((x1344*x1346))+(((-1.0)*cj1*x1345))+(((-1.0)*x1343*x1346))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1349=(py*sj1);
IkReal x1350=((9.9999999995e-6)*cj0);
IkReal x1351=((0.99999999995)*sj0);
IkReal x1352=(cj1*px);
IkReal x1353=((9.9999999995e-6)*sj0);
IkReal x1354=((0.99999999995)*cj0);
IkReal x1355=(px*sj1);
IkReal x1356=(cj1*py);
evalcond[0]=((((-1.0)*x1352*x1353))+(((-0.12)*(IKsin(j4))))+((x1350*x1356))+((x1351*x1356))+((pz*sj1))+((x1352*x1354)));
evalcond[1]=((0.22831)+(((-1.0)*x1354*x1355))+(((0.12)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*x1349*x1351))+(((-1.0)*x1349*x1350))+((x1353*x1355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1357=((9.9999999995e-6)*r00);
IkReal x1358=(cj1*sj0);
IkReal x1359=((0.99999999995)*sj0);
IkReal x1360=(r01*sj1);
IkReal x1361=((9.9999999995e-6)*sj0);
IkReal x1362=((9.9999999995e-6)*cj0);
IkReal x1363=((0.99999999995)*r01);
IkReal x1364=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*cj0*x1357))+(((-1.0)*r01*x1361))+(((-1.0)*r00*x1359))+((cj0*x1363)));
evalcond[2]=((((-1.0)*sj1*x1364))+((cj1*r02))+(((-1.0)*x1359*x1360))+(((-1.0)*x1360*x1362))+((sj0*sj1*x1357)));
evalcond[3]=(((x1358*x1363))+((cj1*x1364))+((r02*sj1))+((cj1*r01*x1362))+(((-1.0)*x1357*x1358)));
evalcond[4]=((((-1.0)*px*x1362))+(((-1.0)*px*x1359))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x1361)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1365=((8.33333333291667e-5)*cj1);
IkReal x1366=(px*sj0);
IkReal x1367=(cj0*py);
IkReal x1368=((8.33333333333333)*pz);
IkReal x1369=((8.33333333291667e-5)*sj1);
IkReal x1370=((8.33333333291667)*py*sj0);
IkReal x1371=((8.33333333291667)*cj0*px);
if( IKabs((((sj1*x1368))+((cj1*x1371))+((cj1*x1370))+((x1365*x1367))+(((-1.0)*x1365*x1366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((x1366*x1369))+((cj1*x1368))+(((-1.0)*sj1*x1371))+(((-1.0)*sj1*x1370))+(((-1.0)*x1367*x1369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1368))+((cj1*x1371))+((cj1*x1370))+((x1365*x1367))+(((-1.0)*x1365*x1366))))+IKsqr(((0.629083333333333)+((x1366*x1369))+((cj1*x1368))+(((-1.0)*sj1*x1371))+(((-1.0)*sj1*x1370))+(((-1.0)*x1367*x1369))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x1368))+((cj1*x1371))+((cj1*x1370))+((x1365*x1367))+(((-1.0)*x1365*x1366))), ((0.629083333333333)+((x1366*x1369))+((cj1*x1368))+(((-1.0)*sj1*x1371))+(((-1.0)*sj1*x1370))+(((-1.0)*x1367*x1369))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1372=(py*sj1);
IkReal x1373=((9.9999999995e-6)*cj0);
IkReal x1374=((0.99999999995)*sj0);
IkReal x1375=(cj1*px);
IkReal x1376=((9.9999999995e-6)*sj0);
IkReal x1377=((0.99999999995)*cj0);
IkReal x1378=(px*sj1);
IkReal x1379=(cj1*py);
evalcond[0]=(((x1375*x1377))+((x1374*x1379))+(((-1.0)*x1375*x1376))+(((-0.12)*(IKsin(j4))))+((pz*sj1))+((x1373*x1379)));
evalcond[1]=((0.07549)+((x1376*x1378))+(((-1.0)*x1372*x1374))+(((-1.0)*x1372*x1373))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x1377*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1380=((8.33333333291667e-5)*cj1);
IkReal x1381=(px*sj0);
IkReal x1382=(cj0*py);
IkReal x1383=((0.0002499999999875)*sj1);
IkReal x1384=(py*sj0);
IkReal x1385=((24.99999999875)*sj1);
IkReal x1386=((8.33333333291667)*cj1);
IkReal x1387=(cj0*px);
CheckValue<IkReal> x1388=IKPowWithIntegerCheck(cj3,-1);
if(!x1388.valid){
continue;
}
if( IKabs((((x1380*x1382))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x1380*x1381))+((x1386*x1387))+((x1384*x1386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1388.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x1381*x1383))+((x1384*x1385))+((x1385*x1387))+((x1382*x1383)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1380*x1382))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x1380*x1381))+((x1386*x1387))+((x1384*x1386))))+IKsqr(((0.333333333333333)*(x1388.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x1381*x1383))+((x1384*x1385))+((x1385*x1387))+((x1382*x1383))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1380*x1382))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x1380*x1381))+((x1386*x1387))+((x1384*x1386))), ((0.333333333333333)*(x1388.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x1381*x1383))+((x1384*x1385))+((x1385*x1387))+((x1382*x1383))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1389=IKcos(j4);
IkReal x1390=((9.9999999995e-6)*px);
IkReal x1391=((0.99999999995)*px);
IkReal x1392=((9.9999999995e-6)*py);
IkReal x1393=(cj1*sj0);
IkReal x1394=(cj0*sj1);
IkReal x1395=(cj0*cj1);
IkReal x1396=(sj0*sj1);
IkReal x1397=((0.99999999995)*py);
IkReal x1398=((0.12)*x1389);
evalcond[0]=((((-1.0)*cj0*x1390))+((cj0*x1397))+((sj3*x1398))+(((-1.0)*sj0*x1391))+(((-1.0)*sj0*x1392))+(((0.07641)*sj3)));
evalcond[1]=(((x1393*x1397))+(((-1.0)*x1390*x1393))+(((-0.12)*(IKsin(j4))))+((pz*sj1))+((x1391*x1395))+((x1392*x1395)));
evalcond[2]=((0.1519)+(((-1.0)*x1392*x1394))+(((-1.0)*x1391*x1394))+((cj3*x1398))+(((-1.0)*x1396*x1397))+((x1390*x1396))+((cj1*pz))+(((0.07641)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1399=((8.33333333291667e-5)*cj1);
IkReal x1400=(px*sj0);
IkReal x1401=(cj0*py);
IkReal x1402=((8.33333333291667)*cj1);
IkReal x1403=(py*sj0);
IkReal x1404=(cj0*px);
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(sj3,-1);
if(!x1405.valid){
continue;
}
if( IKabs(((((-1.0)*x1399*x1400))+(((8.33333333333333)*pz*sj1))+((x1399*x1401))+((x1402*x1404))+((x1402*x1403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1405.value)*(((((-24.99999999875)*x1401))+(((-1.91025)*sj3))+(((24.99999999875)*x1400))+(((0.0002499999999875)*x1403))+(((0.0002499999999875)*x1404)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1399*x1400))+(((8.33333333333333)*pz*sj1))+((x1399*x1401))+((x1402*x1404))+((x1402*x1403))))+IKsqr(((0.333333333333333)*(x1405.value)*(((((-24.99999999875)*x1401))+(((-1.91025)*sj3))+(((24.99999999875)*x1400))+(((0.0002499999999875)*x1403))+(((0.0002499999999875)*x1404))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1399*x1400))+(((8.33333333333333)*pz*sj1))+((x1399*x1401))+((x1402*x1404))+((x1402*x1403))), ((0.333333333333333)*(x1405.value)*(((((-24.99999999875)*x1401))+(((-1.91025)*sj3))+(((24.99999999875)*x1400))+(((0.0002499999999875)*x1403))+(((0.0002499999999875)*x1404))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1406=IKcos(j4);
IkReal x1407=((9.9999999995e-6)*px);
IkReal x1408=((0.99999999995)*px);
IkReal x1409=((9.9999999995e-6)*py);
IkReal x1410=(cj1*sj0);
IkReal x1411=(cj0*sj1);
IkReal x1412=(cj0*cj1);
IkReal x1413=(sj0*sj1);
IkReal x1414=((0.99999999995)*py);
IkReal x1415=((0.12)*x1406);
evalcond[0]=((((-1.0)*sj0*x1408))+(((-1.0)*sj0*x1409))+((cj0*x1414))+(((0.07641)*sj3))+(((-1.0)*cj0*x1407))+((sj3*x1415)));
evalcond[1]=((((-1.0)*x1407*x1410))+((x1410*x1414))+(((-0.12)*(IKsin(j4))))+((pz*sj1))+((x1409*x1412))+((x1408*x1412)));
evalcond[2]=((0.1519)+((x1407*x1413))+(((-1.0)*x1413*x1414))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1408*x1411))+(((-1.0)*x1409*x1411))+((cj3*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1416=((9.9999999995e-6)*r00);
IkReal x1417=(cj1*sj0);
IkReal x1418=(sj0*sj1);
IkReal x1419=((9.9999999995e-6)*r01);
IkReal x1420=((0.99999999995)*r01);
IkReal x1421=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj0*x1419))+(((-1.0)*cj0*x1416))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj3))+((cj0*x1420)));
evalcond[2]=((((-1.0)*sj3))+((cj1*r02))+((x1416*x1418))+(((-1.0)*x1418*x1420))+(((-1.0)*sj1*x1421))+(((-1.0)*cj0*sj1*x1419)));
evalcond[3]=(((cj1*x1421))+(((-1.0)*x1416*x1417))+((r02*sj1))+((cj0*cj1*x1419))+((x1417*x1420)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1422=((9.9999999995e-6)*r00);
IkReal x1423=(cj1*sj0);
IkReal x1424=(py*sj1);
IkReal x1425=((9.9999999995e-6)*cj0);
IkReal x1426=(sj0*sj1);
IkReal x1427=((0.99999999995)*sj0);
IkReal x1428=((0.99999999995)*r01);
IkReal x1429=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1422))+(((-1.0)*r00*x1427))+((cj0*x1428)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj1*x1425))+(((-1.0)*x1426*x1428))+((x1422*x1426))+((cj1*r02))+(((-1.0)*sj1*x1429)));
evalcond[3]=(((x1423*x1428))+((cj1*x1429))+((r02*sj1))+(((-1.0)*x1422*x1423))+((cj1*r01*x1425)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x1424*x1427))+(((-1.0)*x1424*x1425))+((cj1*pz))+(((9.9999999995e-6)*px*x1426)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1430=(cj0*py);
IkReal x1431=((8.33333333291667e-5)*cj1);
IkReal x1432=(px*sj0);
IkReal x1433=((8.33333333291667)*cj1);
IkReal x1434=(py*sj0);
IkReal x1435=(cj0*px);
if( IKabs(((((-1.0)*x1430*x1431))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1433*x1435))+(((-1.0)*x1433*x1434))+((x1431*x1432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-8.33333333291667e-5)*x1434))+(((-8.33333333291667e-5)*x1435))+(((8.33333333291667)*x1430))+(((-8.33333333291667)*x1432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1430*x1431))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1433*x1435))+(((-1.0)*x1433*x1434))+((x1431*x1432))))+IKsqr(((-0.63675)+(((-8.33333333291667e-5)*x1434))+(((-8.33333333291667e-5)*x1435))+(((8.33333333291667)*x1430))+(((-8.33333333291667)*x1432))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1430*x1431))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1433*x1435))+(((-1.0)*x1433*x1434))+((x1431*x1432))), ((-0.63675)+(((-8.33333333291667e-5)*x1434))+(((-8.33333333291667e-5)*x1435))+(((8.33333333291667)*x1430))+(((-8.33333333291667)*x1432))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1436=((9.9999999995e-6)*px);
IkReal x1437=((9.9999999995e-6)*py);
IkReal x1438=((0.99999999995)*px);
IkReal x1439=(cj1*sj0);
IkReal x1440=(cj0*cj1);
IkReal x1441=((0.99999999995)*py);
evalcond[0]=((-0.07641)+(((-1.0)*sj0*x1437))+(((-1.0)*sj0*x1438))+(((-0.12)*(IKcos(j4))))+((cj0*x1441))+(((-1.0)*cj0*x1436)));
evalcond[1]=(((x1437*x1440))+((x1438*x1440))+(((-1.0)*x1436*x1439))+((x1439*x1441))+(((0.12)*(IKsin(j4))))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1442=((9.9999999995e-6)*r00);
IkReal x1443=(cj1*sj0);
IkReal x1444=(py*sj1);
IkReal x1445=((9.9999999995e-6)*cj0);
IkReal x1446=(sj0*sj1);
IkReal x1447=((0.99999999995)*sj0);
IkReal x1448=((0.99999999995)*r01);
IkReal x1449=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1447))+(((-1.0)*cj0*x1442))+((cj0*x1448)));
evalcond[2]=((1.0)+(((-1.0)*x1446*x1448))+((x1442*x1446))+(((-1.0)*sj1*x1449))+((cj1*r02))+(((-1.0)*r01*sj1*x1445)));
evalcond[3]=(((x1443*x1448))+((cj1*x1449))+((cj1*r01*x1445))+((r02*sj1))+(((-1.0)*x1442*x1443)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1446))+((cj1*pz))+(((-1.0)*x1444*x1447))+(((-1.0)*x1444*x1445)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1450=(cj0*py);
IkReal x1451=((8.33333333291667e-5)*cj1);
IkReal x1452=(px*sj0);
IkReal x1453=((8.33333333291667)*cj1);
IkReal x1454=(py*sj0);
IkReal x1455=(cj0*px);
if( IKabs(((((-1.0)*x1453*x1455))+(((-1.0)*x1453*x1454))+(((-8.33333333333333)*pz*sj1))+((x1451*x1452))+(((-1.0)*x1450*x1451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-8.33333333291667)*x1450))+(((8.33333333291667e-5)*x1455))+(((8.33333333291667e-5)*x1454))+(((8.33333333291667)*x1452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1453*x1455))+(((-1.0)*x1453*x1454))+(((-8.33333333333333)*pz*sj1))+((x1451*x1452))+(((-1.0)*x1450*x1451))))+IKsqr(((-0.63675)+(((-8.33333333291667)*x1450))+(((8.33333333291667e-5)*x1455))+(((8.33333333291667e-5)*x1454))+(((8.33333333291667)*x1452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1453*x1455))+(((-1.0)*x1453*x1454))+(((-8.33333333333333)*pz*sj1))+((x1451*x1452))+(((-1.0)*x1450*x1451))), ((-0.63675)+(((-8.33333333291667)*x1450))+(((8.33333333291667e-5)*x1455))+(((8.33333333291667e-5)*x1454))+(((8.33333333291667)*x1452))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1456=((9.9999999995e-6)*px);
IkReal x1457=((9.9999999995e-6)*py);
IkReal x1458=((0.99999999995)*px);
IkReal x1459=(cj1*sj0);
IkReal x1460=(cj0*cj1);
IkReal x1461=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((-1.0)*sj0*x1457))+(((-1.0)*sj0*x1458))+((cj0*x1461))+(((0.12)*(IKcos(j4))))+(((-1.0)*cj0*x1456)));
evalcond[1]=(((x1459*x1461))+(((0.12)*(IKsin(j4))))+((x1458*x1460))+((x1457*x1460))+((pz*sj1))+(((-1.0)*x1456*x1459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1462=((9.9999999995e-6)*r00);
IkReal x1463=(cj1*sj0);
IkReal x1464=((0.99999999995)*sj0);
IkReal x1465=(r01*sj1);
IkReal x1466=((9.9999999995e-6)*sj0);
IkReal x1467=((9.9999999995e-6)*cj0);
IkReal x1468=((0.99999999995)*r01);
IkReal x1469=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((cj0*x1468))+(((-1.0)*r01*x1466))+(((-1.0)*cj0*x1462))+(((-1.0)*r00*x1464)));
evalcond[2]=(((sj0*sj1*x1462))+((cj1*r02))+(((-1.0)*x1464*x1465))+(((-1.0)*sj1*x1469))+(((-1.0)*x1465*x1467)));
evalcond[3]=(((x1463*x1468))+(((-1.0)*x1462*x1463))+((r02*sj1))+((cj1*x1469))+((cj1*r01*x1467)));
evalcond[4]=((((-1.0)*py*x1466))+(((0.99999999995)*cj0*py))+(((-1.0)*px*x1467))+(((-1.0)*px*x1464)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1470=((8.33333333291667e-5)*cj1);
IkReal x1471=(px*sj0);
IkReal x1472=(cj0*py);
IkReal x1473=((8.33333333333333)*pz);
IkReal x1474=((8.33333333291667e-5)*sj1);
IkReal x1475=((8.33333333291667)*py*sj0);
IkReal x1476=((8.33333333291667)*cj0*px);
if( IKabs(((((-1.0)*x1470*x1472))+(((-1.0)*sj1*x1473))+((x1470*x1471))+(((-1.0)*cj1*x1475))+(((-1.0)*cj1*x1476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*x1471*x1474))+((sj1*x1475))+((sj1*x1476))+((x1472*x1474))+(((-1.0)*cj1*x1473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1470*x1472))+(((-1.0)*sj1*x1473))+((x1470*x1471))+(((-1.0)*cj1*x1475))+(((-1.0)*cj1*x1476))))+IKsqr(((-1.90258333333333)+(((-1.0)*x1471*x1474))+((sj1*x1475))+((sj1*x1476))+((x1472*x1474))+(((-1.0)*cj1*x1473))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1470*x1472))+(((-1.0)*sj1*x1473))+((x1470*x1471))+(((-1.0)*cj1*x1475))+(((-1.0)*cj1*x1476))), ((-1.90258333333333)+(((-1.0)*x1471*x1474))+((sj1*x1475))+((sj1*x1476))+((x1472*x1474))+(((-1.0)*cj1*x1473))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1477=(py*sj1);
IkReal x1478=((9.9999999995e-6)*cj0);
IkReal x1479=((0.99999999995)*sj0);
IkReal x1480=(cj1*px);
IkReal x1481=((9.9999999995e-6)*sj0);
IkReal x1482=((0.99999999995)*cj0);
IkReal x1483=(px*sj1);
IkReal x1484=(cj1*py);
evalcond[0]=(((x1480*x1482))+(((-1.0)*x1480*x1481))+(((0.12)*(IKsin(j4))))+((pz*sj1))+((x1478*x1484))+((x1479*x1484)));
evalcond[1]=((0.22831)+(((-1.0)*x1482*x1483))+(((0.12)*(IKcos(j4))))+((x1481*x1483))+(((-1.0)*x1477*x1479))+(((-1.0)*x1477*x1478))+((cj1*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1485=((9.9999999995e-6)*r00);
IkReal x1486=(cj1*sj0);
IkReal x1487=((0.99999999995)*sj0);
IkReal x1488=(r01*sj1);
IkReal x1489=((9.9999999995e-6)*sj0);
IkReal x1490=((9.9999999995e-6)*cj0);
IkReal x1491=((0.99999999995)*r01);
IkReal x1492=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r01*x1489))+(((-1.0)*r00*x1487))+(((-1.0)*cj0*x1485))+((cj0*x1491)));
evalcond[2]=((((-1.0)*x1487*x1488))+((cj1*r02))+(((-1.0)*sj1*x1492))+(((-1.0)*x1488*x1490))+((sj0*sj1*x1485)));
evalcond[3]=(((cj1*r01*x1490))+((cj1*x1492))+(((-1.0)*x1485*x1486))+((x1486*x1491))+((r02*sj1)));
evalcond[4]=((((-1.0)*px*x1487))+(((-1.0)*px*x1490))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x1489)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1493=((8.33333333291667e-5)*cj1);
IkReal x1494=(px*sj0);
IkReal x1495=(cj0*py);
IkReal x1496=((8.33333333333333)*pz);
IkReal x1497=((8.33333333291667e-5)*sj1);
IkReal x1498=((8.33333333291667)*py*sj0);
IkReal x1499=((8.33333333291667)*cj0*px);
if( IKabs(((((-1.0)*cj1*x1499))+(((-1.0)*cj1*x1498))+(((-1.0)*x1493*x1495))+(((-1.0)*sj1*x1496))+((x1493*x1494)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((cj1*x1496))+((x1494*x1497))+(((-1.0)*x1495*x1497))+(((-1.0)*sj1*x1498))+(((-1.0)*sj1*x1499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1499))+(((-1.0)*cj1*x1498))+(((-1.0)*x1493*x1495))+(((-1.0)*sj1*x1496))+((x1493*x1494))))+IKsqr(((0.629083333333333)+((cj1*x1496))+((x1494*x1497))+(((-1.0)*x1495*x1497))+(((-1.0)*sj1*x1498))+(((-1.0)*sj1*x1499))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x1499))+(((-1.0)*cj1*x1498))+(((-1.0)*x1493*x1495))+(((-1.0)*sj1*x1496))+((x1493*x1494))), ((0.629083333333333)+((cj1*x1496))+((x1494*x1497))+(((-1.0)*x1495*x1497))+(((-1.0)*sj1*x1498))+(((-1.0)*sj1*x1499))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1500=(py*sj1);
IkReal x1501=((9.9999999995e-6)*cj0);
IkReal x1502=((0.99999999995)*sj0);
IkReal x1503=(cj1*px);
IkReal x1504=((9.9999999995e-6)*sj0);
IkReal x1505=((0.99999999995)*cj0);
IkReal x1506=(px*sj1);
IkReal x1507=(cj1*py);
evalcond[0]=(((x1501*x1507))+(((0.12)*(IKsin(j4))))+((x1503*x1505))+((pz*sj1))+(((-1.0)*x1503*x1504))+((x1502*x1507)));
evalcond[1]=((0.07549)+((x1504*x1506))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x1500*x1502))+(((-1.0)*x1500*x1501))+(((-1.0)*x1505*x1506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1508=((8.33333333291667e-5)*cj1);
IkReal x1509=(px*sj0);
IkReal x1510=(cj0*py);
IkReal x1511=((0.0002499999999875)*sj1);
IkReal x1512=(py*sj0);
IkReal x1513=((24.99999999875)*sj1);
IkReal x1514=((8.33333333291667)*cj1);
IkReal x1515=(cj0*px);
CheckValue<IkReal> x1516=IKPowWithIntegerCheck(cj3,-1);
if(!x1516.valid){
continue;
}
if( IKabs((((x1508*x1509))+(((-1.0)*x1514*x1515))+(((-1.0)*x1512*x1514))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1508*x1510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1516.value)*(((-3.7975)+((x1513*x1515))+((x1510*x1511))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x1509*x1511))+((x1512*x1513)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1508*x1509))+(((-1.0)*x1514*x1515))+(((-1.0)*x1512*x1514))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1508*x1510))))+IKsqr(((0.333333333333333)*(x1516.value)*(((-3.7975)+((x1513*x1515))+((x1510*x1511))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x1509*x1511))+((x1512*x1513))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1508*x1509))+(((-1.0)*x1514*x1515))+(((-1.0)*x1512*x1514))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1508*x1510))), ((0.333333333333333)*(x1516.value)*(((-3.7975)+((x1513*x1515))+((x1510*x1511))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x1509*x1511))+((x1512*x1513))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1517=IKcos(j4);
IkReal x1518=((9.9999999995e-6)*px);
IkReal x1519=((9.9999999995e-6)*py);
IkReal x1520=((0.99999999995)*px);
IkReal x1521=(cj1*sj0);
IkReal x1522=(cj0*sj1);
IkReal x1523=(cj0*cj1);
IkReal x1524=(sj0*sj1);
IkReal x1525=((0.99999999995)*py);
IkReal x1526=((0.12)*x1517);
evalcond[0]=((((-0.07641)*sj3))+((cj0*x1525))+(((-1.0)*sj3*x1526))+(((-1.0)*sj0*x1520))+(((-1.0)*sj0*x1519))+(((-1.0)*cj0*x1518)));
evalcond[1]=(((x1519*x1523))+(((-1.0)*x1518*x1521))+(((0.12)*(IKsin(j4))))+((x1520*x1523))+((x1521*x1525))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x1524*x1525))+((x1518*x1524))+(((-1.0)*x1519*x1522))+((cj3*x1526))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1520*x1522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1527=((8.33333333291667e-5)*cj1);
IkReal x1528=(px*sj0);
IkReal x1529=(cj0*py);
IkReal x1530=((8.33333333291667)*cj1);
IkReal x1531=(py*sj0);
IkReal x1532=(cj0*px);
CheckValue<IkReal> x1533=IKPowWithIntegerCheck(sj3,-1);
if(!x1533.valid){
continue;
}
if( IKabs(((((-1.0)*x1530*x1531))+(((-1.0)*x1530*x1532))+((x1527*x1528))+(((-1.0)*x1527*x1529))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1533.value)*(((((24.99999999875)*x1529))+(((-0.0002499999999875)*x1531))+(((-0.0002499999999875)*x1532))+(((-24.99999999875)*x1528))+(((-1.91025)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1530*x1531))+(((-1.0)*x1530*x1532))+((x1527*x1528))+(((-1.0)*x1527*x1529))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x1533.value)*(((((24.99999999875)*x1529))+(((-0.0002499999999875)*x1531))+(((-0.0002499999999875)*x1532))+(((-24.99999999875)*x1528))+(((-1.91025)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1530*x1531))+(((-1.0)*x1530*x1532))+((x1527*x1528))+(((-1.0)*x1527*x1529))+(((-8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x1533.value)*(((((24.99999999875)*x1529))+(((-0.0002499999999875)*x1531))+(((-0.0002499999999875)*x1532))+(((-24.99999999875)*x1528))+(((-1.91025)*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1534=IKcos(j4);
IkReal x1535=((9.9999999995e-6)*px);
IkReal x1536=((9.9999999995e-6)*py);
IkReal x1537=((0.99999999995)*px);
IkReal x1538=(cj1*sj0);
IkReal x1539=(cj0*sj1);
IkReal x1540=(cj0*cj1);
IkReal x1541=(sj0*sj1);
IkReal x1542=((0.99999999995)*py);
IkReal x1543=((0.12)*x1534);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x1543))+(((-1.0)*sj0*x1536))+(((-1.0)*sj0*x1537))+(((-1.0)*cj0*x1535))+((cj0*x1542)));
evalcond[1]=(((x1538*x1542))+((x1536*x1540))+((x1537*x1540))+(((0.12)*(IKsin(j4))))+(((-1.0)*x1535*x1538))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x1537*x1539))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x1543))+((x1535*x1541))+(((-1.0)*x1536*x1539))+(((-1.0)*x1541*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1544=((9.9999999995e-6)*r00);
IkReal x1545=(cj1*sj0);
IkReal x1546=(sj0*sj1);
IkReal x1547=((0.99999999995)*r01);
IkReal x1548=((0.99999999995)*cj0*r00);
IkReal x1549=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+sj2+((cj0*x1547))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj0*x1544)));
evalcond[2]=((((-1.0)*x1546*x1547))+((x1544*x1546))+((cj1*r02))+(((-1.0)*sj1*x1548))+(((-1.0)*sj1*x1549)));
evalcond[3]=(cj2+((cj1*x1548))+((cj1*x1549))+((r02*sj1))+(((-1.0)*x1544*x1545))+((x1545*x1547)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1550=(cj0*px);
IkReal x1551=((8.33333333291667)*sj1);
IkReal x1552=((24.99999999875)*cj1);
IkReal x1553=(py*sj0);
IkReal x1554=((8.33333333291667e-5)*sj1);
IkReal x1555=(px*sj0);
IkReal x1556=(cj0*py);
IkReal x1557=((0.0002499999999875)*cj1);
CheckValue<IkReal> x1558=IKPowWithIntegerCheck(sj2,-1);
if(!x1558.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x1558.value)*((((x1552*x1553))+((x1556*x1557))+(((25.0)*pz*sj1))+((x1550*x1552))+(((-1.0)*x1555*x1557)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((x1551*x1553))+((x1550*x1551))+((x1554*x1556))+(((-1.0)*x1554*x1555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x1558.value)*((((x1552*x1553))+((x1556*x1557))+(((25.0)*pz*sj1))+((x1550*x1552))+(((-1.0)*x1555*x1557))))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((x1551*x1553))+((x1550*x1551))+((x1554*x1556))+(((-1.0)*x1554*x1555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x1558.value)*((((x1552*x1553))+((x1556*x1557))+(((25.0)*pz*sj1))+((x1550*x1552))+(((-1.0)*x1555*x1557))))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((x1551*x1553))+((x1550*x1551))+((x1554*x1556))+(((-1.0)*x1554*x1555))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1559=IKsin(j4);
IkReal x1560=((9.9999999995e-6)*px);
IkReal x1561=(py*sj0);
IkReal x1562=((0.99999999995)*sj1);
IkReal x1563=((0.99999999995)*px);
IkReal x1564=(cj0*cj1);
IkReal x1565=((9.9999999995e-6)*py);
IkReal x1566=((0.12)*x1559);
evalcond[0]=((((-9.9999999995e-6)*x1561))+(((-1.0)*cj0*x1560))+(((0.99999999995)*cj0*py))+((cj2*x1566))+(((-1.0)*sj0*x1563)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+(((-1.0)*cj0*px*x1562))+((cj1*pz))+(((-1.0)*cj0*sj1*x1565))+((sj0*sj1*x1560))+(((-1.0)*x1561*x1562)));
evalcond[2]=((((-1.0)*sj2*x1566))+(((-1.0)*cj1*sj0*x1560))+((pz*sj1))+(((0.99999999995)*cj1*x1561))+((x1563*x1564))+((x1564*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1567=((8.33333333291667)*sj1);
IkReal x1568=(cj0*px);
IkReal x1569=(cj0*py);
IkReal x1570=(py*sj0);
IkReal x1571=((8.33333333291667e-5)*sj1);
IkReal x1572=(px*sj0);
CheckValue<IkReal> x1573=IKPowWithIntegerCheck(cj2,-1);
if(!x1573.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x1573.value)*(((((-24.99999999875)*x1569))+(((0.0002499999999875)*x1570))+(((24.99999999875)*x1572))+(((0.0002499999999875)*x1568)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+((x1567*x1568))+(((-8.33333333333333)*cj1*pz))+((x1567*x1570))+(((-1.0)*x1571*x1572))+((x1569*x1571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x1573.value)*(((((-24.99999999875)*x1569))+(((0.0002499999999875)*x1570))+(((24.99999999875)*x1572))+(((0.0002499999999875)*x1568))))))+IKsqr(((-1.90258333333333)+((x1567*x1568))+(((-8.33333333333333)*cj1*pz))+((x1567*x1570))+(((-1.0)*x1571*x1572))+((x1569*x1571))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x1573.value)*(((((-24.99999999875)*x1569))+(((0.0002499999999875)*x1570))+(((24.99999999875)*x1572))+(((0.0002499999999875)*x1568))))), ((-1.90258333333333)+((x1567*x1568))+(((-8.33333333333333)*cj1*pz))+((x1567*x1570))+(((-1.0)*x1571*x1572))+((x1569*x1571))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1574=IKsin(j4);
IkReal x1575=((9.9999999995e-6)*px);
IkReal x1576=(py*sj0);
IkReal x1577=((0.99999999995)*sj1);
IkReal x1578=((0.99999999995)*px);
IkReal x1579=(cj0*cj1);
IkReal x1580=((9.9999999995e-6)*py);
IkReal x1581=((0.12)*x1574);
evalcond[0]=((((-9.9999999995e-6)*x1576))+(((0.99999999995)*cj0*py))+(((-1.0)*sj0*x1578))+((cj2*x1581))+(((-1.0)*cj0*x1575)));
evalcond[1]=((0.22831)+(((-1.0)*x1576*x1577))+(((0.12)*(IKcos(j4))))+(((-1.0)*cj0*px*x1577))+((cj1*pz))+((sj0*sj1*x1575))+(((-1.0)*cj0*sj1*x1580)));
evalcond[2]=((((-1.0)*cj1*sj0*x1575))+((pz*sj1))+((x1579*x1580))+(((-1.0)*sj2*x1581))+((x1578*x1579))+(((0.99999999995)*cj1*x1576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1582=((9.9999999995e-6)*r00);
IkReal x1583=(cj1*sj0);
IkReal x1584=(sj0*sj1);
IkReal x1585=((0.99999999995)*r01);
IkReal x1586=((0.99999999995)*cj0*r00);
IkReal x1587=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*sj2))+(((-1.0)*cj0*x1582))+((cj0*x1585))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=(((cj1*r02))+((x1582*x1584))+(((-1.0)*x1584*x1585))+(((-1.0)*sj1*x1587))+(((-1.0)*sj1*x1586)));
evalcond[3]=(((cj1*x1586))+((cj1*x1587))+((r02*sj1))+((x1583*x1585))+(((-1.0)*x1582*x1583))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1588=(sj0*sj1);
IkReal x1589=((24.99999999875)*cj1);
IkReal x1590=(cj0*px);
IkReal x1591=(cj0*py);
IkReal x1592=((0.0002499999999875)*cj1);
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(sj2,-1);
if(!x1593.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x1593.value)*((((py*sj0*x1589))+(((25.0)*pz*sj1))+((x1589*x1590))+((x1591*x1592))+(((-1.0)*px*sj0*x1592)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-8.33333333291667e-5)*sj1*x1591))+(((8.33333333291667e-5)*px*x1588))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667)*sj1*x1590))+(((-8.33333333291667)*py*x1588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x1593.value)*((((py*sj0*x1589))+(((25.0)*pz*sj1))+((x1589*x1590))+((x1591*x1592))+(((-1.0)*px*sj0*x1592))))))+IKsqr(((0.629083333333333)+(((-8.33333333291667e-5)*sj1*x1591))+(((8.33333333291667e-5)*px*x1588))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667)*sj1*x1590))+(((-8.33333333291667)*py*x1588))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x1593.value)*((((py*sj0*x1589))+(((25.0)*pz*sj1))+((x1589*x1590))+((x1591*x1592))+(((-1.0)*px*sj0*x1592))))), ((0.629083333333333)+(((-8.33333333291667e-5)*sj1*x1591))+(((8.33333333291667e-5)*px*x1588))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667)*sj1*x1590))+(((-8.33333333291667)*py*x1588))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1594=IKsin(j4);
IkReal x1595=((9.9999999995e-6)*px);
IkReal x1596=(py*sj0);
IkReal x1597=((0.99999999995)*sj1);
IkReal x1598=((0.99999999995)*px);
IkReal x1599=(cj0*cj1);
IkReal x1600=((9.9999999995e-6)*py);
IkReal x1601=((0.12)*x1594);
evalcond[0]=((((-9.9999999995e-6)*x1596))+(((-1.0)*cj0*x1595))+(((0.99999999995)*cj0*py))+(((-1.0)*sj0*x1598))+((cj2*x1601)));
evalcond[1]=((0.07549)+(((-1.0)*cj0*px*x1597))+(((-1.0)*cj0*sj1*x1600))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+((sj0*sj1*x1595))+(((-1.0)*x1596*x1597)));
evalcond[2]=((((0.99999999995)*cj1*x1596))+(((-1.0)*cj1*sj0*x1595))+((x1599*x1600))+((x1598*x1599))+(((-1.0)*sj2*x1601))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1602=(sj0*sj1);
IkReal x1603=(cj0*py);
IkReal x1604=(cj0*px);
CheckValue<IkReal> x1605=IKPowWithIntegerCheck(cj2,-1);
if(!x1605.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x1605.value)*(((((0.0002499999999875)*x1604))+(((24.99999999875)*px*sj0))+(((-24.99999999875)*x1603))+(((0.0002499999999875)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-8.33333333291667)*py*x1602))+(((8.33333333291667e-5)*px*x1602))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667)*sj1*x1604))+(((-8.33333333291667e-5)*sj1*x1603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x1605.value)*(((((0.0002499999999875)*x1604))+(((24.99999999875)*px*sj0))+(((-24.99999999875)*x1603))+(((0.0002499999999875)*py*sj0))))))+IKsqr(((0.629083333333333)+(((-8.33333333291667)*py*x1602))+(((8.33333333291667e-5)*px*x1602))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667)*sj1*x1604))+(((-8.33333333291667e-5)*sj1*x1603))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x1605.value)*(((((0.0002499999999875)*x1604))+(((24.99999999875)*px*sj0))+(((-24.99999999875)*x1603))+(((0.0002499999999875)*py*sj0))))), ((0.629083333333333)+(((-8.33333333291667)*py*x1602))+(((8.33333333291667e-5)*px*x1602))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667)*sj1*x1604))+(((-8.33333333291667e-5)*sj1*x1603))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1606=IKsin(j4);
IkReal x1607=((9.9999999995e-6)*px);
IkReal x1608=(py*sj0);
IkReal x1609=((0.99999999995)*sj1);
IkReal x1610=((0.99999999995)*px);
IkReal x1611=(cj0*cj1);
IkReal x1612=((9.9999999995e-6)*py);
IkReal x1613=((0.12)*x1606);
evalcond[0]=((((-1.0)*sj0*x1610))+(((-9.9999999995e-6)*x1608))+(((0.99999999995)*cj0*py))+((cj2*x1613))+(((-1.0)*cj0*x1607)));
evalcond[1]=((0.07549)+((sj0*sj1*x1607))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*cj0*sj1*x1612))+(((-1.0)*cj0*px*x1609))+(((-1.0)*x1608*x1609)));
evalcond[2]=((((0.99999999995)*cj1*x1608))+((pz*sj1))+(((-1.0)*cj1*sj0*x1607))+((x1610*x1611))+((x1611*x1612))+(((-1.0)*sj2*x1613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1624=IKPowWithIntegerCheck(cj3,-1);
if(!x1624.valid){
continue;
}
IkReal x1614=x1624.value;
IkReal x1615=((24.99999999875)*sj1);
IkReal x1616=(py*sj0);
IkReal x1617=(cj1*cj3);
IkReal x1618=(cj2*sj3);
IkReal x1619=(cj0*px);
IkReal x1620=((0.333333333333333)*x1614);
IkReal x1621=((25.0)*pz);
IkReal x1622=((0.0002499999999875)*cj0*py);
IkReal x1623=((0.0002499999999875)*px*sj0);
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(sj2,-1);
if(!x1625.valid){
continue;
}
if( IKabs((x1620*(x1625.value)*(((((-1.0)*cj1*x1618*x1621))+(((24.99999999875)*x1617*x1619))+((x1615*x1618*x1619))+((x1617*x1622))+(((-1.0)*x1617*x1623))+((x1615*x1616*x1618))+(((-3.7975)*x1618))+(((-1.0)*sj1*x1618*x1623))+((cj3*sj1*x1621))+((sj1*x1618*x1622))+(((24.99999999875)*x1616*x1617)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1620*(((-3.7975)+(((-1.0)*sj1*x1623))+((sj1*x1622))+(((-1.91025)*cj3))+((x1615*x1616))+((x1615*x1619))+(((-1.0)*cj1*x1621)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1620*(x1625.value)*(((((-1.0)*cj1*x1618*x1621))+(((24.99999999875)*x1617*x1619))+((x1615*x1618*x1619))+((x1617*x1622))+(((-1.0)*x1617*x1623))+((x1615*x1616*x1618))+(((-3.7975)*x1618))+(((-1.0)*sj1*x1618*x1623))+((cj3*sj1*x1621))+((sj1*x1618*x1622))+(((24.99999999875)*x1616*x1617))))))+IKsqr((x1620*(((-3.7975)+(((-1.0)*sj1*x1623))+((sj1*x1622))+(((-1.91025)*cj3))+((x1615*x1616))+((x1615*x1619))+(((-1.0)*cj1*x1621))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1620*(x1625.value)*(((((-1.0)*cj1*x1618*x1621))+(((24.99999999875)*x1617*x1619))+((x1615*x1618*x1619))+((x1617*x1622))+(((-1.0)*x1617*x1623))+((x1615*x1616*x1618))+(((-3.7975)*x1618))+(((-1.0)*sj1*x1618*x1623))+((cj3*sj1*x1621))+((sj1*x1618*x1622))+(((24.99999999875)*x1616*x1617))))), (x1620*(((-3.7975)+(((-1.0)*sj1*x1623))+((sj1*x1622))+(((-1.91025)*cj3))+((x1615*x1616))+((x1615*x1619))+(((-1.0)*cj1*x1621))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1626=IKcos(j4);
IkReal x1627=IKsin(j4);
IkReal x1628=((0.99999999995)*sj0);
IkReal x1629=(py*sj1);
IkReal x1630=((9.9999999995e-6)*cj0);
IkReal x1631=(cj1*py);
IkReal x1632=((9.9999999995e-6)*sj0);
IkReal x1633=(px*sj1);
IkReal x1634=(cj2*sj3);
IkReal x1635=(sj2*sj3);
IkReal x1636=(cj1*px);
IkReal x1637=((0.99999999995)*cj0);
IkReal x1638=((0.12)*x1626);
IkReal x1639=((0.12)*x1627);
evalcond[0]=((((0.07641)*x1635))+(((-1.0)*px*x1630))+((py*x1637))+((cj2*x1639))+((x1635*x1638))+(((-1.0)*px*x1628))+(((-1.0)*py*x1632)));
evalcond[1]=((0.1519)+((cj3*x1638))+(((-1.0)*x1633*x1637))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1628*x1629))+((x1632*x1633))+(((-1.0)*x1629*x1630)));
evalcond[2]=((((0.07641)*x1634))+(((-1.0)*sj2*x1639))+((x1636*x1637))+((x1628*x1631))+(((-1.0)*x1632*x1636))+((pz*sj1))+((x1634*x1638))+((x1630*x1631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1652=IKPowWithIntegerCheck(cj3,-1);
if(!x1652.valid){
continue;
}
IkReal x1640=x1652.value;
IkReal x1641=((24.99999999875)*cj3);
IkReal x1642=(px*sj0);
IkReal x1643=(cj0*py);
IkReal x1644=((24.99999999875)*sj1);
IkReal x1645=(cj0*px);
IkReal x1646=(py*sj0);
IkReal x1647=(sj2*sj3);
IkReal x1648=((0.333333333333333)*x1640);
IkReal x1649=((0.0002499999999875)*sj1);
IkReal x1650=((0.0002499999999875)*cj3);
IkReal x1651=((25.0)*cj1*pz);
CheckValue<IkReal> x1653=IKPowWithIntegerCheck(cj2,-1);
if(!x1653.valid){
continue;
}
if( IKabs((x1648*(x1653.value)*(((((-1.0)*x1641*x1643))+(((-1.0)*x1644*x1646*x1647))+((x1647*x1651))+(((3.7975)*x1647))+((x1645*x1650))+((x1641*x1642))+((x1646*x1650))+(((-1.0)*x1644*x1645*x1647))+((x1642*x1647*x1649))+(((-1.0)*x1643*x1647*x1649)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1648*(((-3.7975)+(((-1.0)*x1642*x1649))+(((-1.91025)*cj3))+((x1644*x1645))+((x1644*x1646))+(((-1.0)*x1651))+((x1643*x1649)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1648*(x1653.value)*(((((-1.0)*x1641*x1643))+(((-1.0)*x1644*x1646*x1647))+((x1647*x1651))+(((3.7975)*x1647))+((x1645*x1650))+((x1641*x1642))+((x1646*x1650))+(((-1.0)*x1644*x1645*x1647))+((x1642*x1647*x1649))+(((-1.0)*x1643*x1647*x1649))))))+IKsqr((x1648*(((-3.7975)+(((-1.0)*x1642*x1649))+(((-1.91025)*cj3))+((x1644*x1645))+((x1644*x1646))+(((-1.0)*x1651))+((x1643*x1649))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1648*(x1653.value)*(((((-1.0)*x1641*x1643))+(((-1.0)*x1644*x1646*x1647))+((x1647*x1651))+(((3.7975)*x1647))+((x1645*x1650))+((x1641*x1642))+((x1646*x1650))+(((-1.0)*x1644*x1645*x1647))+((x1642*x1647*x1649))+(((-1.0)*x1643*x1647*x1649))))), (x1648*(((-3.7975)+(((-1.0)*x1642*x1649))+(((-1.91025)*cj3))+((x1644*x1645))+((x1644*x1646))+(((-1.0)*x1651))+((x1643*x1649))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1654=IKcos(j4);
IkReal x1655=IKsin(j4);
IkReal x1656=((0.99999999995)*sj0);
IkReal x1657=(py*sj1);
IkReal x1658=((9.9999999995e-6)*cj0);
IkReal x1659=(cj1*py);
IkReal x1660=((9.9999999995e-6)*sj0);
IkReal x1661=(px*sj1);
IkReal x1662=(cj2*sj3);
IkReal x1663=(sj2*sj3);
IkReal x1664=(cj1*px);
IkReal x1665=((0.99999999995)*cj0);
IkReal x1666=((0.12)*x1654);
IkReal x1667=((0.12)*x1655);
evalcond[0]=((((0.07641)*x1663))+(((-1.0)*py*x1660))+(((-1.0)*px*x1656))+(((-1.0)*px*x1658))+((py*x1665))+((cj2*x1667))+((x1663*x1666)));
evalcond[1]=((0.1519)+(((-1.0)*x1656*x1657))+((x1660*x1661))+(((-1.0)*x1661*x1665))+((cj3*x1666))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1657*x1658)));
evalcond[2]=(((x1656*x1659))+(((0.07641)*x1662))+(((-1.0)*sj2*x1667))+((x1662*x1666))+((x1658*x1659))+((pz*sj1))+(((-1.0)*x1660*x1664))+((x1664*x1665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1668=(py*sj2);
IkReal x1669=(cj0*cj1);
IkReal x1670=(pz*sj1);
IkReal x1671=((0.0002499999999875)*sj0);
IkReal x1672=((8.33333333291667)*cj2);
IkReal x1673=(px*sj2);
IkReal x1674=(cj2*px);
IkReal x1675=(cj1*sj0);
IkReal x1676=(cj2*py*sj0);
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(sj3,-1);
if(!x1677.valid){
continue;
}
if( IKabs(((((8.33333333291667e-5)*x1676))+(((8.33333333333333)*sj2*x1670))+((px*sj0*x1672))+(((-8.33333333291667e-5)*x1673*x1675))+(((-1.0)*cj0*py*x1672))+(((8.33333333291667e-5)*x1668*x1669))+(((8.33333333291667e-5)*cj0*x1674))+(((8.33333333291667)*x1668*x1675))+(((8.33333333291667)*x1669*x1673)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1677.value)*(((((-24.99999999875)*cj0*x1668))+(((-1.91025)*sj3))+((cj1*x1671*x1674))+(((24.99999999875)*sj0*x1673))+((x1668*x1671))+(((-24.99999999875)*cj2*py*x1675))+(((-0.0002499999999875)*cj2*py*x1669))+(((-24.99999999875)*x1669*x1674))+(((-25.0)*cj2*x1670))+(((0.0002499999999875)*cj0*x1673)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667e-5)*x1676))+(((8.33333333333333)*sj2*x1670))+((px*sj0*x1672))+(((-8.33333333291667e-5)*x1673*x1675))+(((-1.0)*cj0*py*x1672))+(((8.33333333291667e-5)*x1668*x1669))+(((8.33333333291667e-5)*cj0*x1674))+(((8.33333333291667)*x1668*x1675))+(((8.33333333291667)*x1669*x1673))))+IKsqr(((0.333333333333333)*(x1677.value)*(((((-24.99999999875)*cj0*x1668))+(((-1.91025)*sj3))+((cj1*x1671*x1674))+(((24.99999999875)*sj0*x1673))+((x1668*x1671))+(((-24.99999999875)*cj2*py*x1675))+(((-0.0002499999999875)*cj2*py*x1669))+(((-24.99999999875)*x1669*x1674))+(((-25.0)*cj2*x1670))+(((0.0002499999999875)*cj0*x1673))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667e-5)*x1676))+(((8.33333333333333)*sj2*x1670))+((px*sj0*x1672))+(((-8.33333333291667e-5)*x1673*x1675))+(((-1.0)*cj0*py*x1672))+(((8.33333333291667e-5)*x1668*x1669))+(((8.33333333291667e-5)*cj0*x1674))+(((8.33333333291667)*x1668*x1675))+(((8.33333333291667)*x1669*x1673))), ((0.333333333333333)*(x1677.value)*(((((-24.99999999875)*cj0*x1668))+(((-1.91025)*sj3))+((cj1*x1671*x1674))+(((24.99999999875)*sj0*x1673))+((x1668*x1671))+(((-24.99999999875)*cj2*py*x1675))+(((-0.0002499999999875)*cj2*py*x1669))+(((-24.99999999875)*x1669*x1674))+(((-25.0)*cj2*x1670))+(((0.0002499999999875)*cj0*x1673))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1678=IKcos(j4);
IkReal x1679=IKsin(j4);
IkReal x1680=((0.99999999995)*sj0);
IkReal x1681=(py*sj1);
IkReal x1682=((9.9999999995e-6)*cj0);
IkReal x1683=(cj1*py);
IkReal x1684=((9.9999999995e-6)*sj0);
IkReal x1685=(px*sj1);
IkReal x1686=(cj2*sj3);
IkReal x1687=(sj2*sj3);
IkReal x1688=(cj1*px);
IkReal x1689=((0.99999999995)*cj0);
IkReal x1690=((0.12)*x1678);
IkReal x1691=((0.12)*x1679);
evalcond[0]=((((-1.0)*py*x1684))+(((0.07641)*x1687))+((py*x1689))+((x1687*x1690))+(((-1.0)*px*x1682))+(((-1.0)*px*x1680))+((cj2*x1691)));
evalcond[1]=((0.1519)+((cj3*x1690))+(((-1.0)*x1681*x1682))+(((-1.0)*x1685*x1689))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1680*x1681))+((x1684*x1685)));
evalcond[2]=((((-1.0)*sj2*x1691))+((x1680*x1683))+(((0.07641)*x1686))+((x1688*x1689))+((x1686*x1690))+((x1682*x1683))+((pz*sj1))+(((-1.0)*x1684*x1688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1692=((9.9999999995e-6)*sj0);
IkReal x1693=(r00*sj1);
IkReal x1694=((0.99999999995)*cj0);
IkReal x1695=(r01*sj1);
IkReal x1696=((9.9999999995e-6)*cj0);
IkReal x1697=((0.99999999995)*sj0);
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(sj2,-1);
if(!x1698.valid){
continue;
}
if( IKabs((((cj1*r02))+((x1692*x1693))+(((-1.0)*x1695*x1696))+(((-1.0)*x1695*x1697))+(((-1.0)*x1693*x1694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1698.value)*((((r01*x1692))+((r00*x1697))+((r00*x1696))+(((-1.0)*r01*x1694)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((x1692*x1693))+(((-1.0)*x1695*x1696))+(((-1.0)*x1695*x1697))+(((-1.0)*x1693*x1694))))+IKsqr(((x1698.value)*((((r01*x1692))+((r00*x1697))+((r00*x1696))+(((-1.0)*r01*x1694))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj1*r02))+((x1692*x1693))+(((-1.0)*x1695*x1696))+(((-1.0)*x1695*x1697))+(((-1.0)*x1693*x1694))), ((x1698.value)*((((r01*x1692))+((r00*x1697))+((r00*x1696))+(((-1.0)*r01*x1694))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1699=IKcos(j3);
IkReal x1700=((9.9999999995e-6)*sj0);
IkReal x1701=(cj1*r00);
IkReal x1702=(r00*sj1);
IkReal x1703=((0.99999999995)*cj0);
IkReal x1704=(r01*sj1);
IkReal x1705=((9.9999999995e-6)*cj0);
IkReal x1706=((0.99999999995)*sj0);
IkReal x1707=(cj1*r01);
evalcond[0]=(((sj2*x1699))+((r01*x1703))+(((-1.0)*r01*x1700))+(((-1.0)*r00*x1705))+(((-1.0)*r00*x1706)));
evalcond[1]=((((-1.0)*x1702*x1703))+((cj1*r02))+((x1700*x1702))+(((-1.0)*x1704*x1705))+(((-1.0)*x1704*x1706))+(((-1.0)*(IKsin(j3)))));
evalcond[2]=(((x1706*x1707))+((r02*sj1))+((x1705*x1707))+((x1701*x1703))+(((-1.0)*x1700*x1701))+((cj2*x1699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1708=((9.9999999995e-6)*r00);
IkReal x1709=(cj1*sj0);
IkReal x1710=(py*sj1);
IkReal x1711=((9.9999999995e-6)*cj0);
IkReal x1712=(sj0*sj1);
IkReal x1713=((0.99999999995)*sj0);
IkReal x1714=((0.99999999995)*r01);
IkReal x1715=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1713))+(((-9.9999999995e-6)*r01*sj0))+((cj0*x1714))+(((-1.0)*cj0*x1708)));
evalcond[2]=((-1.0)+(((-1.0)*x1712*x1714))+(((-1.0)*r01*sj1*x1711))+(((-1.0)*sj1*x1715))+((cj1*r02))+((x1708*x1712)));
evalcond[3]=(((x1709*x1714))+((cj1*x1715))+(((-1.0)*x1708*x1709))+((r02*sj1))+((cj1*r01*x1711)));
evalcond[4]=((0.1519)+(((-1.0)*x1710*x1713))+(((-1.0)*x1710*x1711))+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((9.9999999995e-6)*px*x1712)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1716=(cj0*cj1);
IkReal x1717=((8.33333333291667e-5)*py);
IkReal x1718=((8.33333333291667)*cj2);
IkReal x1719=(cj2*sj0);
IkReal x1720=(cj0*py);
IkReal x1721=(px*sj0);
IkReal x1722=((8.33333333291667)*sj2);
IkReal x1723=((8.33333333291667e-5)*sj2);
IkReal x1724=(cj0*px);
IkReal x1725=((8.33333333333333)*pz*sj1);
IkReal x1726=(cj1*py*sj0);
if( IKabs((((x1722*x1726))+((sj2*x1716*x1717))+((x1718*x1721))+(((8.33333333291667e-5)*cj2*x1724))+(((-1.0)*cj1*x1721*x1723))+(((-1.0)*x1718*x1720))+((px*x1716*x1722))+((sj2*x1725))+((x1717*x1719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((x1723*x1724))+((sj0*sj2*x1717))+((x1721*x1722))+(((-1.0)*cj2*x1725))+(((-1.0)*x1720*x1722))+(((-1.0)*px*x1716*x1718))+(((8.33333333291667e-5)*cj1*px*x1719))+(((-1.0)*cj2*x1716*x1717))+(((-1.0)*x1718*x1726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1722*x1726))+((sj2*x1716*x1717))+((x1718*x1721))+(((8.33333333291667e-5)*cj2*x1724))+(((-1.0)*cj1*x1721*x1723))+(((-1.0)*x1718*x1720))+((px*x1716*x1722))+((sj2*x1725))+((x1717*x1719))))+IKsqr(((-0.63675)+((x1723*x1724))+((sj0*sj2*x1717))+((x1721*x1722))+(((-1.0)*cj2*x1725))+(((-1.0)*x1720*x1722))+(((-1.0)*px*x1716*x1718))+(((8.33333333291667e-5)*cj1*px*x1719))+(((-1.0)*cj2*x1716*x1717))+(((-1.0)*x1718*x1726))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1722*x1726))+((sj2*x1716*x1717))+((x1718*x1721))+(((8.33333333291667e-5)*cj2*x1724))+(((-1.0)*cj1*x1721*x1723))+(((-1.0)*x1718*x1720))+((px*x1716*x1722))+((sj2*x1725))+((x1717*x1719))), ((-0.63675)+((x1723*x1724))+((sj0*sj2*x1717))+((x1721*x1722))+(((-1.0)*cj2*x1725))+(((-1.0)*x1720*x1722))+(((-1.0)*px*x1716*x1718))+(((8.33333333291667e-5)*cj1*px*x1719))+(((-1.0)*cj2*x1716*x1717))+(((-1.0)*x1718*x1726))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1727=IKcos(j4);
IkReal x1728=IKsin(j4);
IkReal x1729=((9.9999999995e-6)*px);
IkReal x1730=((0.12)*cj2);
IkReal x1731=((9.9999999995e-6)*py);
IkReal x1732=((0.99999999995)*px);
IkReal x1733=(cj1*sj0);
IkReal x1734=(cj0*cj1);
IkReal x1735=((0.12)*sj2);
IkReal x1736=((0.99999999995)*py);
evalcond[0]=(((cj0*x1736))+((x1728*x1730))+(((-1.0)*cj0*x1729))+(((-1.0)*sj0*x1732))+(((-1.0)*sj0*x1731))+((x1727*x1735))+(((0.07641)*sj2)));
evalcond[1]=(((x1731*x1734))+(((-1.0)*x1728*x1735))+(((-1.0)*x1729*x1733))+(((0.07641)*cj2))+((x1732*x1734))+((x1733*x1736))+((x1727*x1730))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1737=((9.9999999995e-6)*r00);
IkReal x1738=(cj1*sj0);
IkReal x1739=(py*sj1);
IkReal x1740=((9.9999999995e-6)*cj0);
IkReal x1741=(sj0*sj1);
IkReal x1742=((0.99999999995)*sj0);
IkReal x1743=((0.99999999995)*r01);
IkReal x1744=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1737))+(((-1.0)*r00*x1742))+((cj0*x1743)));
evalcond[2]=((1.0)+(((-1.0)*x1741*x1743))+((cj1*r02))+(((-1.0)*r01*sj1*x1740))+(((-1.0)*sj1*x1744))+((x1737*x1741)));
evalcond[3]=(((cj1*x1744))+((r02*sj1))+(((-1.0)*x1737*x1738))+((cj1*r01*x1740))+((x1738*x1743)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1741))+(((-1.0)*x1739*x1740))+(((-1.0)*x1739*x1742))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1745=(cj0*cj1);
IkReal x1746=((8.33333333291667e-5)*py);
IkReal x1747=((8.33333333291667)*cj2);
IkReal x1748=(cj2*sj0);
IkReal x1749=(cj0*py);
IkReal x1750=(px*sj0);
IkReal x1751=((8.33333333291667)*sj2);
IkReal x1752=((8.33333333291667e-5)*sj2);
IkReal x1753=(cj0*px);
IkReal x1754=((8.33333333333333)*pz*sj1);
IkReal x1755=(cj1*py*sj0);
if( IKabs(((((-1.0)*cj1*x1750*x1752))+((x1747*x1750))+((x1746*x1748))+((px*x1745*x1751))+((sj2*x1745*x1746))+(((8.33333333291667e-5)*cj2*x1753))+(((-1.0)*x1747*x1749))+((sj2*x1754))+((x1751*x1755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-8.33333333291667e-5)*cj1*px*x1748))+((x1749*x1751))+((x1747*x1755))+((cj2*x1754))+((px*x1745*x1747))+(((-1.0)*x1750*x1751))+(((-1.0)*x1752*x1753))+(((-1.0)*sj0*sj2*x1746))+((cj2*x1745*x1746)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1750*x1752))+((x1747*x1750))+((x1746*x1748))+((px*x1745*x1751))+((sj2*x1745*x1746))+(((8.33333333291667e-5)*cj2*x1753))+(((-1.0)*x1747*x1749))+((sj2*x1754))+((x1751*x1755))))+IKsqr(((-0.63675)+(((-8.33333333291667e-5)*cj1*px*x1748))+((x1749*x1751))+((x1747*x1755))+((cj2*x1754))+((px*x1745*x1747))+(((-1.0)*x1750*x1751))+(((-1.0)*x1752*x1753))+(((-1.0)*sj0*sj2*x1746))+((cj2*x1745*x1746))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x1750*x1752))+((x1747*x1750))+((x1746*x1748))+((px*x1745*x1751))+((sj2*x1745*x1746))+(((8.33333333291667e-5)*cj2*x1753))+(((-1.0)*x1747*x1749))+((sj2*x1754))+((x1751*x1755))), ((-0.63675)+(((-8.33333333291667e-5)*cj1*px*x1748))+((x1749*x1751))+((x1747*x1755))+((cj2*x1754))+((px*x1745*x1747))+(((-1.0)*x1750*x1751))+(((-1.0)*x1752*x1753))+(((-1.0)*sj0*sj2*x1746))+((cj2*x1745*x1746))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1756=IKcos(j4);
IkReal x1757=IKsin(j4);
IkReal x1758=((9.9999999995e-6)*px);
IkReal x1759=((0.12)*cj2);
IkReal x1760=((9.9999999995e-6)*py);
IkReal x1761=((0.99999999995)*px);
IkReal x1762=(cj1*sj0);
IkReal x1763=(cj0*cj1);
IkReal x1764=((0.12)*sj2);
IkReal x1765=((0.99999999995)*py);
evalcond[0]=((((-0.07641)*sj2))+(((-1.0)*cj0*x1758))+((cj0*x1765))+(((-1.0)*x1756*x1764))+((x1757*x1759))+(((-1.0)*sj0*x1761))+(((-1.0)*sj0*x1760)));
evalcond[1]=((((-1.0)*x1756*x1759))+(((-1.0)*x1757*x1764))+((x1762*x1765))+(((-0.07641)*cj2))+(((-1.0)*x1758*x1762))+((pz*sj1))+((x1761*x1763))+((x1760*x1763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1766=((9.9999999995e-6)*r00);
IkReal x1767=(cj1*sj0);
IkReal x1768=(sj0*sj1);
IkReal x1769=((0.99999999995)*r01);
IkReal x1770=((0.99999999995)*cj0*r00);
IkReal x1771=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1769))+(((-1.0)*cj0*x1766))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj3))+((cj1*r02))+(((-1.0)*sj1*x1770))+(((-1.0)*sj1*x1771))+((x1766*x1768))+(((-1.0)*x1768*x1769)));
evalcond[3]=(cj3+(((-1.0)*x1766*x1767))+((r02*sj1))+((x1767*x1769))+((cj1*x1771))+((cj1*x1770)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1772=((9.9999999995e-6)*r00);
IkReal x1773=(cj1*sj0);
IkReal x1774=(py*sj1);
IkReal x1775=((9.9999999995e-6)*cj0);
IkReal x1776=(sj0*sj1);
IkReal x1777=((0.99999999995)*sj0);
IkReal x1778=((0.99999999995)*r01);
IkReal x1779=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x1778))+(((-1.0)*r00*x1777))+(((-1.0)*cj0*x1772)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj1*x1775))+((cj1*r02))+(((-1.0)*sj1*x1779))+(((-1.0)*x1776*x1778))+((x1772*x1776)));
evalcond[3]=((((-1.0)*x1772*x1773))+((x1773*x1778))+((r02*sj1))+((cj1*r01*x1775))+((cj1*x1779)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1776))+((cj1*pz))+(((-1.0)*x1774*x1777))+(((-1.0)*x1774*x1775)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1780=(cj0*py);
IkReal x1781=((8.33333333291667e-5)*cj1);
IkReal x1782=(px*sj0);
IkReal x1783=(py*sj0);
IkReal x1784=(cj0*px);
IkReal x1785=((8.33333333291667)*cj1);
if( IKabs(((((8.33333333291667)*x1782))+(((-8.33333333291667)*x1780))+(((8.33333333291667e-5)*x1783))+(((8.33333333291667e-5)*x1784)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*x1783*x1785))+(((-1.0)*x1784*x1785))+(((-1.0)*x1780*x1781))+(((-8.33333333333333)*pz*sj1))+((x1781*x1782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x1782))+(((-8.33333333291667)*x1780))+(((8.33333333291667e-5)*x1783))+(((8.33333333291667e-5)*x1784))))+IKsqr(((-0.63675)+(((-1.0)*x1783*x1785))+(((-1.0)*x1784*x1785))+(((-1.0)*x1780*x1781))+(((-8.33333333333333)*pz*sj1))+((x1781*x1782))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x1782))+(((-8.33333333291667)*x1780))+(((8.33333333291667e-5)*x1783))+(((8.33333333291667e-5)*x1784))), ((-0.63675)+(((-1.0)*x1783*x1785))+(((-1.0)*x1784*x1785))+(((-1.0)*x1780*x1781))+(((-8.33333333333333)*pz*sj1))+((x1781*x1782))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1786=((9.9999999995e-6)*px);
IkReal x1787=((9.9999999995e-6)*py);
IkReal x1788=((0.99999999995)*px);
IkReal x1789=(cj1*sj0);
IkReal x1790=(cj0*cj1);
IkReal x1791=((0.99999999995)*py);
evalcond[0]=((((-1.0)*cj0*x1786))+(((-1.0)*sj0*x1787))+(((-1.0)*sj0*x1788))+(((0.12)*(IKsin(j4))))+((cj0*x1791)));
evalcond[1]=((0.07641)+(((0.12)*(IKcos(j4))))+((x1789*x1791))+((x1787*x1790))+(((-1.0)*x1786*x1789))+((pz*sj1))+((x1788*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1792=((9.9999999995e-6)*r00);
IkReal x1793=(cj1*sj0);
IkReal x1794=(py*sj1);
IkReal x1795=((9.9999999995e-6)*cj0);
IkReal x1796=(sj0*sj1);
IkReal x1797=((0.99999999995)*sj0);
IkReal x1798=((0.99999999995)*r01);
IkReal x1799=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*cj0*x1792))+(((-1.0)*r00*x1797))+((cj0*x1798)));
evalcond[2]=((1.0)+(((-1.0)*x1796*x1798))+((cj1*r02))+((x1792*x1796))+(((-1.0)*sj1*x1799))+(((-1.0)*r01*sj1*x1795)));
evalcond[3]=((((-1.0)*x1792*x1793))+((x1793*x1798))+((cj1*r01*x1795))+((r02*sj1))+((cj1*x1799)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((9.9999999995e-6)*px*x1796))+(((-1.0)*x1794*x1795))+(((-1.0)*x1794*x1797)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1800=(cj0*py);
IkReal x1801=((8.33333333291667e-5)*cj1);
IkReal x1802=(px*sj0);
IkReal x1803=(py*sj0);
IkReal x1804=(cj0*px);
IkReal x1805=((8.33333333291667)*cj1);
if( IKabs(((((-8.33333333291667)*x1800))+(((8.33333333291667e-5)*x1804))+(((8.33333333291667e-5)*x1803))+(((8.33333333291667)*x1802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((x1800*x1801))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x1801*x1802))+((x1803*x1805))+((x1804*x1805)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667)*x1800))+(((8.33333333291667e-5)*x1804))+(((8.33333333291667e-5)*x1803))+(((8.33333333291667)*x1802))))+IKsqr(((-0.63675)+((x1800*x1801))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x1801*x1802))+((x1803*x1805))+((x1804*x1805))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667)*x1800))+(((8.33333333291667e-5)*x1804))+(((8.33333333291667e-5)*x1803))+(((8.33333333291667)*x1802))), ((-0.63675)+((x1800*x1801))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x1801*x1802))+((x1803*x1805))+((x1804*x1805))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1806=((9.9999999995e-6)*px);
IkReal x1807=((9.9999999995e-6)*py);
IkReal x1808=((0.99999999995)*px);
IkReal x1809=(cj1*sj0);
IkReal x1810=(cj0*cj1);
IkReal x1811=((0.99999999995)*py);
evalcond[0]=(((cj0*x1811))+(((-1.0)*sj0*x1807))+(((-1.0)*sj0*x1808))+(((-1.0)*cj0*x1806))+(((0.12)*(IKsin(j4)))));
evalcond[1]=((-0.07641)+((x1809*x1811))+((x1807*x1810))+((x1808*x1810))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x1806*x1809))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1812=((9.9999999995e-6)*r00);
IkReal x1813=(cj1*sj0);
IkReal x1814=(sj0*sj1);
IkReal x1815=((0.99999999995)*r01);
IkReal x1816=(cj0*cj1);
IkReal x1817=((9.9999999995e-6)*r01);
IkReal x1818=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x1812))+((cj0*x1815))+(((-1.0)*sj0*x1817))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj1*x1818))+(((-1.0)*cj0*sj1*x1817))+((cj1*r02))+((x1812*x1814))+(((-1.0)*x1814*x1815)));
evalcond[3]=((1.0)+(((-1.0)*x1812*x1813))+((x1813*x1815))+(((0.99999999995)*r00*x1816))+((r02*sj1))+((x1816*x1817)));
evalcond[4]=((((9.9999999995e-6)*py*x1816))+(((0.99999999995)*py*x1813))+(((0.99999999995)*px*x1816))+((pz*sj1))+(((-9.9999999995e-6)*px*x1813)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1819=((8.33333333291667)*cj0);
IkReal x1820=((8.33333333291667)*sj0);
IkReal x1821=((8.33333333291667e-5)*py);
IkReal x1822=(px*sj1);
if( IKabs(((((-1.0)*py*x1819))+((px*x1820))+((sj0*x1821))+(((8.33333333291667e-5)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((py*sj1*x1820))+((x1819*x1822))+((cj0*sj1*x1821))+(((-8.33333333291667e-5)*sj0*x1822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x1819))+((px*x1820))+((sj0*x1821))+(((8.33333333291667e-5)*cj0*px))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((py*sj1*x1820))+((x1819*x1822))+((cj0*sj1*x1821))+(((-8.33333333291667e-5)*sj0*x1822))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*py*x1819))+((px*x1820))+((sj0*x1821))+(((8.33333333291667e-5)*cj0*px))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((py*sj1*x1820))+((x1819*x1822))+((cj0*sj1*x1821))+(((-8.33333333291667e-5)*sj0*x1822))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1823=(cj0*px);
IkReal x1824=(py*sj0);
IkReal x1825=((0.99999999995)*sj1);
IkReal x1826=(px*sj0);
IkReal x1827=((9.9999999995e-6)*sj1);
IkReal x1828=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x1823))+(((-9.9999999995e-6)*x1824))+(((0.99999999995)*x1828))+(((0.12)*(IKsin(j4))))+(((-0.99999999995)*x1826)));
evalcond[1]=((0.22831)+((x1826*x1827))+(((0.12)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*x1827*x1828))+(((-1.0)*x1823*x1825))+(((-1.0)*x1824*x1825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1829=((9.9999999995e-6)*r00);
IkReal x1830=(cj1*sj0);
IkReal x1831=(sj0*sj1);
IkReal x1832=((0.99999999995)*r01);
IkReal x1833=(cj0*cj1);
IkReal x1834=((9.9999999995e-6)*r01);
IkReal x1835=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj0*x1834))+((cj0*x1832))+(((-1.0)*cj0*x1829))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=(((x1829*x1831))+((cj1*r02))+(((-1.0)*cj0*sj1*x1834))+(((-1.0)*sj1*x1835))+(((-1.0)*x1831*x1832)));
evalcond[3]=((-1.0)+((r02*sj1))+((x1830*x1832))+((x1833*x1834))+(((-1.0)*x1829*x1830))+(((0.99999999995)*r00*x1833)));
evalcond[4]=((((9.9999999995e-6)*py*x1833))+(((-9.9999999995e-6)*px*x1830))+(((0.99999999995)*py*x1830))+((pz*sj1))+(((0.99999999995)*px*x1833)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1836=((8.33333333291667)*py);
IkReal x1837=((8.33333333291667)*px);
IkReal x1838=((8.33333333291667e-5)*py);
IkReal x1839=(sj0*sj1);
IkReal x1840=((8.33333333291667e-5)*px);
IkReal x1841=(cj0*sj1);
if( IKabs((((cj0*x1840))+((sj0*x1838))+((sj0*x1837))+(((-1.0)*cj0*x1836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-1.0)*x1836*x1839))+((x1839*x1840))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x1837*x1841))+(((-1.0)*x1838*x1841)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x1840))+((sj0*x1838))+((sj0*x1837))+(((-1.0)*cj0*x1836))))+IKsqr(((0.629083333333333)+(((-1.0)*x1836*x1839))+((x1839*x1840))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x1837*x1841))+(((-1.0)*x1838*x1841))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*x1840))+((sj0*x1838))+((sj0*x1837))+(((-1.0)*cj0*x1836))), ((0.629083333333333)+(((-1.0)*x1836*x1839))+((x1839*x1840))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x1837*x1841))+(((-1.0)*x1838*x1841))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1842=(cj0*px);
IkReal x1843=(py*sj0);
IkReal x1844=((0.99999999995)*sj1);
IkReal x1845=(px*sj0);
IkReal x1846=((9.9999999995e-6)*sj1);
IkReal x1847=(cj0*py);
evalcond[0]=((((-9.9999999995e-6)*x1842))+(((-9.9999999995e-6)*x1843))+(((0.99999999995)*x1847))+(((0.12)*(IKsin(j4))))+(((-0.99999999995)*x1845)));
evalcond[1]=((0.07549)+(((-1.0)*x1843*x1844))+(((-1.0)*x1842*x1844))+((x1845*x1846))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x1846*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1848=(cj0*py);
IkReal x1849=(px*sj0);
IkReal x1850=(py*sj0);
IkReal x1851=((24.99999999875)*sj1);
IkReal x1852=(cj0*px);
IkReal x1853=((0.0002499999999875)*sj1);
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(cj3,-1);
if(!x1854.valid){
continue;
}
if( IKabs(((((8.33333333291667)*x1849))+(((-8.33333333291667)*x1848))+(((8.33333333291667e-5)*x1850))+(((8.33333333291667e-5)*x1852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1854.value)*(((-3.7975)+(((-1.0)*x1849*x1853))+((x1851*x1852))+((x1848*x1853))+((x1850*x1851))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x1849))+(((-8.33333333291667)*x1848))+(((8.33333333291667e-5)*x1850))+(((8.33333333291667e-5)*x1852))))+IKsqr(((0.333333333333333)*(x1854.value)*(((-3.7975)+(((-1.0)*x1849*x1853))+((x1851*x1852))+((x1848*x1853))+((x1850*x1851))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x1849))+(((-8.33333333291667)*x1848))+(((8.33333333291667e-5)*x1850))+(((8.33333333291667e-5)*x1852))), ((0.333333333333333)*(x1854.value)*(((-3.7975)+(((-1.0)*x1849*x1853))+((x1851*x1852))+((x1848*x1853))+((x1850*x1851))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1855=IKcos(j4);
IkReal x1856=((9.9999999995e-6)*px);
IkReal x1857=((9.9999999995e-6)*py);
IkReal x1858=((0.99999999995)*px);
IkReal x1859=(cj1*sj0);
IkReal x1860=(cj0*sj1);
IkReal x1861=(cj0*cj1);
IkReal x1862=(sj0*sj1);
IkReal x1863=((0.99999999995)*py);
IkReal x1864=((0.12)*x1855);
evalcond[0]=((((0.12)*(IKsin(j4))))+((cj0*x1863))+(((-1.0)*cj0*x1856))+(((-1.0)*sj0*x1857))+(((-1.0)*sj0*x1858)));
evalcond[1]=(((x1859*x1863))+(((-1.0)*x1856*x1859))+((x1858*x1861))+((sj3*x1864))+((x1857*x1861))+((pz*sj1))+(((0.07641)*sj3)));
evalcond[2]=((0.1519)+((cj3*x1864))+(((-1.0)*x1862*x1863))+((cj1*pz))+(((0.07641)*cj3))+((x1856*x1862))+(((-1.0)*x1858*x1860))+(((-1.0)*x1857*x1860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1865=(cj0*py);
IkReal x1866=(px*sj0);
IkReal x1867=(py*sj0);
IkReal x1868=((24.99999999875)*cj1);
IkReal x1869=(cj0*px);
IkReal x1870=((0.0002499999999875)*cj1);
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(sj3,-1);
if(!x1871.valid){
continue;
}
if( IKabs(((((8.33333333291667e-5)*x1867))+(((8.33333333291667e-5)*x1869))+(((8.33333333291667)*x1866))+(((-8.33333333291667)*x1865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1871.value)*((((x1866*x1870))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x1867*x1868))+(((-1.0)*x1865*x1870))+(((-1.0)*x1868*x1869)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667e-5)*x1867))+(((8.33333333291667e-5)*x1869))+(((8.33333333291667)*x1866))+(((-8.33333333291667)*x1865))))+IKsqr(((0.333333333333333)*(x1871.value)*((((x1866*x1870))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x1867*x1868))+(((-1.0)*x1865*x1870))+(((-1.0)*x1868*x1869))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667e-5)*x1867))+(((8.33333333291667e-5)*x1869))+(((8.33333333291667)*x1866))+(((-8.33333333291667)*x1865))), ((0.333333333333333)*(x1871.value)*((((x1866*x1870))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*x1867*x1868))+(((-1.0)*x1865*x1870))+(((-1.0)*x1868*x1869))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1872=IKcos(j4);
IkReal x1873=((9.9999999995e-6)*px);
IkReal x1874=((9.9999999995e-6)*py);
IkReal x1875=((0.99999999995)*px);
IkReal x1876=(cj1*sj0);
IkReal x1877=(cj0*sj1);
IkReal x1878=(cj0*cj1);
IkReal x1879=(sj0*sj1);
IkReal x1880=((0.99999999995)*py);
IkReal x1881=((0.12)*x1872);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*sj0*x1874))+(((-1.0)*sj0*x1875))+((cj0*x1880))+(((-1.0)*cj0*x1873)));
evalcond[1]=((((-1.0)*x1873*x1876))+((x1874*x1878))+((x1876*x1880))+((pz*sj1))+((x1875*x1878))+(((0.07641)*sj3))+((sj3*x1881)));
evalcond[2]=((0.1519)+(((-1.0)*x1879*x1880))+(((-1.0)*x1874*x1877))+((cj3*x1881))+((cj1*pz))+(((0.07641)*cj3))+((x1873*x1879))+(((-1.0)*x1875*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1882=((9.9999999995e-6)*r00);
IkReal x1883=(cj1*sj0);
IkReal x1884=(sj0*sj1);
IkReal x1885=((0.99999999995)*r01);
IkReal x1886=((0.99999999995)*cj0*r00);
IkReal x1887=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x1882))+(((-9.9999999995e-6)*r01*sj0))+(((-0.99999999995)*r00*sj0))+((cj0*x1885)));
evalcond[2]=((((-1.0)*sj3))+((x1882*x1884))+((cj1*r02))+(((-1.0)*x1884*x1885))+(((-1.0)*sj1*x1887))+(((-1.0)*sj1*x1886)));
evalcond[3]=((((-1.0)*x1882*x1883))+((x1883*x1885))+((r02*sj1))+((cj1*x1887))+((cj1*x1886))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1888=((9.9999999995e-6)*r00);
IkReal x1889=(cj1*sj0);
IkReal x1890=(py*sj1);
IkReal x1891=((9.9999999995e-6)*cj0);
IkReal x1892=(sj0*sj1);
IkReal x1893=((0.99999999995)*sj0);
IkReal x1894=((0.99999999995)*r01);
IkReal x1895=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*x1888))+(((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1893))+((cj0*x1894)));
evalcond[2]=((-1.0)+(((-1.0)*x1892*x1894))+(((-1.0)*sj1*x1895))+((cj1*r02))+((x1888*x1892))+(((-1.0)*r01*sj1*x1891)));
evalcond[3]=(((cj1*r01*x1891))+(((-1.0)*x1888*x1889))+((cj1*x1895))+((r02*sj1))+((x1889*x1894)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1892))+((cj1*pz))+(((-1.0)*x1890*x1891))+(((-1.0)*x1890*x1893)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1896=(cj0*py);
IkReal x1897=((8.33333333291667e-5)*cj1);
IkReal x1898=(px*sj0);
IkReal x1899=(py*sj0);
IkReal x1900=(cj0*px);
IkReal x1901=((8.33333333291667)*cj1);
if( IKabs(((((8.33333333291667)*x1896))+(((-8.33333333291667)*x1898))+(((-8.33333333291667e-5)*x1899))+(((-8.33333333291667e-5)*x1900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*x1897*x1898))+((x1896*x1897))+(((8.33333333333333)*pz*sj1))+((x1900*x1901))+((x1899*x1901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x1896))+(((-8.33333333291667)*x1898))+(((-8.33333333291667e-5)*x1899))+(((-8.33333333291667e-5)*x1900))))+IKsqr(((-0.63675)+(((-1.0)*x1897*x1898))+((x1896*x1897))+(((8.33333333333333)*pz*sj1))+((x1900*x1901))+((x1899*x1901))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x1896))+(((-8.33333333291667)*x1898))+(((-8.33333333291667e-5)*x1899))+(((-8.33333333291667e-5)*x1900))), ((-0.63675)+(((-1.0)*x1897*x1898))+((x1896*x1897))+(((8.33333333333333)*pz*sj1))+((x1900*x1901))+((x1899*x1901))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1902=((9.9999999995e-6)*px);
IkReal x1903=((9.9999999995e-6)*py);
IkReal x1904=((0.99999999995)*px);
IkReal x1905=(cj1*sj0);
IkReal x1906=(cj0*cj1);
IkReal x1907=((0.99999999995)*py);
evalcond[0]=(((cj0*x1907))+(((-0.12)*(IKsin(j4))))+(((-1.0)*sj0*x1904))+(((-1.0)*sj0*x1903))+(((-1.0)*cj0*x1902)));
evalcond[1]=((-0.07641)+(((-1.0)*x1902*x1905))+((x1905*x1907))+((x1904*x1906))+((x1903*x1906))+(((-0.12)*(IKcos(j4))))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1908=((9.9999999995e-6)*r00);
IkReal x1909=(cj1*sj0);
IkReal x1910=(py*sj1);
IkReal x1911=((9.9999999995e-6)*cj0);
IkReal x1912=(sj0*sj1);
IkReal x1913=((0.99999999995)*sj0);
IkReal x1914=((0.99999999995)*r01);
IkReal x1915=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x1913))+((cj0*x1914))+(((-1.0)*cj0*x1908)));
evalcond[2]=((1.0)+(((-1.0)*sj1*x1915))+((cj1*r02))+(((-1.0)*r01*sj1*x1911))+((x1908*x1912))+(((-1.0)*x1912*x1914)));
evalcond[3]=(((cj1*x1915))+((r02*sj1))+((cj1*r01*x1911))+((x1909*x1914))+(((-1.0)*x1908*x1909)));
evalcond[4]=((0.1519)+(((-1.0)*x1910*x1911))+(((-1.0)*x1910*x1913))+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x1912))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1916=(cj0*py);
IkReal x1917=((8.33333333291667e-5)*cj1);
IkReal x1918=(px*sj0);
IkReal x1919=(py*sj0);
IkReal x1920=(cj0*px);
IkReal x1921=((8.33333333291667)*cj1);
if( IKabs(((((-8.33333333291667e-5)*x1919))+(((8.33333333291667)*x1916))+(((-8.33333333291667e-5)*x1920))+(((-8.33333333291667)*x1918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((x1917*x1918))+(((-1.0)*x1919*x1921))+(((-1.0)*x1916*x1917))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1920*x1921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667e-5)*x1919))+(((8.33333333291667)*x1916))+(((-8.33333333291667e-5)*x1920))+(((-8.33333333291667)*x1918))))+IKsqr(((-0.63675)+((x1917*x1918))+(((-1.0)*x1919*x1921))+(((-1.0)*x1916*x1917))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1920*x1921))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667e-5)*x1919))+(((8.33333333291667)*x1916))+(((-8.33333333291667e-5)*x1920))+(((-8.33333333291667)*x1918))), ((-0.63675)+((x1917*x1918))+(((-1.0)*x1919*x1921))+(((-1.0)*x1916*x1917))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x1920*x1921))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1922=((9.9999999995e-6)*px);
IkReal x1923=((9.9999999995e-6)*py);
IkReal x1924=((0.99999999995)*px);
IkReal x1925=(cj1*sj0);
IkReal x1926=(cj0*cj1);
IkReal x1927=((0.99999999995)*py);
evalcond[0]=((((-1.0)*sj0*x1924))+(((-1.0)*sj0*x1923))+((cj0*x1927))+(((-0.12)*(IKsin(j4))))+(((-1.0)*cj0*x1922)));
evalcond[1]=((0.07641)+(((-1.0)*x1922*x1925))+(((0.12)*(IKcos(j4))))+((x1923*x1926))+((pz*sj1))+((x1924*x1926))+((x1925*x1927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1928=((9.9999999995e-6)*r00);
IkReal x1929=(cj1*sj0);
IkReal x1930=(sj0*sj1);
IkReal x1931=((0.99999999995)*r01);
IkReal x1932=(cj0*cj1);
IkReal x1933=((9.9999999995e-6)*r01);
IkReal x1934=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj0*x1931))+(((-1.0)*cj0*x1928))+(((-1.0)*sj0*x1933))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*x1930*x1931))+(((-1.0)*sj1*x1934))+((cj1*r02))+(((-1.0)*cj0*sj1*x1933))+((x1928*x1930)));
evalcond[3]=((-1.0)+(((0.99999999995)*r00*x1932))+((x1932*x1933))+((r02*sj1))+(((-1.0)*x1928*x1929))+((x1929*x1931)));
evalcond[4]=((((0.99999999995)*py*x1929))+(((0.99999999995)*px*x1932))+(((9.9999999995e-6)*py*x1932))+((pz*sj1))+(((-9.9999999995e-6)*px*x1929)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1935=((8.33333333291667)*cj0);
IkReal x1936=((8.33333333291667)*sj0);
IkReal x1937=((8.33333333291667e-5)*py);
IkReal x1938=(px*sj1);
if( IKabs(((((-8.33333333291667e-5)*cj0*px))+(((-1.0)*px*x1936))+((py*x1935))+(((-1.0)*sj0*x1937)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((cj0*sj1*x1937))+(((-8.33333333291667e-5)*sj0*x1938))+((x1935*x1938))+((py*sj1*x1936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667e-5)*cj0*px))+(((-1.0)*px*x1936))+((py*x1935))+(((-1.0)*sj0*x1937))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((cj0*sj1*x1937))+(((-8.33333333291667e-5)*sj0*x1938))+((x1935*x1938))+((py*sj1*x1936))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667e-5)*cj0*px))+(((-1.0)*px*x1936))+((py*x1935))+(((-1.0)*sj0*x1937))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((cj0*sj1*x1937))+(((-8.33333333291667e-5)*sj0*x1938))+((x1935*x1938))+((py*sj1*x1936))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1939=(cj0*px);
IkReal x1940=(py*sj0);
IkReal x1941=((0.99999999995)*sj1);
IkReal x1942=(px*sj0);
IkReal x1943=((9.9999999995e-6)*sj1);
IkReal x1944=(cj0*py);
evalcond[0]=((((-0.99999999995)*x1942))+(((-9.9999999995e-6)*x1940))+(((-0.12)*(IKsin(j4))))+(((-9.9999999995e-6)*x1939))+(((0.99999999995)*x1944)));
evalcond[1]=((0.22831)+(((-1.0)*x1943*x1944))+(((0.12)*(IKcos(j4))))+(((-1.0)*x1940*x1941))+((cj1*pz))+((x1942*x1943))+(((-1.0)*x1939*x1941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1945=((9.9999999995e-6)*r00);
IkReal x1946=(cj1*sj0);
IkReal x1947=(sj0*sj1);
IkReal x1948=((0.99999999995)*r01);
IkReal x1949=(cj0*cj1);
IkReal x1950=((9.9999999995e-6)*r01);
IkReal x1951=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj0*x1948))+(((-1.0)*cj0*x1945))+(((-1.0)*sj0*x1950))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*cj0*sj1*x1950))+((x1945*x1947))+(((-1.0)*sj1*x1951))+(((-1.0)*x1947*x1948))+((cj1*r02)));
evalcond[3]=((1.0)+(((-1.0)*x1945*x1946))+((x1946*x1948))+((r02*sj1))+(((0.99999999995)*r00*x1949))+((x1949*x1950)));
evalcond[4]=((((-9.9999999995e-6)*px*x1946))+(((9.9999999995e-6)*py*x1949))+(((0.99999999995)*py*x1946))+(((0.99999999995)*px*x1949))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1952=((8.33333333291667)*py);
IkReal x1953=((8.33333333291667)*px);
IkReal x1954=((8.33333333291667e-5)*py);
IkReal x1955=(sj0*sj1);
IkReal x1956=((8.33333333291667e-5)*px);
IkReal x1957=(cj0*sj1);
if( IKabs((((cj0*x1952))+(((-1.0)*cj0*x1956))+(((-1.0)*sj0*x1953))+(((-1.0)*sj0*x1954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-1.0)*x1952*x1955))+(((-1.0)*x1954*x1957))+((x1955*x1956))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x1953*x1957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x1952))+(((-1.0)*cj0*x1956))+(((-1.0)*sj0*x1953))+(((-1.0)*sj0*x1954))))+IKsqr(((0.629083333333333)+(((-1.0)*x1952*x1955))+(((-1.0)*x1954*x1957))+((x1955*x1956))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x1953*x1957))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*x1952))+(((-1.0)*cj0*x1956))+(((-1.0)*sj0*x1953))+(((-1.0)*sj0*x1954))), ((0.629083333333333)+(((-1.0)*x1952*x1955))+(((-1.0)*x1954*x1957))+((x1955*x1956))+(((8.33333333333333)*cj1*pz))+(((-1.0)*x1953*x1957))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1958=(cj0*px);
IkReal x1959=(py*sj0);
IkReal x1960=((0.99999999995)*sj1);
IkReal x1961=(px*sj0);
IkReal x1962=((9.9999999995e-6)*sj1);
IkReal x1963=(cj0*py);
evalcond[0]=((((0.99999999995)*x1963))+(((-9.9999999995e-6)*x1958))+(((-9.9999999995e-6)*x1959))+(((-0.12)*(IKsin(j4))))+(((-0.99999999995)*x1961)));
evalcond[1]=((0.07549)+(((-1.0)*x1959*x1960))+(((-1.0)*x1958*x1960))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+((x1961*x1962))+(((-1.0)*x1962*x1963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1964=(cj0*py);
IkReal x1965=(px*sj0);
IkReal x1966=(py*sj0);
IkReal x1967=((24.99999999875)*sj1);
IkReal x1968=(cj0*px);
IkReal x1969=((0.0002499999999875)*sj1);
CheckValue<IkReal> x1970=IKPowWithIntegerCheck(cj3,-1);
if(!x1970.valid){
continue;
}
if( IKabs(((((-8.33333333291667e-5)*x1966))+(((-8.33333333291667e-5)*x1968))+(((-8.33333333291667)*x1965))+(((8.33333333291667)*x1964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1970.value)*(((-3.7975)+((x1964*x1969))+(((-1.0)*x1965*x1969))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x1966*x1967))+((x1967*x1968)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.33333333291667e-5)*x1966))+(((-8.33333333291667e-5)*x1968))+(((-8.33333333291667)*x1965))+(((8.33333333291667)*x1964))))+IKsqr(((0.333333333333333)*(x1970.value)*(((-3.7975)+((x1964*x1969))+(((-1.0)*x1965*x1969))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x1966*x1967))+((x1967*x1968))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-8.33333333291667e-5)*x1966))+(((-8.33333333291667e-5)*x1968))+(((-8.33333333291667)*x1965))+(((8.33333333291667)*x1964))), ((0.333333333333333)*(x1970.value)*(((-3.7975)+((x1964*x1969))+(((-1.0)*x1965*x1969))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x1966*x1967))+((x1967*x1968))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1971=IKcos(j4);
IkReal x1972=((9.9999999995e-6)*px);
IkReal x1973=((9.9999999995e-6)*py);
IkReal x1974=((0.99999999995)*px);
IkReal x1975=(cj1*sj0);
IkReal x1976=(cj0*sj1);
IkReal x1977=(cj0*cj1);
IkReal x1978=(sj0*sj1);
IkReal x1979=((0.99999999995)*py);
IkReal x1980=((0.12)*x1971);
evalcond[0]=((((-1.0)*cj0*x1972))+(((-1.0)*sj0*x1973))+(((-1.0)*sj0*x1974))+(((-0.12)*(IKsin(j4))))+((cj0*x1979)));
evalcond[1]=((((-0.07641)*sj3))+((x1975*x1979))+(((-1.0)*sj3*x1980))+(((-1.0)*x1972*x1975))+((x1974*x1977))+((x1973*x1977))+((pz*sj1)));
evalcond[2]=((0.1519)+((cj3*x1980))+((x1972*x1978))+(((-1.0)*x1974*x1976))+(((-1.0)*x1973*x1976))+(((-1.0)*x1978*x1979))+((cj1*pz))+(((0.07641)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1981=(cj0*py);
IkReal x1982=(px*sj0);
IkReal x1983=(py*sj0);
IkReal x1984=((24.99999999875)*cj1);
IkReal x1985=(cj0*px);
IkReal x1986=((0.0002499999999875)*cj1);
CheckValue<IkReal> x1987=IKPowWithIntegerCheck(sj3,-1);
if(!x1987.valid){
continue;
}
if( IKabs(((((8.33333333291667)*x1981))+(((-8.33333333291667)*x1982))+(((-8.33333333291667e-5)*x1983))+(((-8.33333333291667e-5)*x1985)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x1987.value)*((((x1984*x1985))+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+((x1981*x1986))+(((-1.0)*x1982*x1986))+((x1983*x1984)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x1981))+(((-8.33333333291667)*x1982))+(((-8.33333333291667e-5)*x1983))+(((-8.33333333291667e-5)*x1985))))+IKsqr(((0.333333333333333)*(x1987.value)*((((x1984*x1985))+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+((x1981*x1986))+(((-1.0)*x1982*x1986))+((x1983*x1984))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x1981))+(((-8.33333333291667)*x1982))+(((-8.33333333291667e-5)*x1983))+(((-8.33333333291667e-5)*x1985))), ((0.333333333333333)*(x1987.value)*((((x1984*x1985))+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+((x1981*x1986))+(((-1.0)*x1982*x1986))+((x1983*x1984))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1988=IKcos(j4);
IkReal x1989=((9.9999999995e-6)*px);
IkReal x1990=((9.9999999995e-6)*py);
IkReal x1991=((0.99999999995)*px);
IkReal x1992=(cj1*sj0);
IkReal x1993=(cj0*sj1);
IkReal x1994=(cj0*cj1);
IkReal x1995=(sj0*sj1);
IkReal x1996=((0.99999999995)*py);
IkReal x1997=((0.12)*x1988);
evalcond[0]=(((cj0*x1996))+(((-1.0)*cj0*x1989))+(((-1.0)*sj0*x1990))+(((-1.0)*sj0*x1991))+(((-0.12)*(IKsin(j4)))));
evalcond[1]=((((-0.07641)*sj3))+((x1991*x1994))+(((-1.0)*x1989*x1992))+(((-1.0)*sj3*x1997))+((x1990*x1994))+((pz*sj1))+((x1992*x1996)));
evalcond[2]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x1995*x1996))+((x1989*x1995))+(((-1.0)*x1991*x1993))+(((-1.0)*x1990*x1993))+((cj3*x1997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1998=((9.9999999995e-6)*r00);
IkReal x1999=(cj1*sj0);
IkReal x2000=(sj0*sj1);
IkReal x2001=((0.99999999995)*r01);
IkReal x2002=((0.99999999995)*cj0*r00);
IkReal x2003=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+cj3+(((-1.0)*cj0*x1998))+((cj0*x2001))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj3))+((cj1*r02))+(((-1.0)*sj1*x2002))+(((-1.0)*sj1*x2003))+(((-1.0)*x2000*x2001))+((x1998*x2000)));
evalcond[3]=((((-1.0)*x1998*x1999))+((x1999*x2001))+((r02*sj1))+((cj1*x2002))+((cj1*x2003)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2004=((9.9999999995e-6)*r00);
IkReal x2005=(cj1*sj0);
IkReal x2006=(py*sj1);
IkReal x2007=((9.9999999995e-6)*cj0);
IkReal x2008=(sj0*sj1);
IkReal x2009=((0.99999999995)*sj0);
IkReal x2010=((0.99999999995)*r01);
IkReal x2011=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x2009))+(((-1.0)*cj0*x2004))+((cj0*x2010)));
evalcond[2]=((-1.0)+(((-1.0)*x2008*x2010))+(((-1.0)*r01*sj1*x2007))+((cj1*r02))+((x2004*x2008))+(((-1.0)*sj1*x2011)));
evalcond[3]=(((cj1*x2011))+(((-1.0)*x2004*x2005))+((cj1*r01*x2007))+((r02*sj1))+((x2005*x2010)));
evalcond[4]=((0.1519)+(((-1.0)*x2006*x2007))+(((-1.0)*x2006*x2009))+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x2008))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2012=(cj0*py);
IkReal x2013=((8.33333333291667e-5)*cj1);
IkReal x2014=(px*sj0);
IkReal x2015=((8.33333333291667)*cj1);
IkReal x2016=(py*sj0);
IkReal x2017=(cj0*px);
if( IKabs((((x2015*x2016))+((x2015*x2017))+(((-1.0)*x2013*x2014))+(((8.33333333333333)*pz*sj1))+((x2012*x2013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-8.33333333291667)*x2012))+(((8.33333333291667)*x2014))+(((8.33333333291667e-5)*x2017))+(((8.33333333291667e-5)*x2016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2015*x2016))+((x2015*x2017))+(((-1.0)*x2013*x2014))+(((8.33333333333333)*pz*sj1))+((x2012*x2013))))+IKsqr(((-0.63675)+(((-8.33333333291667)*x2012))+(((8.33333333291667)*x2014))+(((8.33333333291667e-5)*x2017))+(((8.33333333291667e-5)*x2016))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x2015*x2016))+((x2015*x2017))+(((-1.0)*x2013*x2014))+(((8.33333333333333)*pz*sj1))+((x2012*x2013))), ((-0.63675)+(((-8.33333333291667)*x2012))+(((8.33333333291667)*x2014))+(((8.33333333291667e-5)*x2017))+(((8.33333333291667e-5)*x2016))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2018=((9.9999999995e-6)*px);
IkReal x2019=((9.9999999995e-6)*py);
IkReal x2020=((0.99999999995)*px);
IkReal x2021=(cj1*sj0);
IkReal x2022=(cj0*cj1);
IkReal x2023=((0.99999999995)*py);
evalcond[0]=((0.07641)+(((0.12)*(IKcos(j4))))+((cj0*x2023))+(((-1.0)*sj0*x2019))+(((-1.0)*sj0*x2020))+(((-1.0)*cj0*x2018)));
evalcond[1]=(((x2020*x2022))+((x2019*x2022))+(((-0.12)*(IKsin(j4))))+(((-1.0)*x2018*x2021))+((pz*sj1))+((x2021*x2023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2024=((9.9999999995e-6)*r00);
IkReal x2025=(cj1*sj0);
IkReal x2026=(py*sj1);
IkReal x2027=((9.9999999995e-6)*cj0);
IkReal x2028=(sj0*sj1);
IkReal x2029=((0.99999999995)*sj0);
IkReal x2030=((0.99999999995)*r01);
IkReal x2031=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x2029))+(((-1.0)*cj0*x2024))+((cj0*x2030)));
evalcond[2]=((1.0)+((x2024*x2028))+((cj1*r02))+(((-1.0)*r01*sj1*x2027))+(((-1.0)*sj1*x2031))+(((-1.0)*x2028*x2030)));
evalcond[3]=(((x2025*x2030))+((cj1*r01*x2027))+((r02*sj1))+(((-1.0)*x2024*x2025))+((cj1*x2031)));
evalcond[4]=((0.1519)+(((9.9999999995e-6)*px*x2028))+(((-0.99999999995)*cj0*px*sj1))+((cj1*pz))+(((-1.0)*x2026*x2027))+(((-1.0)*x2026*x2029)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2032=(cj0*py);
IkReal x2033=((8.33333333291667e-5)*cj1);
IkReal x2034=(px*sj0);
IkReal x2035=((8.33333333291667)*cj1);
IkReal x2036=(py*sj0);
IkReal x2037=(cj0*px);
if( IKabs((((x2032*x2033))+(((8.33333333333333)*pz*sj1))+((x2035*x2037))+((x2035*x2036))+(((-1.0)*x2033*x2034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((8.33333333291667)*x2032))+(((-8.33333333291667e-5)*x2037))+(((-8.33333333291667e-5)*x2036))+(((-8.33333333291667)*x2034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2032*x2033))+(((8.33333333333333)*pz*sj1))+((x2035*x2037))+((x2035*x2036))+(((-1.0)*x2033*x2034))))+IKsqr(((-0.63675)+(((8.33333333291667)*x2032))+(((-8.33333333291667e-5)*x2037))+(((-8.33333333291667e-5)*x2036))+(((-8.33333333291667)*x2034))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x2032*x2033))+(((8.33333333333333)*pz*sj1))+((x2035*x2037))+((x2035*x2036))+(((-1.0)*x2033*x2034))), ((-0.63675)+(((8.33333333291667)*x2032))+(((-8.33333333291667e-5)*x2037))+(((-8.33333333291667e-5)*x2036))+(((-8.33333333291667)*x2034))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2038=((9.9999999995e-6)*px);
IkReal x2039=((9.9999999995e-6)*py);
IkReal x2040=((0.99999999995)*px);
IkReal x2041=(cj1*sj0);
IkReal x2042=(cj0*cj1);
IkReal x2043=((0.99999999995)*py);
evalcond[0]=((-0.07641)+(((-1.0)*sj0*x2040))+((cj0*x2043))+(((-0.12)*(IKcos(j4))))+(((-1.0)*cj0*x2038))+(((-1.0)*sj0*x2039)));
evalcond[1]=(((x2041*x2043))+((x2040*x2042))+((x2039*x2042))+(((-0.12)*(IKsin(j4))))+((pz*sj1))+(((-1.0)*x2038*x2041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2044=((9.9999999995e-6)*r00);
IkReal x2045=(cj1*sj0);
IkReal x2046=((0.99999999995)*sj0);
IkReal x2047=(r01*sj1);
IkReal x2048=((9.9999999995e-6)*sj0);
IkReal x2049=((9.9999999995e-6)*cj0);
IkReal x2050=((0.99999999995)*r01);
IkReal x2051=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*cj0*x2044))+((cj0*x2050))+(((-1.0)*r01*x2048))+(((-1.0)*r00*x2046)));
evalcond[2]=(((sj0*sj1*x2044))+((cj1*r02))+(((-1.0)*sj1*x2051))+(((-1.0)*x2047*x2049))+(((-1.0)*x2046*x2047)));
evalcond[3]=((((-1.0)*x2044*x2045))+((r02*sj1))+((cj1*r01*x2049))+((x2045*x2050))+((cj1*x2051)));
evalcond[4]=((((0.99999999995)*cj0*py))+(((-1.0)*py*x2048))+(((-1.0)*px*x2049))+(((-1.0)*px*x2046)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2052=((8.33333333291667e-5)*cj1);
IkReal x2053=(px*sj0);
IkReal x2054=(cj0*py);
IkReal x2055=((8.33333333333333)*pz);
IkReal x2056=((8.33333333291667e-5)*sj1);
IkReal x2057=((8.33333333291667)*py*sj0);
IkReal x2058=((8.33333333291667)*cj0*px);
if( IKabs((((x2052*x2054))+((sj1*x2055))+((cj1*x2057))+((cj1*x2058))+(((-1.0)*x2052*x2053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*cj1*x2055))+((x2054*x2056))+((sj1*x2058))+((sj1*x2057))+(((-1.0)*x2053*x2056)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2052*x2054))+((sj1*x2055))+((cj1*x2057))+((cj1*x2058))+(((-1.0)*x2052*x2053))))+IKsqr(((-1.90258333333333)+(((-1.0)*cj1*x2055))+((x2054*x2056))+((sj1*x2058))+((sj1*x2057))+(((-1.0)*x2053*x2056))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x2052*x2054))+((sj1*x2055))+((cj1*x2057))+((cj1*x2058))+(((-1.0)*x2052*x2053))), ((-1.90258333333333)+(((-1.0)*cj1*x2055))+((x2054*x2056))+((sj1*x2058))+((sj1*x2057))+(((-1.0)*x2053*x2056))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2059=(py*sj1);
IkReal x2060=((9.9999999995e-6)*cj0);
IkReal x2061=((0.99999999995)*sj0);
IkReal x2062=(cj1*px);
IkReal x2063=((9.9999999995e-6)*sj0);
IkReal x2064=((0.99999999995)*cj0);
IkReal x2065=(px*sj1);
IkReal x2066=(cj1*py);
evalcond[0]=(((x2060*x2066))+(((-1.0)*x2062*x2063))+(((-0.12)*(IKsin(j4))))+((x2062*x2064))+((pz*sj1))+((x2061*x2066)));
evalcond[1]=((0.22831)+(((-1.0)*x2064*x2065))+(((0.12)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*x2059*x2061))+(((-1.0)*x2059*x2060))+((x2063*x2065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2067=((9.9999999995e-6)*r00);
IkReal x2068=(cj1*sj0);
IkReal x2069=((0.99999999995)*sj0);
IkReal x2070=(r01*sj1);
IkReal x2071=((9.9999999995e-6)*sj0);
IkReal x2072=((9.9999999995e-6)*cj0);
IkReal x2073=((0.99999999995)*r01);
IkReal x2074=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*cj0*x2067))+(((-1.0)*r00*x2069))+(((-1.0)*r01*x2071))+((cj0*x2073)));
evalcond[2]=((((-1.0)*x2070*x2072))+((cj1*r02))+(((-1.0)*sj1*x2074))+(((-1.0)*x2069*x2070))+((sj0*sj1*x2067)));
evalcond[3]=(((x2068*x2073))+((cj1*r01*x2072))+((r02*sj1))+((cj1*x2074))+(((-1.0)*x2067*x2068)));
evalcond[4]=((((-1.0)*px*x2072))+(((-1.0)*px*x2069))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x2071)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2075=((8.33333333291667e-5)*cj1);
IkReal x2076=(px*sj0);
IkReal x2077=(cj0*py);
IkReal x2078=((8.33333333333333)*pz);
IkReal x2079=((8.33333333291667e-5)*sj1);
IkReal x2080=((8.33333333291667)*py*sj0);
IkReal x2081=((8.33333333291667)*cj0*px);
if( IKabs((((x2075*x2077))+((cj1*x2080))+((cj1*x2081))+((sj1*x2078))+(((-1.0)*x2075*x2076)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-1.0)*sj1*x2081))+(((-1.0)*sj1*x2080))+(((-1.0)*x2077*x2079))+((x2076*x2079))+((cj1*x2078)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2075*x2077))+((cj1*x2080))+((cj1*x2081))+((sj1*x2078))+(((-1.0)*x2075*x2076))))+IKsqr(((0.629083333333333)+(((-1.0)*sj1*x2081))+(((-1.0)*sj1*x2080))+(((-1.0)*x2077*x2079))+((x2076*x2079))+((cj1*x2078))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x2075*x2077))+((cj1*x2080))+((cj1*x2081))+((sj1*x2078))+(((-1.0)*x2075*x2076))), ((0.629083333333333)+(((-1.0)*sj1*x2081))+(((-1.0)*sj1*x2080))+(((-1.0)*x2077*x2079))+((x2076*x2079))+((cj1*x2078))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2082=(py*sj1);
IkReal x2083=((9.9999999995e-6)*cj0);
IkReal x2084=((0.99999999995)*sj0);
IkReal x2085=(cj1*px);
IkReal x2086=((9.9999999995e-6)*sj0);
IkReal x2087=((0.99999999995)*cj0);
IkReal x2088=(px*sj1);
IkReal x2089=(cj1*py);
evalcond[0]=(((x2085*x2087))+((x2084*x2089))+(((-1.0)*x2085*x2086))+((x2083*x2089))+(((-0.12)*(IKsin(j4))))+((pz*sj1)));
evalcond[1]=((0.07549)+((x2086*x2088))+(((-1.0)*x2087*x2088))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*x2082*x2084))+(((-1.0)*x2082*x2083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2090=((8.33333333291667e-5)*cj1);
IkReal x2091=(px*sj0);
IkReal x2092=(cj0*py);
IkReal x2093=((0.0002499999999875)*sj1);
IkReal x2094=(py*sj0);
IkReal x2095=((24.99999999875)*sj1);
IkReal x2096=((8.33333333291667)*cj1);
IkReal x2097=(cj0*px);
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(cj3,-1);
if(!x2098.valid){
continue;
}
if( IKabs(((((-1.0)*x2090*x2091))+((x2094*x2096))+((x2096*x2097))+(((8.33333333333333)*pz*sj1))+((x2090*x2092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x2098.value)*(((-3.7975)+((x2094*x2095))+(((-1.0)*x2091*x2093))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x2092*x2093))+((x2095*x2097)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2090*x2091))+((x2094*x2096))+((x2096*x2097))+(((8.33333333333333)*pz*sj1))+((x2090*x2092))))+IKsqr(((0.333333333333333)*(x2098.value)*(((-3.7975)+((x2094*x2095))+(((-1.0)*x2091*x2093))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x2092*x2093))+((x2095*x2097))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2090*x2091))+((x2094*x2096))+((x2096*x2097))+(((8.33333333333333)*pz*sj1))+((x2090*x2092))), ((0.333333333333333)*(x2098.value)*(((-3.7975)+((x2094*x2095))+(((-1.0)*x2091*x2093))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x2092*x2093))+((x2095*x2097))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2099=IKcos(j4);
IkReal x2100=((9.9999999995e-6)*px);
IkReal x2101=((0.99999999995)*px);
IkReal x2102=((9.9999999995e-6)*py);
IkReal x2103=(cj1*sj0);
IkReal x2104=(cj0*sj1);
IkReal x2105=(cj0*cj1);
IkReal x2106=(sj0*sj1);
IkReal x2107=((0.99999999995)*py);
IkReal x2108=((0.12)*x2099);
evalcond[0]=(((cj0*x2107))+(((-1.0)*sj0*x2101))+(((-1.0)*sj0*x2102))+((sj3*x2108))+(((-1.0)*cj0*x2100))+(((0.07641)*sj3)));
evalcond[1]=((((-1.0)*x2100*x2103))+((x2103*x2107))+((x2102*x2105))+((x2101*x2105))+(((-0.12)*(IKsin(j4))))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x2102*x2104))+(((-1.0)*x2101*x2104))+(((-1.0)*x2106*x2107))+((cj1*pz))+((x2100*x2106))+(((0.07641)*cj3))+((cj3*x2108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2109=((8.33333333291667e-5)*cj1);
IkReal x2110=(px*sj0);
IkReal x2111=(cj0*py);
IkReal x2112=((8.33333333291667)*cj1);
IkReal x2113=(py*sj0);
IkReal x2114=(cj0*px);
CheckValue<IkReal> x2115=IKPowWithIntegerCheck(sj3,-1);
if(!x2115.valid){
continue;
}
if( IKabs((((x2109*x2111))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x2109*x2110))+((x2112*x2113))+((x2112*x2114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x2115.value)*(((((24.99999999875)*x2110))+(((0.0002499999999875)*x2113))+(((0.0002499999999875)*x2114))+(((-1.91025)*sj3))+(((-24.99999999875)*x2111)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2109*x2111))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x2109*x2110))+((x2112*x2113))+((x2112*x2114))))+IKsqr(((0.333333333333333)*(x2115.value)*(((((24.99999999875)*x2110))+(((0.0002499999999875)*x2113))+(((0.0002499999999875)*x2114))+(((-1.91025)*sj3))+(((-24.99999999875)*x2111))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x2109*x2111))+(((8.33333333333333)*pz*sj1))+(((-1.0)*x2109*x2110))+((x2112*x2113))+((x2112*x2114))), ((0.333333333333333)*(x2115.value)*(((((24.99999999875)*x2110))+(((0.0002499999999875)*x2113))+(((0.0002499999999875)*x2114))+(((-1.91025)*sj3))+(((-24.99999999875)*x2111))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2116=IKcos(j4);
IkReal x2117=((9.9999999995e-6)*px);
IkReal x2118=((0.99999999995)*px);
IkReal x2119=((9.9999999995e-6)*py);
IkReal x2120=(cj1*sj0);
IkReal x2121=(cj0*sj1);
IkReal x2122=(cj0*cj1);
IkReal x2123=(sj0*sj1);
IkReal x2124=((0.99999999995)*py);
IkReal x2125=((0.12)*x2116);
evalcond[0]=(((sj3*x2125))+(((-1.0)*cj0*x2117))+(((0.07641)*sj3))+(((-1.0)*sj0*x2119))+(((-1.0)*sj0*x2118))+((cj0*x2124)));
evalcond[1]=((((-1.0)*x2117*x2120))+((x2120*x2124))+((x2119*x2122))+((x2118*x2122))+(((-0.12)*(IKsin(j4))))+((pz*sj1)));
evalcond[2]=((0.1519)+(((-1.0)*x2119*x2121))+(((-1.0)*x2118*x2121))+((cj3*x2125))+((cj1*pz))+(((0.07641)*cj3))+((x2117*x2123))+(((-1.0)*x2123*x2124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2126=((9.9999999995e-6)*r00);
IkReal x2127=(cj1*sj0);
IkReal x2128=(sj0*sj1);
IkReal x2129=((9.9999999995e-6)*r01);
IkReal x2130=((0.99999999995)*r01);
IkReal x2131=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj0*x2129))+((cj0*x2130))+(((-0.99999999995)*r00*sj0))+(((-1.0)*cj0*x2126))+(((-1.0)*cj3)));
evalcond[2]=((((-1.0)*sj1*x2131))+(((-1.0)*sj3))+(((-1.0)*cj0*sj1*x2129))+((cj1*r02))+(((-1.0)*x2128*x2130))+((x2126*x2128)));
evalcond[3]=(((r02*sj1))+((x2127*x2130))+((cj1*x2131))+((cj0*cj1*x2129))+(((-1.0)*x2126*x2127)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2132=((9.9999999995e-6)*r00);
IkReal x2133=(cj1*sj0);
IkReal x2134=(py*sj1);
IkReal x2135=((9.9999999995e-6)*cj0);
IkReal x2136=(sj0*sj1);
IkReal x2137=((0.99999999995)*sj0);
IkReal x2138=((0.99999999995)*r01);
IkReal x2139=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+((cj0*x2138))+(((-1.0)*r00*x2137))+(((-1.0)*cj0*x2132)));
evalcond[2]=((-1.0)+(((-1.0)*sj1*x2139))+(((-1.0)*r01*sj1*x2135))+((cj1*r02))+(((-1.0)*x2136*x2138))+((x2132*x2136)));
evalcond[3]=(((cj1*r01*x2135))+((r02*sj1))+(((-1.0)*x2132*x2133))+((cj1*x2139))+((x2133*x2138)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((-1.0)*x2134*x2137))+(((-1.0)*x2134*x2135))+(((9.9999999995e-6)*px*x2136))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2140=(cj0*py);
IkReal x2141=((8.33333333291667e-5)*cj1);
IkReal x2142=(px*sj0);
IkReal x2143=((8.33333333291667)*cj1);
IkReal x2144=(py*sj0);
IkReal x2145=(cj0*px);
if( IKabs(((((-1.0)*x2143*x2145))+(((-1.0)*x2143*x2144))+(((-1.0)*x2140*x2141))+((x2141*x2142))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-8.33333333291667e-5)*x2145))+(((-8.33333333291667e-5)*x2144))+(((-8.33333333291667)*x2142))+(((8.33333333291667)*x2140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2143*x2145))+(((-1.0)*x2143*x2144))+(((-1.0)*x2140*x2141))+((x2141*x2142))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((-8.33333333291667e-5)*x2145))+(((-8.33333333291667e-5)*x2144))+(((-8.33333333291667)*x2142))+(((8.33333333291667)*x2140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2143*x2145))+(((-1.0)*x2143*x2144))+(((-1.0)*x2140*x2141))+((x2141*x2142))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+(((-8.33333333291667e-5)*x2145))+(((-8.33333333291667e-5)*x2144))+(((-8.33333333291667)*x2142))+(((8.33333333291667)*x2140))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2146=((9.9999999995e-6)*px);
IkReal x2147=((9.9999999995e-6)*py);
IkReal x2148=((0.99999999995)*px);
IkReal x2149=(cj1*sj0);
IkReal x2150=(cj0*cj1);
IkReal x2151=((0.99999999995)*py);
evalcond[0]=((-0.07641)+(((-1.0)*cj0*x2146))+((cj0*x2151))+(((-0.12)*(IKcos(j4))))+(((-1.0)*sj0*x2147))+(((-1.0)*sj0*x2148)));
evalcond[1]=(((x2147*x2150))+((x2149*x2151))+(((0.12)*(IKsin(j4))))+((x2148*x2150))+((pz*sj1))+(((-1.0)*x2146*x2149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2152=((9.9999999995e-6)*r00);
IkReal x2153=(cj1*sj0);
IkReal x2154=(py*sj1);
IkReal x2155=((9.9999999995e-6)*cj0);
IkReal x2156=(sj0*sj1);
IkReal x2157=((0.99999999995)*sj0);
IkReal x2158=((0.99999999995)*r01);
IkReal x2159=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*r00*x2157))+(((-1.0)*cj0*x2152))+((cj0*x2158)));
evalcond[2]=((1.0)+((x2152*x2156))+((cj1*r02))+(((-1.0)*sj1*x2159))+(((-1.0)*r01*sj1*x2155))+(((-1.0)*x2156*x2158)));
evalcond[3]=(((cj1*r01*x2155))+(((-1.0)*x2152*x2153))+((r02*sj1))+((x2153*x2158))+((cj1*x2159)));
evalcond[4]=((0.1519)+(((-0.99999999995)*cj0*px*sj1))+(((9.9999999995e-6)*px*x2156))+((cj1*pz))+(((-1.0)*x2154*x2157))+(((-1.0)*x2154*x2155)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2160=(cj0*py);
IkReal x2161=((8.33333333291667e-5)*cj1);
IkReal x2162=(px*sj0);
IkReal x2163=((8.33333333291667)*cj1);
IkReal x2164=(py*sj0);
IkReal x2165=(cj0*px);
if( IKabs(((((-1.0)*x2160*x2161))+(((-1.0)*x2163*x2165))+(((-1.0)*x2163*x2164))+((x2161*x2162))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((8.33333333291667)*x2162))+(((-8.33333333291667)*x2160))+(((8.33333333291667e-5)*x2164))+(((8.33333333291667e-5)*x2165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2160*x2161))+(((-1.0)*x2163*x2165))+(((-1.0)*x2163*x2164))+((x2161*x2162))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((8.33333333291667)*x2162))+(((-8.33333333291667)*x2160))+(((8.33333333291667e-5)*x2164))+(((8.33333333291667e-5)*x2165))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2160*x2161))+(((-1.0)*x2163*x2165))+(((-1.0)*x2163*x2164))+((x2161*x2162))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+(((8.33333333291667)*x2162))+(((-8.33333333291667)*x2160))+(((8.33333333291667e-5)*x2164))+(((8.33333333291667e-5)*x2165))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2166=((9.9999999995e-6)*px);
IkReal x2167=((9.9999999995e-6)*py);
IkReal x2168=((0.99999999995)*px);
IkReal x2169=(cj1*sj0);
IkReal x2170=(cj0*cj1);
IkReal x2171=((0.99999999995)*py);
evalcond[0]=((0.07641)+((cj0*x2171))+(((0.12)*(IKcos(j4))))+(((-1.0)*cj0*x2166))+(((-1.0)*sj0*x2167))+(((-1.0)*sj0*x2168)));
evalcond[1]=((((-1.0)*x2166*x2169))+(((0.12)*(IKsin(j4))))+((x2167*x2170))+((pz*sj1))+((x2168*x2170))+((x2169*x2171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2172=((9.9999999995e-6)*r00);
IkReal x2173=(cj1*sj0);
IkReal x2174=((0.99999999995)*sj0);
IkReal x2175=(r01*sj1);
IkReal x2176=((9.9999999995e-6)*sj0);
IkReal x2177=((9.9999999995e-6)*cj0);
IkReal x2178=((0.99999999995)*r01);
IkReal x2179=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((cj0*x2178))+(((-1.0)*cj0*x2172))+(((-1.0)*r01*x2176))+(((-1.0)*r00*x2174)));
evalcond[2]=((((-1.0)*x2174*x2175))+(((-1.0)*sj1*x2179))+((sj0*sj1*x2172))+((cj1*r02))+(((-1.0)*x2175*x2177)));
evalcond[3]=(((x2173*x2178))+((cj1*r01*x2177))+((r02*sj1))+((cj1*x2179))+(((-1.0)*x2172*x2173)));
evalcond[4]=((((-1.0)*px*x2177))+(((-1.0)*px*x2174))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x2176)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2180=((8.33333333291667e-5)*cj1);
IkReal x2181=(px*sj0);
IkReal x2182=(cj0*py);
IkReal x2183=((8.33333333333333)*pz);
IkReal x2184=((8.33333333291667e-5)*sj1);
IkReal x2185=((8.33333333291667)*py*sj0);
IkReal x2186=((8.33333333291667)*cj0*px);
if( IKabs(((((-1.0)*x2180*x2182))+((x2180*x2181))+(((-1.0)*sj1*x2183))+(((-1.0)*cj1*x2186))+(((-1.0)*cj1*x2185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+((x2182*x2184))+((sj1*x2185))+((sj1*x2186))+(((-1.0)*x2181*x2184))+(((-1.0)*cj1*x2183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2180*x2182))+((x2180*x2181))+(((-1.0)*sj1*x2183))+(((-1.0)*cj1*x2186))+(((-1.0)*cj1*x2185))))+IKsqr(((-1.90258333333333)+((x2182*x2184))+((sj1*x2185))+((sj1*x2186))+(((-1.0)*x2181*x2184))+(((-1.0)*cj1*x2183))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2180*x2182))+((x2180*x2181))+(((-1.0)*sj1*x2183))+(((-1.0)*cj1*x2186))+(((-1.0)*cj1*x2185))), ((-1.90258333333333)+((x2182*x2184))+((sj1*x2185))+((sj1*x2186))+(((-1.0)*x2181*x2184))+(((-1.0)*cj1*x2183))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2187=(py*sj1);
IkReal x2188=((9.9999999995e-6)*cj0);
IkReal x2189=((0.99999999995)*sj0);
IkReal x2190=(cj1*px);
IkReal x2191=((9.9999999995e-6)*sj0);
IkReal x2192=((0.99999999995)*cj0);
IkReal x2193=(px*sj1);
IkReal x2194=(cj1*py);
evalcond[0]=((((0.12)*(IKsin(j4))))+((x2190*x2192))+((x2189*x2194))+((x2188*x2194))+((pz*sj1))+(((-1.0)*x2190*x2191)));
evalcond[1]=((0.22831)+((x2191*x2193))+(((-1.0)*x2187*x2189))+(((-1.0)*x2187*x2188))+(((-1.0)*x2192*x2193))+(((0.12)*(IKcos(j4))))+((cj1*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2195=((9.9999999995e-6)*r00);
IkReal x2196=(cj1*sj0);
IkReal x2197=((0.99999999995)*sj0);
IkReal x2198=(r01*sj1);
IkReal x2199=((9.9999999995e-6)*sj0);
IkReal x2200=((9.9999999995e-6)*cj0);
IkReal x2201=((0.99999999995)*r01);
IkReal x2202=((0.99999999995)*cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r01*x2199))+(((-1.0)*cj0*x2195))+((cj0*x2201))+(((-1.0)*r00*x2197)));
evalcond[2]=((((-1.0)*sj1*x2202))+((sj0*sj1*x2195))+((cj1*r02))+(((-1.0)*x2197*x2198))+(((-1.0)*x2198*x2200)));
evalcond[3]=((((-1.0)*x2195*x2196))+((cj1*x2202))+((r02*sj1))+((cj1*r01*x2200))+((x2196*x2201)));
evalcond[4]=((((-1.0)*px*x2200))+(((0.99999999995)*cj0*py))+(((-1.0)*py*x2199))+(((-1.0)*px*x2197)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2203=((8.33333333291667e-5)*cj1);
IkReal x2204=(px*sj0);
IkReal x2205=(cj0*py);
IkReal x2206=((8.33333333333333)*pz);
IkReal x2207=((8.33333333291667e-5)*sj1);
IkReal x2208=((8.33333333291667)*py*sj0);
IkReal x2209=((8.33333333291667)*cj0*px);
if( IKabs(((((-1.0)*x2203*x2205))+(((-1.0)*sj1*x2206))+(((-1.0)*cj1*x2208))+(((-1.0)*cj1*x2209))+((x2203*x2204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-1.0)*sj1*x2209))+(((-1.0)*sj1*x2208))+(((-1.0)*x2205*x2207))+((cj1*x2206))+((x2204*x2207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2203*x2205))+(((-1.0)*sj1*x2206))+(((-1.0)*cj1*x2208))+(((-1.0)*cj1*x2209))+((x2203*x2204))))+IKsqr(((0.629083333333333)+(((-1.0)*sj1*x2209))+(((-1.0)*sj1*x2208))+(((-1.0)*x2205*x2207))+((cj1*x2206))+((x2204*x2207))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2203*x2205))+(((-1.0)*sj1*x2206))+(((-1.0)*cj1*x2208))+(((-1.0)*cj1*x2209))+((x2203*x2204))), ((0.629083333333333)+(((-1.0)*sj1*x2209))+(((-1.0)*sj1*x2208))+(((-1.0)*x2205*x2207))+((cj1*x2206))+((x2204*x2207))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2210=(py*sj1);
IkReal x2211=((9.9999999995e-6)*cj0);
IkReal x2212=((0.99999999995)*sj0);
IkReal x2213=(cj1*px);
IkReal x2214=((9.9999999995e-6)*sj0);
IkReal x2215=((0.99999999995)*cj0);
IkReal x2216=(px*sj1);
IkReal x2217=(cj1*py);
evalcond[0]=((((0.12)*(IKsin(j4))))+((x2211*x2217))+(((-1.0)*x2213*x2214))+((x2212*x2217))+((pz*sj1))+((x2213*x2215)));
evalcond[1]=((0.07549)+(((-1.0)*x2210*x2211))+(((-1.0)*x2210*x2212))+(((-1.0)*x2215*x2216))+((x2214*x2216))+((cj1*pz))+(((-0.12)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2218=((8.33333333291667e-5)*cj1);
IkReal x2219=(px*sj0);
IkReal x2220=(cj0*py);
IkReal x2221=((0.0002499999999875)*sj1);
IkReal x2222=(py*sj0);
IkReal x2223=((24.99999999875)*sj1);
IkReal x2224=((8.33333333291667)*cj1);
IkReal x2225=(cj0*px);
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(cj3,-1);
if(!x2226.valid){
continue;
}
if( IKabs(((((-1.0)*x2222*x2224))+(((-1.0)*x2224*x2225))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x2218*x2220))+((x2218*x2219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x2226.value)*(((-3.7975)+(((-1.0)*x2219*x2221))+((x2222*x2223))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x2220*x2221))+((x2223*x2225)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2222*x2224))+(((-1.0)*x2224*x2225))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x2218*x2220))+((x2218*x2219))))+IKsqr(((0.333333333333333)*(x2226.value)*(((-3.7975)+(((-1.0)*x2219*x2221))+((x2222*x2223))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x2220*x2221))+((x2223*x2225))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2222*x2224))+(((-1.0)*x2224*x2225))+(((-8.33333333333333)*pz*sj1))+(((-1.0)*x2218*x2220))+((x2218*x2219))), ((0.333333333333333)*(x2226.value)*(((-3.7975)+(((-1.0)*x2219*x2221))+((x2222*x2223))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+((x2220*x2221))+((x2223*x2225))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2227=IKcos(j4);
IkReal x2228=((9.9999999995e-6)*px);
IkReal x2229=((9.9999999995e-6)*py);
IkReal x2230=((0.99999999995)*px);
IkReal x2231=(cj1*sj0);
IkReal x2232=(cj0*sj1);
IkReal x2233=(cj0*cj1);
IkReal x2234=(sj0*sj1);
IkReal x2235=((0.99999999995)*py);
IkReal x2236=((0.12)*x2227);
evalcond[0]=((((-0.07641)*sj3))+((cj0*x2235))+(((-1.0)*sj0*x2230))+(((-1.0)*cj0*x2228))+(((-1.0)*sj0*x2229))+(((-1.0)*sj3*x2236)));
evalcond[1]=(((x2229*x2233))+(((0.12)*(IKsin(j4))))+(((-1.0)*x2228*x2231))+((x2230*x2233))+((x2231*x2235))+((pz*sj1)));
evalcond[2]=((0.1519)+((x2228*x2234))+(((-1.0)*x2234*x2235))+(((-1.0)*x2229*x2232))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x2230*x2232))+((cj3*x2236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2237=((8.33333333291667e-5)*cj1);
IkReal x2238=(px*sj0);
IkReal x2239=(cj0*py);
IkReal x2240=((8.33333333291667)*cj1);
IkReal x2241=(py*sj0);
IkReal x2242=(cj0*px);
CheckValue<IkReal> x2243=IKPowWithIntegerCheck(sj3,-1);
if(!x2243.valid){
continue;
}
if( IKabs(((((-1.0)*x2237*x2239))+((x2237*x2238))+(((-1.0)*x2240*x2242))+(((-1.0)*x2240*x2241))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x2243.value)*(((((-24.99999999875)*x2238))+(((-1.91025)*sj3))+(((-0.0002499999999875)*x2242))+(((-0.0002499999999875)*x2241))+(((24.99999999875)*x2239)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2237*x2239))+((x2237*x2238))+(((-1.0)*x2240*x2242))+(((-1.0)*x2240*x2241))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x2243.value)*(((((-24.99999999875)*x2238))+(((-1.91025)*sj3))+(((-0.0002499999999875)*x2242))+(((-0.0002499999999875)*x2241))+(((24.99999999875)*x2239))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2237*x2239))+((x2237*x2238))+(((-1.0)*x2240*x2242))+(((-1.0)*x2240*x2241))+(((-8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x2243.value)*(((((-24.99999999875)*x2238))+(((-1.91025)*sj3))+(((-0.0002499999999875)*x2242))+(((-0.0002499999999875)*x2241))+(((24.99999999875)*x2239))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2244=IKcos(j4);
IkReal x2245=((9.9999999995e-6)*px);
IkReal x2246=((9.9999999995e-6)*py);
IkReal x2247=((0.99999999995)*px);
IkReal x2248=(cj1*sj0);
IkReal x2249=(cj0*sj1);
IkReal x2250=(cj0*cj1);
IkReal x2251=(sj0*sj1);
IkReal x2252=((0.99999999995)*py);
IkReal x2253=((0.12)*x2244);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x2253))+(((-1.0)*cj0*x2245))+((cj0*x2252))+(((-1.0)*sj0*x2247))+(((-1.0)*sj0*x2246)));
evalcond[1]=(((x2246*x2250))+(((0.12)*(IKsin(j4))))+((x2247*x2250))+((pz*sj1))+(((-1.0)*x2245*x2248))+((x2248*x2252)));
evalcond[2]=((0.1519)+(((-1.0)*x2247*x2249))+((cj3*x2253))+((x2245*x2251))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x2246*x2249))+(((-1.0)*x2251*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2254=((9.9999999995e-6)*r00);
IkReal x2255=(cj1*sj0);
IkReal x2256=(sj0*sj1);
IkReal x2257=((0.99999999995)*r01);
IkReal x2258=((0.99999999995)*cj0*r00);
IkReal x2259=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+sj2+((cj0*x2257))+(((-1.0)*cj0*x2254))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=((((-1.0)*sj1*x2259))+(((-1.0)*sj1*x2258))+((x2254*x2256))+(((-1.0)*x2256*x2257))+((cj1*r02)));
evalcond[3]=(((x2255*x2257))+cj2+((cj1*x2259))+((cj1*x2258))+((r02*sj1))+(((-1.0)*x2254*x2255)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2260=(cj0*px);
IkReal x2261=((8.33333333291667)*sj1);
IkReal x2262=((24.99999999875)*cj1);
IkReal x2263=(py*sj0);
IkReal x2264=((8.33333333291667e-5)*sj1);
IkReal x2265=(px*sj0);
IkReal x2266=(cj0*py);
IkReal x2267=((0.0002499999999875)*cj1);
CheckValue<IkReal> x2268=IKPowWithIntegerCheck(sj2,-1);
if(!x2268.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x2268.value)*((((x2260*x2262))+(((25.0)*pz*sj1))+((x2262*x2263))+((x2266*x2267))+(((-1.0)*x2265*x2267)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+((x2260*x2261))+(((-8.33333333333333)*cj1*pz))+((x2261*x2263))+((x2264*x2266))+(((-1.0)*x2264*x2265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x2268.value)*((((x2260*x2262))+(((25.0)*pz*sj1))+((x2262*x2263))+((x2266*x2267))+(((-1.0)*x2265*x2267))))))+IKsqr(((-1.90258333333333)+((x2260*x2261))+(((-8.33333333333333)*cj1*pz))+((x2261*x2263))+((x2264*x2266))+(((-1.0)*x2264*x2265))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x2268.value)*((((x2260*x2262))+(((25.0)*pz*sj1))+((x2262*x2263))+((x2266*x2267))+(((-1.0)*x2265*x2267))))), ((-1.90258333333333)+((x2260*x2261))+(((-8.33333333333333)*cj1*pz))+((x2261*x2263))+((x2264*x2266))+(((-1.0)*x2264*x2265))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2269=IKsin(j4);
IkReal x2270=((9.9999999995e-6)*px);
IkReal x2271=(py*sj0);
IkReal x2272=((0.99999999995)*sj1);
IkReal x2273=((0.99999999995)*px);
IkReal x2274=(cj0*cj1);
IkReal x2275=((9.9999999995e-6)*py);
IkReal x2276=((0.12)*x2269);
evalcond[0]=((((-1.0)*sj0*x2273))+(((0.99999999995)*cj0*py))+((cj2*x2276))+(((-1.0)*cj0*x2270))+(((-9.9999999995e-6)*x2271)));
evalcond[1]=((0.22831)+(((-1.0)*cj0*sj1*x2275))+(((0.12)*(IKcos(j4))))+((cj1*pz))+(((-1.0)*cj0*px*x2272))+((sj0*sj1*x2270))+(((-1.0)*x2271*x2272)));
evalcond[2]=(((x2273*x2274))+(((0.99999999995)*cj1*x2271))+(((-1.0)*sj2*x2276))+(((-1.0)*cj1*sj0*x2270))+((pz*sj1))+((x2274*x2275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2277=((8.33333333291667)*sj1);
IkReal x2278=(cj0*px);
IkReal x2279=(cj0*py);
IkReal x2280=(py*sj0);
IkReal x2281=((8.33333333291667e-5)*sj1);
IkReal x2282=(px*sj0);
CheckValue<IkReal> x2283=IKPowWithIntegerCheck(cj2,-1);
if(!x2283.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x2283.value)*(((((0.0002499999999875)*x2280))+(((24.99999999875)*x2282))+(((-24.99999999875)*x2279))+(((0.0002499999999875)*x2278)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((x2277*x2280))+(((-1.0)*x2281*x2282))+((x2279*x2281))+((x2277*x2278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x2283.value)*(((((0.0002499999999875)*x2280))+(((24.99999999875)*x2282))+(((-24.99999999875)*x2279))+(((0.0002499999999875)*x2278))))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((x2277*x2280))+(((-1.0)*x2281*x2282))+((x2279*x2281))+((x2277*x2278))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x2283.value)*(((((0.0002499999999875)*x2280))+(((24.99999999875)*x2282))+(((-24.99999999875)*x2279))+(((0.0002499999999875)*x2278))))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+((x2277*x2280))+(((-1.0)*x2281*x2282))+((x2279*x2281))+((x2277*x2278))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2284=IKsin(j4);
IkReal x2285=((9.9999999995e-6)*px);
IkReal x2286=(py*sj0);
IkReal x2287=((0.99999999995)*sj1);
IkReal x2288=((0.99999999995)*px);
IkReal x2289=(cj0*cj1);
IkReal x2290=((9.9999999995e-6)*py);
IkReal x2291=((0.12)*x2284);
evalcond[0]=((((-1.0)*cj0*x2285))+((cj2*x2291))+(((0.99999999995)*cj0*py))+(((-9.9999999995e-6)*x2286))+(((-1.0)*sj0*x2288)));
evalcond[1]=((0.22831)+((sj0*sj1*x2285))+(((0.12)*(IKcos(j4))))+(((-1.0)*cj0*px*x2287))+((cj1*pz))+(((-1.0)*x2286*x2287))+(((-1.0)*cj0*sj1*x2290)));
evalcond[2]=((((0.99999999995)*cj1*x2286))+(((-1.0)*cj1*sj0*x2285))+((x2289*x2290))+(((-1.0)*sj2*x2291))+((pz*sj1))+((x2288*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2292=((9.9999999995e-6)*r00);
IkReal x2293=(cj1*sj0);
IkReal x2294=(sj0*sj1);
IkReal x2295=((0.99999999995)*r01);
IkReal x2296=((0.99999999995)*cj0*r00);
IkReal x2297=((9.9999999995e-6)*cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-9.9999999995e-6)*r01*sj0))+(((-1.0)*sj2))+((cj0*x2295))+(((-1.0)*cj0*x2292))+(((-0.99999999995)*r00*sj0)));
evalcond[2]=(((cj1*r02))+(((-1.0)*sj1*x2297))+(((-1.0)*sj1*x2296))+((x2292*x2294))+(((-1.0)*x2294*x2295)));
evalcond[3]=((((-1.0)*x2292*x2293))+((r02*sj1))+((cj1*x2297))+((cj1*x2296))+((x2293*x2295))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2298=(sj0*sj1);
IkReal x2299=((24.99999999875)*cj1);
IkReal x2300=(cj0*px);
IkReal x2301=(cj0*py);
IkReal x2302=((0.0002499999999875)*cj1);
CheckValue<IkReal> x2303=IKPowWithIntegerCheck(sj2,-1);
if(!x2303.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x2303.value)*(((((25.0)*pz*sj1))+(((-1.0)*px*sj0*x2302))+((x2301*x2302))+((x2299*x2300))+((py*sj0*x2299)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((-8.33333333291667e-5)*sj1*x2301))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667)*sj1*x2300))+(((8.33333333291667e-5)*px*x2298))+(((-8.33333333291667)*py*x2298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x2303.value)*(((((25.0)*pz*sj1))+(((-1.0)*px*sj0*x2302))+((x2301*x2302))+((x2299*x2300))+((py*sj0*x2299))))))+IKsqr(((0.629083333333333)+(((-8.33333333291667e-5)*sj1*x2301))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667)*sj1*x2300))+(((8.33333333291667e-5)*px*x2298))+(((-8.33333333291667)*py*x2298))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x2303.value)*(((((25.0)*pz*sj1))+(((-1.0)*px*sj0*x2302))+((x2301*x2302))+((x2299*x2300))+((py*sj0*x2299))))), ((0.629083333333333)+(((-8.33333333291667e-5)*sj1*x2301))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667)*sj1*x2300))+(((8.33333333291667e-5)*px*x2298))+(((-8.33333333291667)*py*x2298))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2304=IKsin(j4);
IkReal x2305=((9.9999999995e-6)*px);
IkReal x2306=(py*sj0);
IkReal x2307=((0.99999999995)*sj1);
IkReal x2308=((0.99999999995)*px);
IkReal x2309=(cj0*cj1);
IkReal x2310=((9.9999999995e-6)*py);
IkReal x2311=((0.12)*x2304);
evalcond[0]=(((cj2*x2311))+(((-9.9999999995e-6)*x2306))+(((0.99999999995)*cj0*py))+(((-1.0)*cj0*x2305))+(((-1.0)*sj0*x2308)));
evalcond[1]=((0.07549)+(((-1.0)*x2306*x2307))+(((-1.0)*cj0*px*x2307))+(((-1.0)*cj0*sj1*x2310))+((sj0*sj1*x2305))+((cj1*pz))+(((-0.12)*(IKcos(j4)))));
evalcond[2]=(((x2308*x2309))+(((0.99999999995)*cj1*x2306))+((x2309*x2310))+(((-1.0)*cj1*sj0*x2305))+(((-1.0)*sj2*x2311))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2312=(sj0*sj1);
IkReal x2313=(cj0*py);
IkReal x2314=(cj0*px);
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(cj2,-1);
if(!x2315.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x2315.value)*(((((24.99999999875)*px*sj0))+(((-24.99999999875)*x2313))+(((0.0002499999999875)*x2314))+(((0.0002499999999875)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((8.33333333291667e-5)*px*x2312))+(((-8.33333333291667)*sj1*x2314))+(((-8.33333333291667)*py*x2312))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667e-5)*sj1*x2313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x2315.value)*(((((24.99999999875)*px*sj0))+(((-24.99999999875)*x2313))+(((0.0002499999999875)*x2314))+(((0.0002499999999875)*py*sj0))))))+IKsqr(((0.629083333333333)+(((8.33333333291667e-5)*px*x2312))+(((-8.33333333291667)*sj1*x2314))+(((-8.33333333291667)*py*x2312))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667e-5)*sj1*x2313))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x2315.value)*(((((24.99999999875)*px*sj0))+(((-24.99999999875)*x2313))+(((0.0002499999999875)*x2314))+(((0.0002499999999875)*py*sj0))))), ((0.629083333333333)+(((8.33333333291667e-5)*px*x2312))+(((-8.33333333291667)*sj1*x2314))+(((-8.33333333291667)*py*x2312))+(((8.33333333333333)*cj1*pz))+(((-8.33333333291667e-5)*sj1*x2313))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2316=IKsin(j4);
IkReal x2317=((9.9999999995e-6)*px);
IkReal x2318=(py*sj0);
IkReal x2319=((0.99999999995)*sj1);
IkReal x2320=((0.99999999995)*px);
IkReal x2321=(cj0*cj1);
IkReal x2322=((9.9999999995e-6)*py);
IkReal x2323=((0.12)*x2316);
evalcond[0]=((((-1.0)*sj0*x2320))+((cj2*x2323))+(((-1.0)*cj0*x2317))+(((0.99999999995)*cj0*py))+(((-9.9999999995e-6)*x2318)));
evalcond[1]=((0.07549)+(((-1.0)*x2318*x2319))+((sj0*sj1*x2317))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+(((-1.0)*cj0*px*x2319))+(((-1.0)*cj0*sj1*x2322)));
evalcond[2]=(((x2321*x2322))+(((-1.0)*sj2*x2323))+((x2320*x2321))+(((-1.0)*cj1*sj0*x2317))+((pz*sj1))+(((0.99999999995)*cj1*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2334=IKPowWithIntegerCheck(cj3,-1);
if(!x2334.valid){
continue;
}
IkReal x2324=x2334.value;
IkReal x2325=((24.99999999875)*sj1);
IkReal x2326=(py*sj0);
IkReal x2327=(cj1*cj3);
IkReal x2328=(cj2*sj3);
IkReal x2329=(cj0*px);
IkReal x2330=((0.333333333333333)*x2324);
IkReal x2331=((25.0)*pz);
IkReal x2332=((0.0002499999999875)*cj0*py);
IkReal x2333=((0.0002499999999875)*px*sj0);
CheckValue<IkReal> x2335=IKPowWithIntegerCheck(sj2,-1);
if(!x2335.valid){
continue;
}
if( IKabs((x2330*(x2335.value)*((((cj3*sj1*x2331))+(((24.99999999875)*x2327*x2329))+(((-3.7975)*x2328))+((x2325*x2328*x2329))+((x2327*x2332))+(((24.99999999875)*x2326*x2327))+(((-1.0)*x2327*x2333))+((sj1*x2328*x2332))+(((-1.0)*sj1*x2328*x2333))+((x2325*x2326*x2328))+(((-1.0)*cj1*x2328*x2331)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2330*(((-3.7975)+((sj1*x2332))+(((-1.91025)*cj3))+(((-1.0)*cj1*x2331))+((x2325*x2326))+((x2325*x2329))+(((-1.0)*sj1*x2333)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2330*(x2335.value)*((((cj3*sj1*x2331))+(((24.99999999875)*x2327*x2329))+(((-3.7975)*x2328))+((x2325*x2328*x2329))+((x2327*x2332))+(((24.99999999875)*x2326*x2327))+(((-1.0)*x2327*x2333))+((sj1*x2328*x2332))+(((-1.0)*sj1*x2328*x2333))+((x2325*x2326*x2328))+(((-1.0)*cj1*x2328*x2331))))))+IKsqr((x2330*(((-3.7975)+((sj1*x2332))+(((-1.91025)*cj3))+(((-1.0)*cj1*x2331))+((x2325*x2326))+((x2325*x2329))+(((-1.0)*sj1*x2333))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2330*(x2335.value)*((((cj3*sj1*x2331))+(((24.99999999875)*x2327*x2329))+(((-3.7975)*x2328))+((x2325*x2328*x2329))+((x2327*x2332))+(((24.99999999875)*x2326*x2327))+(((-1.0)*x2327*x2333))+((sj1*x2328*x2332))+(((-1.0)*sj1*x2328*x2333))+((x2325*x2326*x2328))+(((-1.0)*cj1*x2328*x2331))))), (x2330*(((-3.7975)+((sj1*x2332))+(((-1.91025)*cj3))+(((-1.0)*cj1*x2331))+((x2325*x2326))+((x2325*x2329))+(((-1.0)*sj1*x2333))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2336=IKcos(j4);
IkReal x2337=IKsin(j4);
IkReal x2338=((0.99999999995)*sj0);
IkReal x2339=(py*sj1);
IkReal x2340=((9.9999999995e-6)*cj0);
IkReal x2341=(cj1*py);
IkReal x2342=((9.9999999995e-6)*sj0);
IkReal x2343=(px*sj1);
IkReal x2344=(cj2*sj3);
IkReal x2345=(sj2*sj3);
IkReal x2346=(cj1*px);
IkReal x2347=((0.99999999995)*cj0);
IkReal x2348=((0.12)*x2336);
IkReal x2349=((0.12)*x2337);
evalcond[0]=((((-1.0)*py*x2342))+((cj2*x2349))+((x2345*x2348))+(((-1.0)*px*x2340))+(((0.07641)*x2345))+((py*x2347))+(((-1.0)*px*x2338)));
evalcond[1]=((0.1519)+(((-1.0)*x2339*x2340))+(((-1.0)*x2338*x2339))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x2348))+(((-1.0)*x2343*x2347))+((x2342*x2343)));
evalcond[2]=(((x2346*x2347))+((x2340*x2341))+(((-1.0)*sj2*x2349))+((x2338*x2341))+((x2344*x2348))+(((0.07641)*x2344))+((pz*sj1))+(((-1.0)*x2342*x2346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2362=IKPowWithIntegerCheck(cj3,-1);
if(!x2362.valid){
continue;
}
IkReal x2350=x2362.value;
IkReal x2351=((24.99999999875)*cj3);
IkReal x2352=(px*sj0);
IkReal x2353=(cj0*py);
IkReal x2354=((24.99999999875)*sj1);
IkReal x2355=(cj0*px);
IkReal x2356=(py*sj0);
IkReal x2357=(sj2*sj3);
IkReal x2358=((0.333333333333333)*x2350);
IkReal x2359=((0.0002499999999875)*sj1);
IkReal x2360=((0.0002499999999875)*cj3);
IkReal x2361=((25.0)*cj1*pz);
CheckValue<IkReal> x2363=IKPowWithIntegerCheck(cj2,-1);
if(!x2363.valid){
continue;
}
if( IKabs((x2358*(x2363.value)*((((x2352*x2357*x2359))+(((-1.0)*x2353*x2357*x2359))+(((-1.0)*x2354*x2356*x2357))+((x2351*x2352))+((x2355*x2360))+(((-1.0)*x2354*x2355*x2357))+(((3.7975)*x2357))+((x2357*x2361))+((x2356*x2360))+(((-1.0)*x2351*x2353)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2358*(((-3.7975)+(((-1.0)*x2361))+((x2354*x2355))+((x2354*x2356))+((x2353*x2359))+(((-1.91025)*cj3))+(((-1.0)*x2352*x2359)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2358*(x2363.value)*((((x2352*x2357*x2359))+(((-1.0)*x2353*x2357*x2359))+(((-1.0)*x2354*x2356*x2357))+((x2351*x2352))+((x2355*x2360))+(((-1.0)*x2354*x2355*x2357))+(((3.7975)*x2357))+((x2357*x2361))+((x2356*x2360))+(((-1.0)*x2351*x2353))))))+IKsqr((x2358*(((-3.7975)+(((-1.0)*x2361))+((x2354*x2355))+((x2354*x2356))+((x2353*x2359))+(((-1.91025)*cj3))+(((-1.0)*x2352*x2359))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2358*(x2363.value)*((((x2352*x2357*x2359))+(((-1.0)*x2353*x2357*x2359))+(((-1.0)*x2354*x2356*x2357))+((x2351*x2352))+((x2355*x2360))+(((-1.0)*x2354*x2355*x2357))+(((3.7975)*x2357))+((x2357*x2361))+((x2356*x2360))+(((-1.0)*x2351*x2353))))), (x2358*(((-3.7975)+(((-1.0)*x2361))+((x2354*x2355))+((x2354*x2356))+((x2353*x2359))+(((-1.91025)*cj3))+(((-1.0)*x2352*x2359))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2364=IKcos(j4);
IkReal x2365=IKsin(j4);
IkReal x2366=((0.99999999995)*sj0);
IkReal x2367=(py*sj1);
IkReal x2368=((9.9999999995e-6)*cj0);
IkReal x2369=(cj1*py);
IkReal x2370=((9.9999999995e-6)*sj0);
IkReal x2371=(px*sj1);
IkReal x2372=(cj2*sj3);
IkReal x2373=(sj2*sj3);
IkReal x2374=(cj1*px);
IkReal x2375=((0.99999999995)*cj0);
IkReal x2376=((0.12)*x2364);
IkReal x2377=((0.12)*x2365);
evalcond[0]=(((x2373*x2376))+((py*x2375))+(((-1.0)*px*x2366))+(((-1.0)*px*x2368))+(((0.07641)*x2373))+((cj2*x2377))+(((-1.0)*py*x2370)));
evalcond[1]=((0.1519)+((x2370*x2371))+((cj1*pz))+(((0.07641)*cj3))+(((-1.0)*x2366*x2367))+((cj3*x2376))+(((-1.0)*x2371*x2375))+(((-1.0)*x2367*x2368)));
evalcond[2]=(((x2372*x2376))+((x2366*x2369))+((x2374*x2375))+(((0.07641)*x2372))+(((-1.0)*x2370*x2374))+((pz*sj1))+(((-1.0)*sj2*x2377))+((x2368*x2369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2378=(py*sj2);
IkReal x2379=(cj0*cj1);
IkReal x2380=(pz*sj1);
IkReal x2381=((0.0002499999999875)*sj0);
IkReal x2382=((8.33333333291667)*cj2);
IkReal x2383=(px*sj2);
IkReal x2384=(cj2*px);
IkReal x2385=(cj1*sj0);
IkReal x2386=(cj2*py*sj0);
CheckValue<IkReal> x2387=IKPowWithIntegerCheck(sj3,-1);
if(!x2387.valid){
continue;
}
if( IKabs(((((8.33333333291667)*x2378*x2385))+((px*sj0*x2382))+(((8.33333333291667e-5)*x2386))+(((8.33333333291667e-5)*x2378*x2379))+(((-8.33333333291667e-5)*x2383*x2385))+(((8.33333333291667e-5)*cj0*x2384))+(((8.33333333333333)*sj2*x2380))+(((-1.0)*cj0*py*x2382))+(((8.33333333291667)*x2379*x2383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x2387.value)*(((((-0.0002499999999875)*cj2*py*x2379))+(((-1.91025)*sj3))+(((-24.99999999875)*cj0*x2378))+(((-25.0)*cj2*x2380))+(((0.0002499999999875)*cj0*x2383))+(((-24.99999999875)*cj2*py*x2385))+((cj1*x2381*x2384))+(((-24.99999999875)*x2379*x2384))+(((24.99999999875)*sj0*x2383))+((x2378*x2381)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333291667)*x2378*x2385))+((px*sj0*x2382))+(((8.33333333291667e-5)*x2386))+(((8.33333333291667e-5)*x2378*x2379))+(((-8.33333333291667e-5)*x2383*x2385))+(((8.33333333291667e-5)*cj0*x2384))+(((8.33333333333333)*sj2*x2380))+(((-1.0)*cj0*py*x2382))+(((8.33333333291667)*x2379*x2383))))+IKsqr(((0.333333333333333)*(x2387.value)*(((((-0.0002499999999875)*cj2*py*x2379))+(((-1.91025)*sj3))+(((-24.99999999875)*cj0*x2378))+(((-25.0)*cj2*x2380))+(((0.0002499999999875)*cj0*x2383))+(((-24.99999999875)*cj2*py*x2385))+((cj1*x2381*x2384))+(((-24.99999999875)*x2379*x2384))+(((24.99999999875)*sj0*x2383))+((x2378*x2381))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333291667)*x2378*x2385))+((px*sj0*x2382))+(((8.33333333291667e-5)*x2386))+(((8.33333333291667e-5)*x2378*x2379))+(((-8.33333333291667e-5)*x2383*x2385))+(((8.33333333291667e-5)*cj0*x2384))+(((8.33333333333333)*sj2*x2380))+(((-1.0)*cj0*py*x2382))+(((8.33333333291667)*x2379*x2383))), ((0.333333333333333)*(x2387.value)*(((((-0.0002499999999875)*cj2*py*x2379))+(((-1.91025)*sj3))+(((-24.99999999875)*cj0*x2378))+(((-25.0)*cj2*x2380))+(((0.0002499999999875)*cj0*x2383))+(((-24.99999999875)*cj2*py*x2385))+((cj1*x2381*x2384))+(((-24.99999999875)*x2379*x2384))+(((24.99999999875)*sj0*x2383))+((x2378*x2381))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2388=IKcos(j4);
IkReal x2389=IKsin(j4);
IkReal x2390=((0.99999999995)*sj0);
IkReal x2391=(py*sj1);
IkReal x2392=((9.9999999995e-6)*cj0);
IkReal x2393=(cj1*py);
IkReal x2394=((9.9999999995e-6)*sj0);
IkReal x2395=(px*sj1);
IkReal x2396=(cj2*sj3);
IkReal x2397=(sj2*sj3);
IkReal x2398=(cj1*px);
IkReal x2399=((0.99999999995)*cj0);
IkReal x2400=((0.12)*x2388);
IkReal x2401=((0.12)*x2389);
evalcond[0]=((((-1.0)*px*x2392))+(((-1.0)*px*x2390))+((py*x2399))+((cj2*x2401))+(((-1.0)*py*x2394))+((x2397*x2400))+(((0.07641)*x2397)));
evalcond[1]=((0.1519)+(((-1.0)*x2390*x2391))+((cj1*pz))+((cj3*x2400))+(((0.07641)*cj3))+((x2394*x2395))+(((-1.0)*x2391*x2392))+(((-1.0)*x2395*x2399)));
evalcond[2]=(((x2392*x2393))+((x2398*x2399))+(((-1.0)*sj2*x2401))+((x2390*x2393))+((x2396*x2400))+(((-1.0)*x2394*x2398))+((pz*sj1))+(((0.07641)*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
static inline bool checkconsistency12(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 11; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-6*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[0]-Breal[1]) < tol && IKabs(Breal[0]*Breal[2]-Breal[3]) < tol && IKabs(Breal[1]*Breal[2]-Breal[4]) < tol && IKabs(Breal[2]*Breal[2]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol && IKabs(Breal[1]*Breal[5]-Breal[7]) < tol && IKabs(Breal[2]*Breal[5]-Breal[8]) < tol && IKabs(Breal[0]*Breal[8]-Breal[9]) < tol && IKabs(Breal[1]*Breal[8]-Breal[10]) < tol;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - up1 (b5f1342131c37982afb9cd64dccacfe0)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
