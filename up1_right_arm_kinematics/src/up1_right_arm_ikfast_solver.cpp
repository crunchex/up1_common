/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-08-03 13:14:31.480324
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38;
x0=IKsin(j[3]);
x1=IKcos(j[0]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKsin(j[2]);
x6=IKsin(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.866025504730542)*x0);
x11=((0.499999825156179)*x9);
x12=((0.866025504730542)*x9);
x13=((0.12)*x7);
x14=((0.499999825156179)*x0);
x15=((0.07641)*x1);
x16=((0.0661730088164608)*x7);
x17=((0.0382049866401836)*x7);
x18=((0.12)*x3);
x19=((0.12)*x0);
x20=(x4*x5);
x21=(x4*x6);
x22=(x1*x2);
x23=(x2*x3);
x24=(x2*x4);
x25=(x1*x6);
x26=(x3*x6*x7);
x27=(x5*x6*x8);
x28=(x0*x3*x6);
x29=((1.0)*x22*x3);
x30=(((x1*x18))+(((-0.12)*x2*x20)));
x31=((((0.07641)*x23*x4))+((x15*x5)));
x32=((((-1.0)*x0*x18*x6))+(((-1.0)*x13*x2)));
x33=((((1.0)*x23*x4))+(((1.0)*x1*x5)));
x34=((-1.0)*x33);
x35=(x30*x8);
x36=(x34*x7);
x37=(((x19*x33))+(((-1.0)*x13*x21)));
x38=(x37*x9);
eetrans[0]=((0.0053)+(((-1.0)*x15*x6*x7))+((x9*(((((-1.0)*x13*x25))+((x19*(((((-1.0)*x20))+x29))))))))+((x8*(((((-1.0)*x18*x4))+(((-0.12)*x22*x5))))))+((x0*(((((-0.07641)*x20))+((x15*x23))))))+(((-2.6e-7)*x22))+(((-0.1519)*x25)));
eetrans[1]=((-0.109039987694492)+(((0.131549274168569)*x21))+(((0.0599999790187414)*x27))+(((-1.0)*x12*x37))+(((-0.0759499734412235)*x2))+((x11*x32))+(((2.25166631229941e-7)*x24))+(((-1.0)*x17*x2))+(((-1.0)*x10*x31))+(((-0.866025504730542)*x35))+(((-0.0382049866401836)*x28))+((x16*x21))+(((1.29999954540606e-7)*x6)));
eetrans[2]=((0.131350875022936)+(((-2.25166631229941e-7)*x6))+(((0.0661730088164608)*x28))+(((-1.0)*x12*x32))+(((1.29999954540606e-7)*x24))+(((-1.0)*x14*x31))+(((0.0759499734412235)*x21))+((x17*x21))+((x16*x2))+(((-1.0)*x11*x37))+(((-0.499999825156179)*x35))+(((-0.103923060567665)*x27))+(((0.131549274168569)*x2)));
eerot[0]=((((-1.0)*x0*x25))+((x7*(((((-1.0)*x29))+x20)))));
eerot[1]=((((0.499999825156179)*x26))+(((-0.866025504730542)*x36))+(((-1.0)*x14*x2))+((x10*x21)));
eerot[2]=(((x14*x21))+(((-0.499999825156179)*x36))+((x10*x2))+(((-0.866025504730542)*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((-0.0053)+px);
new_r01=((((-0.866025504730542)*r01))+(((-0.499999825156179)*r02)));
new_py=((-0.0287559958333556)+(((-0.866025504730542)*py))+(((-0.499999825156179)*pz)));
new_r02=((((-0.866025504730542)*r02))+(((0.499999825156179)*r01)));
new_pz=((0.168273182620814)+(((-0.866025504730542)*pz))+(((0.499999825156179)*py)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[162], zeror[48];
int numroots;;
IkReal x39=py*py;
IkReal x40=px*px;
IkReal x41=pz*pz;
IkReal x42=((0.00174145177199189)*r00);
IkReal x43=((9.47856e-9)*r02);
IkReal x44=((0.0183384)*pz);
IkReal x45=((0.00174145177200811)*r01);
IkReal x46=((0.0366768)*px);
IkReal x47=((0.00348290354398378)*r02);
IkReal x48=((1.895712e-8)*r00);
IkReal x49=(px*r00);
IkReal x50=(pz*r02);
IkReal x51=(py*r01);
IkReal x52=((2.6e-7)*r00);
IkReal x53=((0.1519)*r02);
IkReal x54=((4.767984e-9)*r02);
IkReal x55=((6.24e-8)*px);
IkReal x56=((0.036456)*pz);
IkReal x57=((0.00278560296)*r00);
IkReal x58=((0.00557120592)*r02);
IkReal x59=((1.248e-7)*pz);
IkReal x60=((9.535968e-9)*r00);
IkReal x61=((0.072912)*px);
IkReal x62=((0.00557120592)*r01);
IkReal x63=((0.0028351219000676)*r01);
IkReal x64=((0.0056702437998648)*r00);
IkReal x65=((1.57976e-7)*r02);
IkReal x66=((2.0)*r00);
IkReal x67=((0.00348290354398378)*r01);
IkReal x68=((0.00348290354401622)*r00);
IkReal x69=((0.0733536)*py);
IkReal x70=((3.791424e-8)*r01);
IkReal x71=((1.248e-7)*py);
IkReal x72=((1.9071936e-8)*r01);
IkReal x73=((0.145824)*py);
IkReal x74=((0.01114241184)*r00);
IkReal x75=((0.0056702438001352)*r00);
IkReal x76=((0.0113404875997296)*r01);
IkReal x77=((4.0)*r02);
IkReal x78=((0.3038)*r00);
IkReal x79=((5.2e-7)*r02);
IkReal x80=((0.0113404875997296)*r02);
IkReal x81=((3.15952e-7)*r00);
IkReal x82=((4.0)*r01);
IkReal x83=(pz*r01);
IkReal x84=((0.036456)*r02);
IkReal x85=(py*r00);
IkReal x86=(pz*r00);
IkReal x87=((1.0)*r01);
IkReal x88=(py*r02);
IkReal x89=((0.48)*px);
IkReal x90=(px*r01);
IkReal x91=(px*r02);
IkReal x92=((0.24)*pz);
IkReal x93=((8.0)*px);
IkReal x94=((-1.0)*r01);
IkReal x95=((6.24e-8)*x49);
IkReal x96=((6.24e-8)*x50);
IkReal x97=((6.24e-8)*x51);
IkReal x98=(px*x84);
IkReal x99=(r00*x56);
IkReal x100=(r01*x55);
IkReal x101=(r01*x56);
IkReal x102=(py*x84);
IkReal x103=((6.24e-8)*x85);
IkReal x104=((0.0183384)*x91);
IkReal x105=((0.12)*x40);
IkReal x106=((0.12)*x41);
IkReal x107=((0.12)*x39);
IkReal x108=(r00*x44);
IkReal x109=((0.0366768)*x88);
IkReal x110=((0.0366768)*x83);
IkReal x111=((0.3038)*x88);
IkReal x112=((5.2e-7)*x85);
IkReal x113=((5.2e-7)*x90);
IkReal x114=((0.3038)*x83);
IkReal x115=(r01*x40);
IkReal x116=(r01*x41);
IkReal x117=((1.04e-6)*x49);
IkReal x118=((1.04e-6)*x51);
IkReal x119=((1.04e-6)*x50);
IkReal x120=((0.6076)*x91);
IkReal x121=((0.6076)*x86);
IkReal x122=(r01*x39);
IkReal x123=((-2.0)*r00);
IkReal x124=((0.072912)*x88);
IkReal x125=((0.072912)*x83);
IkReal x126=(r02*x61);
IkReal x127=((0.072912)*x86);
IkReal x128=((0.0733536)*x86);
IkReal x129=((0.0733536)*x91);
IkReal x130=((2.08e-6)*x91);
IkReal x131=((2.08e-6)*x86);
IkReal x132=((1.2152)*x88);
IkReal x133=((1.2152)*x83);
IkReal x134=((0.072912)*x85);
IkReal x135=(r02*x71);
IkReal x136=(r01*x59);
IkReal x137=(r01*x61);
IkReal x138=((1.04e-6)*x83);
IkReal x139=((0.6076)*x90);
IkReal x140=((0.6076)*x85);
IkReal x141=((1.04e-6)*x88);
IkReal x142=((0.24)*x41);
IkReal x143=((0.24)*x40);
IkReal x144=((0.24)*x39);
IkReal x145=(r00*x106);
IkReal x146=(r00*x107);
IkReal x147=(r00*x105);
IkReal x148=((0.24)*px*x51);
IkReal x149=((0.24)*px*x50);
IkReal x150=((0.24)*py*x50);
IkReal x151=(r01*x107);
IkReal x152=((0.24)*py*x49);
IkReal x153=(r01*x105);
IkReal x154=(r01*x106);
IkReal x155=((0.48)*pz*x49);
IkReal x156=(r02*x142);
IkReal x157=((0.48)*pz*x51);
IkReal x158=(r02*x143);
IkReal x159=(r02*x144);
IkReal x160=((2.0)*py*x49);
IkReal x161=((2.0)*py*x50);
IkReal x162=(x39*x87);
IkReal x163=(x41*x66);
IkReal x164=(x39*x66);
IkReal x165=(x40*x66);
IkReal x166=((4.0)*px*x50);
IkReal x167=((4.0)*px*x51);
IkReal x168=(x41*x87);
IkReal x169=(x40*x87);
IkReal x170=((0.24)*x115);
IkReal x171=((0.24)*x116);
IkReal x172=((0.48)*py*x50);
IkReal x173=((0.48)*py*x49);
IkReal x174=((0.24)*x122);
IkReal x175=(r00*x142);
IkReal x176=(r00*x144);
IkReal x177=(x50*x89);
IkReal x178=(r00*x143);
IkReal x179=(x51*x89);
IkReal x180=(x41*x82);
IkReal x181=(x40*x82);
IkReal x182=((8.0)*py*x50);
IkReal x183=((8.0)*py*x49);
IkReal x184=(x39*x82);
IkReal x185=(x40*x77);
IkReal x186=(x39*x77);
IkReal x187=((8.0)*pz*x49);
IkReal x188=((8.0)*pz*x51);
IkReal x189=(x41*x77);
IkReal x190=(x48+x46);
IkReal x191=(x53+x52);
IkReal x192=(x57+x56);
IkReal x193=((0.00278560296)+x99);
IkReal x194=((-0.00174145177200811)+x104);
IkReal x195=(x55+x54);
IkReal x196=((0.00278560296)+x98);
IkReal x197=(x58+x61);
IkReal x198=(x59+x60);
IkReal x199=((((-2.496e-7)*x86))+(((2.496e-7)*x91)));
IkReal x200=(x110+x62);
IkReal x201=(x109+x62);
IkReal x202=((((0.0733536)*x90))+(((-1.0)*r00*x69)));
IkReal x203=(x43+x98);
IkReal x204=(x44+x99);
IkReal x205=(x140+x138);
IkReal x206=(x141+x139);
IkReal x207=(x140+x141);
IkReal x208=(x139+x138);
IkReal x209=(x116+x115);
IkReal x210=(x49+x51+x50);
IkReal x211=((-0.00174145177200811)+x108+x57);
IkReal x212=(x100+x101);
IkReal x213=(x100+x102);
IkReal x214=((-0.00174145177200811)+x108+x56);
IkReal x215=(x113+x114+x63);
IkReal x216=(x168+x169);
IkReal x217=(x113+x111+x63);
IkReal x218=(x112+x114+x63);
IkReal x219=(x112+x111+x63);
IkReal x220=(x95+x97+x96);
IkReal x221=(x154+x153+x45);
IkReal x222=(x159+x158+x47);
IkReal x223=(x175+x176+x68);
IkReal x224=(x171+x170+x67);
IkReal x225=(x163+x164+x64);
IkReal x226=(x185+x186+x80);
IkReal x227=(x180+x181+x76);
IkReal x228=(x163+x164+x75);
IkReal x229=(x145+x146+x42);
IkReal x230=(x134+x136+(((-1.0)*x137))+(((-1.0)*x135)));
IkReal x231=(x135+x134+(((-1.0)*x136))+(((-1.0)*x137)));
IkReal x232=(x184+x182+x183);
IkReal x233=(x157+x156+x155);
IkReal x234=(x166+x167+x165);
IkReal x235=(x173+x172+x174);
IkReal x236=(x108+x105+x106+x107);
IkReal x237=(x225+x65);
IkReal x238=(x147+x148+x149);
IkReal x239=(x121+x117+x119+x118);
IkReal x240=(x229+x44);
IkReal x241=(x179+x178+x177);
IkReal x242=(x120+x117+x119+x118);
IkReal x243=(x152+x151+x150);
IkReal x244=(x187+x188+x189);
IkReal x245=(x125+x224);
IkReal x246=(x124+x224);
IkReal x247=(x121+x228);
IkReal x248=(x120+x228);
IkReal x249=(x229+x99);
IkReal x250=(x160+x161+x122+x114);
IkReal x251=(x104+x105+x106+x107+x57);
IkReal x252=(x160+x161+x122+x111);
IkReal x253=(x104+x105+x106+x107+x56);
IkReal x254=(x124+x235);
IkReal x255=(x125+x235);
IkReal x256=(x120+x234);
IkReal x257=(x121+x234);
IkReal x258=(x103+x243);
IkReal x259=(x162+x160+x161+x112);
IkReal x260=(x162+x160+x161+x113);
IkReal x261=((((-1.0)*x126))+x127+x223+(((-1.0)*x241)));
IkReal x262=((((-1.0)*x127))+x126+x223+(((-1.0)*x241)));
IkReal x263=(x102+x258+(((-1.0)*x212))+(((-1.0)*x221)));
IkReal x264=((((-1.0)*x103))+(((-1.0)*x102))+x212+x243+(((-1.0)*x221)));
IkReal x265=(x101+x103+x221+(((-1.0)*x243))+(((-1.0)*x213)));
IkReal x266=((((-1.0)*x101))+x213+x221+(((-1.0)*x258)));
op[0]=r01;
op[1]=x123;
op[2]=x94;
op[3]=0;
op[4]=x77;
op[5]=0;
op[6]=r01;
op[7]=x66;
op[8]=x94;
op[9]=(x196+x220+x238+x44+x43+(((-1.0)*x249)));
op[10]=x263;
op[11]=0;
op[12]=(x190+(((-1.0)*x233))+x222);
op[13]=x230;
op[14]=0;
op[15]=((((-1.0)*x43))+x196+(((-1.0)*x204))+(((-1.0)*x238))+x229+x220);
op[16]=x264;
op[17]=0;
op[18]=x263;
op[19]=(x193+(((-1.0)*x203))+(((-1.0)*x238))+x240+(((-1.0)*x220)));
op[20]=0;
op[21]=x230;
op[22]=((((-1.0)*x48))+x233+x46+(((-1.0)*x222)));
op[23]=0;
op[24]=x264;
op[25]=(x193+x238+x43+(((-1.0)*x98))+(((-1.0)*x240))+(((-1.0)*x220)));
op[26]=0;
op[27]=(x191+x210);
op[28]=0;
op[29]=0;
op[30]=((((-1.0)*x79))+x78);
op[31]=0;
op[32]=0;
op[33]=((((-1.0)*x191))+x210);
op[34]=0;
op[35]=0;
op[36]=((((-1.0)*x195))+x211+(((-1.0)*x253)));
op[37]=((((-1.0)*x109))+x200);
op[38]=((((-1.0)*x192))+x194+(((-1.0)*x236))+x54+(((-1.0)*x55)));
op[39]=((((-1.0)*x197))+x59+(((-1.0)*x60)));
op[40]=x202;
op[41]=(x198+x58+(((-1.0)*x61)));
op[42]=(x195+x214+(((-1.0)*x251)));
op[43]=((((-1.0)*x110))+x201);
op[44]=(x192+x194+(((-1.0)*x236))+x55+(((-1.0)*x54)));
op[45]=((((-1.0)*x111))+x215+x209+(((-1.0)*x259)));
op[46]=((((-1.0)*x121))+x234+x242+x65+(((-1.0)*x225)));
op[47]=(x112+x252+(((-1.0)*x216))+(((-1.0)*x215)));
op[48]=((((-1.0)*x205))+x206);
op[49]=(x226+x81+(((-1.0)*x244)));
op[50]=((((-1.0)*x206))+x205);
op[51]=((((-1.0)*x114))+x219+x209+(((-1.0)*x260)));
op[52]=(x225+x242+(((-1.0)*x65))+(((-1.0)*x257)));
op[53]=(x113+x250+(((-1.0)*x219))+(((-1.0)*x216)));
op[54]=x123;
op[55]=((-4.0)*r01);
op[56]=x66;
op[57]=0;
op[58]=0;
op[59]=0;
op[60]=x123;
op[61]=x82;
op[62]=x66;
op[63]=(x254+(((-1.0)*x245)));
op[64]=x261;
op[65]=0;
op[66]=(x70+x69);
op[67]=x199;
op[68]=0;
op[69]=(x246+(((-1.0)*x255)));
op[70]=x262;
op[71]=0;
op[72]=x261;
op[73]=(x245+(((-1.0)*x254)));
op[74]=0;
op[75]=x199;
op[76]=((((-1.0)*x70))+x69);
op[77]=0;
op[78]=x262;
op[79]=(x255+(((-1.0)*x246)));
op[80]=0;
op[81]=((5.2e-7)*r01);
op[82]=0;
op[83]=0;
op[84]=((0.6076)*r01);
op[85]=0;
op[86]=0;
op[87]=((-5.2e-7)*r01);
op[88]=0;
op[89]=0;
op[90]=((((-1.0)*x71))+(((-1.0)*x109))+x200);
op[91]=((((-1.0)*x74))+(((-1.0)*x128))+x129);
op[92]=((((-1.0)*x71))+x109+(((-1.0)*x200)));
op[93]=((((-1.0)*x72))+(((-1.0)*x73)));
op[94]=0;
op[95]=((((-1.0)*x73))+x72);
op[96]=(x110+(((-1.0)*x201))+x71);
op[97]=((((-1.0)*x74))+(((-1.0)*x129))+x128);
op[98]=((((-1.0)*x110))+x201+x71);
op[99]=(x256+(((-1.0)*x247)));
op[100]=(x132+(((-1.0)*x133))+x232+(((-1.0)*x227)));
op[101]=(x247+(((-1.0)*x256)));
op[102]=(x131+(((-1.0)*x130)));
op[103]=((6.31904e-7)*r01);
op[104]=(x130+(((-1.0)*x131)));
op[105]=(x257+(((-1.0)*x248)));
op[106]=(x132+(((-1.0)*x133))+(((-1.0)*x232))+x227);
op[107]=(x248+(((-1.0)*x257)));
op[108]=x94;
op[109]=x66;
op[110]=r01;
op[111]=0;
op[112]=x77;
op[113]=0;
op[114]=x94;
op[115]=x123;
op[116]=r01;
op[117]=(x193+(((-1.0)*x238))+x220+x240+x43+(((-1.0)*x98)));
op[118]=x265;
op[119]=0;
op[120]=((((-1.0)*x190))+(((-1.0)*x233))+x222);
op[121]=x231;
op[122]=0;
op[123]=(x193+(((-1.0)*x203))+x220+x238+(((-1.0)*x240)));
op[124]=x266;
op[125]=0;
op[126]=x265;
op[127]=((((-1.0)*x43))+x196+x238+x44+(((-1.0)*x249))+(((-1.0)*x220)));
op[128]=0;
op[129]=x231;
op[130]=((((-1.0)*x46))+x233+x48+(((-1.0)*x222)));
op[131]=0;
op[132]=x266;
op[133]=(x196+(((-1.0)*x204))+(((-1.0)*x238))+x229+x43+(((-1.0)*x220)));
op[134]=0;
op[135]=(x210+x53+(((-1.0)*x52)));
op[136]=0;
op[137]=0;
op[138]=((((-1.0)*x78))+(((-1.0)*x79)));
op[139]=0;
op[140]=0;
op[141]=(x210+x52+(((-1.0)*x53)));
op[142]=0;
op[143]=0;
op[144]=((((-1.0)*x192))+x194+(((-1.0)*x236))+x55+(((-1.0)*x54)));
op[145]=(x109+(((-1.0)*x200)));
op[146]=(x195+x211+(((-1.0)*x253)));
op[147]=(x198+x61+(((-1.0)*x58)));
op[148]=x202;
op[149]=(x197+x59+(((-1.0)*x60)));
op[150]=(x192+x194+(((-1.0)*x236))+x54+(((-1.0)*x55)));
op[151]=(x110+(((-1.0)*x201)));
op[152]=((((-1.0)*x195))+x214+(((-1.0)*x251)));
op[153]=(x113+x252+(((-1.0)*x218))+(((-1.0)*x216)));
op[154]=(x239+x237+(((-1.0)*x256)));
op[155]=((((-1.0)*x111))+x218+x209+(((-1.0)*x260)));
op[156]=((((-1.0)*x207))+x208);
op[157]=(x226+(((-1.0)*x244))+(((-1.0)*x81)));
op[158]=((((-1.0)*x208))+x207);
op[159]=(x112+x250+(((-1.0)*x217))+(((-1.0)*x216)));
op[160]=((((-1.0)*x120))+(((-1.0)*x237))+x239+x234);
op[161]=((((-1.0)*x114))+x217+x209+(((-1.0)*x259)));
solvedialyticpoly12qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj1 = zeror[ij0+1], htj2 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj1)||isnan(htj2)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x267=htj0*htj0;
CheckValue<IkReal> x268=IKPowWithIntegerCheck(((1.0)+x267),-1);
if(!x268.valid){
continue;
}
cj0array[numsolutions]=((x268.value)*(((1.0)+(((-1.0)*x267)))));
CheckValue<IkReal> x269=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x269.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x269.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x270=htj1*htj1;
CheckValue<IkReal> x271=IKPowWithIntegerCheck(((1.0)+x270),-1);
if(!x271.valid){
continue;
}
cj1array[numsolutions]=((x271.value)*(((1.0)+(((-1.0)*x270)))));
CheckValue<IkReal> x272=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x272.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x272.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x273=htj2*htj2;
CheckValue<IkReal> x274=IKPowWithIntegerCheck(((1.0)+x273),-1);
if(!x274.valid){
continue;
}
cj2array[numsolutions]=((x274.value)*(((1.0)+(((-1.0)*x273)))));
CheckValue<IkReal> x275=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x275.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x275.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj1 = 1;
_nj2 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij0]-cj2array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij0]-sj2array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij1[1] = 0; _ij2[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

    j2 = j2array[ij0]; cj2 = cj2array[ij0]; sj2 = sj2array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly12qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[24*24]) = {0};
    IkReal IKFAST_ALIGNED16(A[12*12]);
    IkReal IKFAST_ALIGNED16(work[24*24*23]);
    int ipiv[12];
    int info, coeffindex;
    const int worksize=24*24*23;
    const int matrixdim = 12;
    const int matrixdim2 = 24;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 3; ++k) {
            A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 6; ++j) {
            for(int k = 0; k < 9; ++k) {
                IkReal a = matcoeffs[coeffindex+108], b = matcoeffs[coeffindex+54], c = matcoeffs[coeffindex];
                A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 3; ++k) {
                A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[24]);
    IkReal IKFAST_ALIGNED16(wi[24]);
    IkReal IKFAST_ALIGNED16(vr[24*24]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency12(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[3]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[5]/ev[2];
                    rawroots[numroots++] = ev[2]/ev[1];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[9]/ev[6];
                    rawroots[numroots++] = ev[10]/ev[9];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[11]/ev[8];
                    rawroots[numroots++] = ev[11]/ev[10];
                }
            }
        }
    }
}inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x276=((1.0)*sj1);
if( IKabs(((((-1.0)*cj0*r00*x276))+(((-1.0)*r01*sj0*x276))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*x276))+(((-1.0)*r01*sj0*x276))+(((-1.0)*cj1*r02))))+IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r00*x276))+(((-1.0)*r01*sj0*x276))+(((-1.0)*cj1*r02))), (((r00*sj0))+(((-1.0)*cj0*r01))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*r00*sj0))+(IKcos(j3))+((cj0*r01)));
evalcond[1]=(((cj1*r02))+(IKsin(j3))+((cj0*r00*sj1))+((r01*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x277=(sj0*sj1);
IkReal x278=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r01*x277))+((r00*x278)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x278))+((cj1*pz))+((py*x277)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x279=((8.33333333333333)*cj0);
IkReal x280=((8.33333333333333)*sj0);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*cj1*py*x280))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*px*x280))+((py*x279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*cj1*py*x280))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x279))))+IKsqr(((-0.63675)+(((-1.0)*px*x280))+((py*x279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*cj1*py*x280))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x279))), ((-0.63675)+(((-1.0)*px*x280))+((py*x279))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x281=(sj0*sj1);
IkReal x282=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r01*x281))+((r00*x282))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x281))+((px*x282)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x283=((8.33333333333333)*cj0);
IkReal x284=((8.33333333333333)*sj0);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*cj1*py*x284))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x283)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*py*x283))+((px*x284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*cj1*py*x284))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x283))))+IKsqr(((-0.63675)+(((-1.0)*py*x283))+((px*x284))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*cj1*py*x284))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x283))), ((-0.63675)+(((-1.0)*py*x283))+((px*x284))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x285=(r01*sj0);
IkReal x286=(cj0*r00);
IkReal x287=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x287))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x285))+((sj1*x286)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x286))+((cj1*x285)));
evalcond[4]=((((-1.0)*px*x287))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x288=((8.33333333333333)*cj1);
IkReal x289=(py*sj0);
IkReal x290=((8.33333333333333)*sj1);
IkReal x291=(cj0*px);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*x288*x289))+((pz*x290))+(((-1.0)*x288*x291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*x290*x291))+(((-1.0)*x289*x290))+(((-1.0)*pz*x288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*x288*x289))+((pz*x290))+(((-1.0)*x288*x291))))+IKsqr(((-1.90258333333333)+(((-1.0)*x290*x291))+(((-1.0)*x289*x290))+(((-1.0)*pz*x288))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*x288*x289))+((pz*x290))+(((-1.0)*x288*x291))), ((-1.90258333333333)+(((-1.0)*x290*x291))+(((-1.0)*x289*x290))+(((-1.0)*pz*x288))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x292=(cj0*px);
IkReal x293=(py*sj0);
evalcond[0]=((0.22831)+(((0.12)*(IKcos(j4))))+((sj1*x293))+((sj1*x292))+((cj1*pz)));
evalcond[1]=((2.6e-7)+((cj1*x293))+((cj1*x292))+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x294=(r01*sj0);
IkReal x295=(cj0*r00);
IkReal x296=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x296))+((cj0*r01)));
evalcond[2]=(((sj1*x295))+((sj1*x294))+((cj1*r02)));
evalcond[3]=(((cj1*x294))+((cj1*x295))+(((-1.0)*r02*sj1)));
evalcond[4]=(((cj0*py))+(((-1.0)*px*x296)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x297=((8.33333333333333)*cj1);
IkReal x298=(py*sj0);
IkReal x299=((8.33333333333333)*sj1);
IkReal x300=(cj0*px);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*x297*x298))+(((-1.0)*x297*x300))+((pz*x299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((pz*x297))+((x299*x300))+((x298*x299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*x297*x298))+(((-1.0)*x297*x300))+((pz*x299))))+IKsqr(((0.629083333333333)+((pz*x297))+((x299*x300))+((x298*x299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*x297*x298))+(((-1.0)*x297*x300))+((pz*x299))), ((0.629083333333333)+((pz*x297))+((x299*x300))+((x298*x299))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x301=(cj0*px);
IkReal x302=(py*sj0);
evalcond[0]=((0.07549)+((cj1*pz))+(((-0.12)*(IKcos(j4))))+((sj1*x301))+((sj1*x302)));
evalcond[1]=((2.6e-7)+((cj1*x301))+((cj1*x302))+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x303=((8.33333333333333)*cj1);
IkReal x304=(py*sj0);
IkReal x305=(cj0*px);
IkReal x306=((25.0)*sj1);
CheckValue<IkReal> x307=IKPowWithIntegerCheck(cj3,-1);
if(!x307.valid){
continue;
}
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*x303*x305))+(((-1.0)*x303*x304))+(((8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x307.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x305*x306))+(((-1.0)*x304*x306)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*x303*x305))+(((-1.0)*x303*x304))+(((8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x307.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x305*x306))+(((-1.0)*x304*x306))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*x303*x305))+(((-1.0)*x303*x304))+(((8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x307.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x305*x306))+(((-1.0)*x304*x306))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x308=IKcos(j4);
IkReal x309=(cj0*px);
IkReal x310=(py*sj0);
IkReal x311=((0.12)*x308);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x311))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x309))+((cj1*x310))+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1)));
evalcond[2]=((0.1519)+((sj1*x310))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x311))+((sj1*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x312=((8.33333333333333)*cj1);
CheckValue<IkReal> x313=IKPowWithIntegerCheck(sj3,-1);
if(!x313.valid){
continue;
}
if( IKabs(((-2.16666666666667e-6)+(((8.33333333333333)*pz*sj1))+(((-1.0)*py*sj0*x312))+(((-1.0)*cj0*px*x312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x313.value)*(((((-25.0)*px*sj0))+(((-1.91025)*sj3))+(((25.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((8.33333333333333)*pz*sj1))+(((-1.0)*py*sj0*x312))+(((-1.0)*cj0*px*x312))))+IKsqr(((0.333333333333333)*(x313.value)*(((((-25.0)*px*sj0))+(((-1.91025)*sj3))+(((25.0)*cj0*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((8.33333333333333)*pz*sj1))+(((-1.0)*py*sj0*x312))+(((-1.0)*cj0*px*x312))), ((0.333333333333333)*(x313.value)*(((((-25.0)*px*sj0))+(((-1.91025)*sj3))+(((25.0)*cj0*py))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x314=IKcos(j4);
IkReal x315=(cj0*px);
IkReal x316=(py*sj0);
IkReal x317=((0.12)*x314);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x317))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x315))+((cj1*x316))+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1)));
evalcond[2]=((0.1519)+((sj1*x316))+((sj1*x315))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x318=((1.0)*sj1);
if( IKabs(((((-1.0)*cj0*r00*x318))+(((-1.0)*r01*sj0*x318))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*x318))+(((-1.0)*r01*sj0*x318))+(((-1.0)*cj1*r02))))+IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r00*x318))+(((-1.0)*r01*sj0*x318))+(((-1.0)*cj1*r02))), ((((-1.0)*r00*sj0))+((cj0*r01))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*r00*sj0))+(((-1.0)*(IKcos(j3))))+((cj0*r01)));
evalcond[1]=(((cj1*r02))+(IKsin(j3))+((cj0*r00*sj1))+((r01*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x319=(sj0*sj1);
IkReal x320=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r00*x320))+((cj1*r02))+((r01*x319)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x319))+((px*x320)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x321=((8.33333333333333)*cj0);
IkReal x322=((8.33333333333333)*sj0);
if( IKabs(((2.16666666666667e-6)+((cj1*py*x322))+((cj1*px*x321))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*py*x321))+((px*x322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((cj1*py*x322))+((cj1*px*x321))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((-1.0)*py*x321))+((px*x322))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((cj1*py*x322))+((cj1*px*x321))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+(((-1.0)*py*x321))+((px*x322))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x323=(sj0*sj1);
IkReal x324=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r00*x324))+((cj1*r02))+((r01*x323)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x323))+((px*x324)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x325=((8.33333333333333)*cj0);
IkReal x326=((8.33333333333333)*sj0);
if( IKabs(((2.16666666666667e-6)+((cj1*py*x326))+((cj1*px*x325))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*px*x326))+((py*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((cj1*py*x326))+((cj1*px*x325))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((-1.0)*px*x326))+((py*x325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((cj1*py*x326))+((cj1*px*x325))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+(((-1.0)*px*x326))+((py*x325))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x327=(r01*sj0);
IkReal x328=(cj0*r00);
IkReal x329=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x329))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x328))+((sj1*x327)));
evalcond[3]=(((cj1*x327))+((cj1*x328))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x329))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x330=((8.33333333333333)*cj1);
IkReal x331=(py*sj0);
IkReal x332=((8.33333333333333)*sj1);
IkReal x333=(cj0*px);
if( IKabs(((2.16666666666667e-6)+((x330*x333))+((x330*x331))+(((-1.0)*pz*x332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*pz*x330))+(((-1.0)*x331*x332))+(((-1.0)*x332*x333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((x330*x333))+((x330*x331))+(((-1.0)*pz*x332))))+IKsqr(((-1.90258333333333)+(((-1.0)*pz*x330))+(((-1.0)*x331*x332))+(((-1.0)*x332*x333))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((x330*x333))+((x330*x331))+(((-1.0)*pz*x332))), ((-1.90258333333333)+(((-1.0)*pz*x330))+(((-1.0)*x331*x332))+(((-1.0)*x332*x333))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x334=(cj0*px);
IkReal x335=(py*sj0);
evalcond[0]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+((sj1*x334))+((sj1*x335)));
evalcond[1]=((2.6e-7)+((cj1*x335))+((cj1*x334))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x336=(r01*sj0);
IkReal x337=(cj0*r00);
IkReal x338=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x338))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x336))+((sj1*x337)));
evalcond[3]=(((cj1*x337))+((cj1*x336))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x338))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x339=((8.33333333333333)*cj1);
IkReal x340=(py*sj0);
IkReal x341=((8.33333333333333)*sj1);
IkReal x342=(cj0*px);
if( IKabs(((2.16666666666667e-6)+((x339*x340))+((x339*x342))+(((-1.0)*pz*x341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((x341*x342))+((pz*x339))+((x340*x341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((x339*x340))+((x339*x342))+(((-1.0)*pz*x341))))+IKsqr(((0.629083333333333)+((x341*x342))+((pz*x339))+((x340*x341))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((x339*x340))+((x339*x342))+(((-1.0)*pz*x341))), ((0.629083333333333)+((x341*x342))+((pz*x339))+((x340*x341))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x343=(cj0*px);
IkReal x344=(py*sj0);
evalcond[0]=((0.07549)+((cj1*pz))+(((-0.12)*(IKcos(j4))))+((sj1*x344))+((sj1*x343)));
evalcond[1]=((2.6e-7)+((cj1*x343))+((cj1*x344))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x345=((8.33333333333333)*cj1);
IkReal x346=(py*sj0);
IkReal x347=(cj0*px);
IkReal x348=((25.0)*sj1);
CheckValue<IkReal> x349=IKPowWithIntegerCheck(cj3,-1);
if(!x349.valid){
continue;
}
if( IKabs(((2.16666666666667e-6)+((x345*x347))+((x345*x346))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x349.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x347*x348))+(((-1.0)*x346*x348)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((x345*x347))+((x345*x346))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x349.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x347*x348))+(((-1.0)*x346*x348))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((x345*x347))+((x345*x346))+(((-8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x349.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x347*x348))+(((-1.0)*x346*x348))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x350=IKcos(j4);
IkReal x351=(cj0*px);
IkReal x352=(py*sj0);
IkReal x353=((0.12)*x350);
evalcond[0]=(((sj3*x353))+(((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x351))+((cj1*x352))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj3*x353))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x352))+((sj1*x351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x354=((8.33333333333333)*cj1);
CheckValue<IkReal> x355=IKPowWithIntegerCheck(sj3,-1);
if(!x355.valid){
continue;
}
if( IKabs(((2.16666666666667e-6)+((cj0*px*x354))+((py*sj0*x354))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x355.value)*(((((-1.91025)*sj3))+(((-25.0)*cj0*py))+(((25.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((cj0*px*x354))+((py*sj0*x354))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x355.value)*(((((-1.91025)*sj3))+(((-25.0)*cj0*py))+(((25.0)*px*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((cj0*px*x354))+((py*sj0*x354))+(((-8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x355.value)*(((((-1.91025)*sj3))+(((-25.0)*cj0*py))+(((25.0)*px*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x356=IKcos(j4);
IkReal x357=(cj0*px);
IkReal x358=(py*sj0);
IkReal x359=((0.12)*x356);
evalcond[0]=(((sj3*x359))+(((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x357))+((cj1*x358))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj3*x359))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x358))+((sj1*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x360=((1.0)*cj1);
IkReal x361=(r01*sj0);
IkReal x362=((1.0)*sj1);
IkReal x363=(cj0*r00);
if( IKabs(((((-1.0)*x362*x363))+(((-1.0)*x361*x362))+(((-1.0)*r02*x360)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x360*x361))+(((-1.0)*x360*x363))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x362*x363))+(((-1.0)*x361*x362))+(((-1.0)*r02*x360))))+IKsqr(((((-1.0)*x360*x361))+(((-1.0)*x360*x363))+((r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x362*x363))+(((-1.0)*x361*x362))+(((-1.0)*r02*x360))), ((((-1.0)*x360*x361))+(((-1.0)*x360*x363))+((r02*sj1))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x364=(r01*sj0);
IkReal x365=(cj0*r00);
evalcond[0]=(((sj1*x365))+((sj1*x364))+((cj1*r02))+(IKsin(j3)));
evalcond[1]=((((-1.0)*r02*sj1))+(IKcos(j3))+((cj1*x364))+((cj1*x365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x366=(r01*sj0);
IkReal x367=((1.0)*sj1);
IkReal x368=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x366))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+(((-1.0)*r02*x367))+((r00*x368))+((cj1*x366)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x368))+(((-1.0)*pz*x367)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x369=((8.33333333333333)*py);
IkReal x370=((8.33333333333333)*px);
if( IKabs(((((-1.0)*sj0*x370))+((cj0*x369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x370))+(((-1.0)*sj0*sj1*x369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x370))+((cj0*x369))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x370))+(((-1.0)*sj0*sj1*x369))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj0*x370))+((cj0*x369))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x370))+(((-1.0)*sj0*sj1*x369))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x371=(r01*sj0);
IkReal x372=((1.0)*sj1);
IkReal x373=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x371))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((-1.0)+((r00*x373))+(((-1.0)*r02*x372))+((cj1*x371)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x373))+(((-1.0)*pz*x372)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x374=((8.33333333333333)*py);
IkReal x375=((8.33333333333333)*px);
if( IKabs(((((-1.0)*sj0*x375))+((cj0*x374)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((sj0*sj1*x374))+((cj0*sj1*x375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x375))+((cj0*x374))))+IKsqr(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((sj0*sj1*x374))+((cj0*sj1*x375))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj0*x375))+((cj0*x374))), ((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((sj0*sj1*x374))+((cj0*sj1*x375))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.12)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x376=(sj0*sj1);
IkReal x377=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r00*x377))+((r01*x376))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x377))+((py*x376)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x378=((8.33333333333333)*cj0);
IkReal x379=((8.33333333333333)*sj0);
if( IKabs((((py*x378))+(((-1.0)*px*x379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636747833333333)+((cj1*px*x378))+((cj1*py*x379))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x378))+(((-1.0)*px*x379))))+IKsqr(((-0.636747833333333)+((cj1*px*x378))+((cj1*py*x379))+(((-8.33333333333333)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((py*x378))+(((-1.0)*px*x379))), ((-0.636747833333333)+((cj1*px*x378))+((cj1*py*x379))+(((-8.33333333333333)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-0.12)*(IKcos(j4))))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x380=(sj0*sj1);
IkReal x381=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r00*x381))+((r01*x380)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x381))+((cj1*pz))+((py*x380)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x382=((8.33333333333333)*cj0);
IkReal x383=((8.33333333333333)*sj0);
if( IKabs(((((-1.0)*px*x383))+((py*x382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636752166666667)+(((-1.0)*cj1*px*x382))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x383))+((py*x382))))+IKsqr(((-0.636752166666667)+(((-1.0)*cj1*px*x382))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*px*x383))+((py*x382))), ((-0.636752166666667)+(((-1.0)*cj1*px*x382))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x383))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07641026)+(((0.12)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x384=((25.0)*cj1);
CheckValue<IkReal> x385=IKPowWithIntegerCheck(sj3,-1);
if(!x385.valid){
continue;
}
if( IKabs(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x385.value)*(((6.5e-6)+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+((cj0*px*x384))+((py*sj0*x384)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))))+IKsqr(((0.333333333333333)*(x385.value)*(((6.5e-6)+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+((cj0*px*x384))+((py*sj0*x384))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))), ((0.333333333333333)*(x385.value)*(((6.5e-6)+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+((cj0*px*x384))+((py*sj0*x384))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x386=IKcos(j4);
IkReal x387=(cj0*px);
IkReal x388=(py*sj0);
IkReal x389=((0.12)*x386);
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj3*x389))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x388))+((sj1*x387)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+((cj1*x387))+((cj1*x388))+(((-1.0)*pz*sj1))+(((-1.0)*sj3*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x390=((25.0)*sj1);
CheckValue<IkReal> x391=IKPowWithIntegerCheck(cj3,-1);
if(!x391.valid){
continue;
}
if( IKabs(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x391.value)*(((-3.7975)+(((-1.0)*py*sj0*x390))+(((-1.0)*cj0*px*x390))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))))+IKsqr(((0.333333333333333)*(x391.value)*(((-3.7975)+(((-1.0)*py*sj0*x390))+(((-1.0)*cj0*px*x390))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))), ((0.333333333333333)*(x391.value)*(((-3.7975)+(((-1.0)*py*sj0*x390))+(((-1.0)*cj0*px*x390))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x392=IKcos(j4);
IkReal x393=(cj0*px);
IkReal x394=(py*sj0);
IkReal x395=((0.12)*x392);
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((sj1*x393))+((sj1*x394))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x395)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+(((-1.0)*sj3*x395))+(((-1.0)*pz*sj1))+((cj1*x394))+((cj1*x393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x396=((1.0)*r02);
IkReal x397=((1.0)*sj1);
IkReal x398=(cj0*r00);
IkReal x399=(r01*sj0);
if( IKabs(((((-1.0)*cj1*x396))+(((-1.0)*x397*x399))+(((-1.0)*x397*x398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x396))+((cj1*x399))+((cj1*x398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x396))+(((-1.0)*x397*x399))+(((-1.0)*x397*x398))))+IKsqr(((((-1.0)*sj1*x396))+((cj1*x399))+((cj1*x398))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj1*x396))+(((-1.0)*x397*x399))+(((-1.0)*x397*x398))), ((((-1.0)*sj1*x396))+((cj1*x399))+((cj1*x398))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x400=(r01*sj0);
IkReal x401=(cj0*r00);
evalcond[0]=(((sj1*x400))+((sj1*x401))+((cj1*r02))+(IKsin(j3)));
evalcond[1]=((((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j3))))+((cj1*x401))+((cj1*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x402=(r01*sj0);
IkReal x403=((1.0)*sj1);
IkReal x404=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x402))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x403))+((r00*x404))+((cj1*x402)));
evalcond[4]=((2.6e-7)+((px*x404))+((cj1*py*sj0))+(((-1.0)*pz*x403)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x405=((8.33333333333333)*py);
IkReal x406=((8.33333333333333)*px);
if( IKabs((((sj0*x406))+(((-1.0)*cj0*x405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x406))+(((-1.0)*sj0*sj1*x405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x406))+(((-1.0)*cj0*x405))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x406))+(((-1.0)*sj0*sj1*x405))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj0*x406))+(((-1.0)*cj0*x405))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x406))+(((-1.0)*sj0*sj1*x405))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x407=(r01*sj0);
IkReal x408=((1.0)*sj1);
IkReal x409=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x407))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+(((-1.0)*r02*x408))+((r00*x409))+((cj1*x407)));
evalcond[4]=((2.6e-7)+((px*x409))+((cj1*py*sj0))+(((-1.0)*pz*x408)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x410=((8.33333333333333)*py);
IkReal x411=((8.33333333333333)*px);
if( IKabs((((sj0*x411))+(((-1.0)*cj0*x410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((sj0*sj1*x410))+((cj0*sj1*x411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x411))+(((-1.0)*cj0*x410))))+IKsqr(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((sj0*sj1*x410))+((cj0*sj1*x411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj0*x411))+(((-1.0)*cj0*x410))), ((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((sj0*sj1*x410))+((cj0*sj1*x411))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.12)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x412=(sj0*sj1);
IkReal x413=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r01*x412))+((r00*x413)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x412))+((cj1*pz))+((px*x413)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x414=((8.33333333333333)*cj0);
IkReal x415=((8.33333333333333)*sj0);
if( IKabs((((px*x415))+(((-1.0)*py*x414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636752166666667)+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x414))+(((-1.0)*cj1*py*x415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x415))+(((-1.0)*py*x414))))+IKsqr(((-0.636752166666667)+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x414))+(((-1.0)*cj1*py*x415))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x415))+(((-1.0)*py*x414))), ((-0.636752166666667)+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x414))+(((-1.0)*cj1*py*x415))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07641026)+(((0.12)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x416=(sj0*sj1);
IkReal x417=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x416))+((r00*x417)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x416))+((cj1*pz))+((px*x417)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x418=((8.33333333333333)*cj0);
IkReal x419=((8.33333333333333)*sj0);
if( IKabs((((px*x419))+(((-1.0)*py*x418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636747833333333)+((cj1*py*x419))+((cj1*px*x418))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x419))+(((-1.0)*py*x418))))+IKsqr(((-0.636747833333333)+((cj1*py*x419))+((cj1*px*x418))+(((-8.33333333333333)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x419))+(((-1.0)*py*x418))), ((-0.636747833333333)+((cj1*py*x419))+((cj1*px*x418))+(((-8.33333333333333)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-0.12)*(IKcos(j4))))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x420=((25.0)*cj1);
CheckValue<IkReal> x421=IKPowWithIntegerCheck(sj3,-1);
if(!x421.valid){
continue;
}
if( IKabs(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x421.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*cj0*px*x420))+(((-1.0)*py*sj0*x420)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))))+IKsqr(((0.333333333333333)*(x421.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*cj0*px*x420))+(((-1.0)*py*sj0*x420))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))), ((0.333333333333333)*(x421.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*cj0*px*x420))+(((-1.0)*py*sj0*x420))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x422=IKcos(j4);
IkReal x423=(cj0*px);
IkReal x424=(py*sj0);
IkReal x425=((0.12)*x422);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x425))+((sj1*x423))+((sj1*x424)));
evalcond[2]=((2.6e-7)+(((-1.0)*pz*sj1))+((sj3*x425))+(((0.07641)*sj3))+((cj1*x423))+((cj1*x424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x426=((25.0)*sj1);
CheckValue<IkReal> x427=IKPowWithIntegerCheck(cj3,-1);
if(!x427.valid){
continue;
}
if( IKabs(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x427.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*cj0*px*x426))+(((-1.0)*py*sj0*x426)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))))+IKsqr(((0.333333333333333)*(x427.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*cj0*px*x426))+(((-1.0)*py*sj0*x426))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))), ((0.333333333333333)*(x427.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*cj0*px*x426))+(((-1.0)*py*sj0*x426))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x428=IKcos(j4);
IkReal x429=(cj0*px);
IkReal x430=(py*sj0);
IkReal x431=((0.12)*x428);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x431))+((sj1*x429))+((sj1*x430)));
evalcond[2]=((2.6e-7)+((cj1*x430))+((sj3*x431))+(((-1.0)*pz*sj1))+(((0.07641)*sj3))+((cj1*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x432=((1.0)*cj1);
IkReal x433=(r01*sj0);
IkReal x434=((1.0)*sj1);
IkReal x435=(cj0*r00);
CheckValue<IkReal> x436=IKPowWithIntegerCheck(cj2,-1);
if(!x436.valid){
continue;
}
if( IKabs(((((-1.0)*x433*x434))+(((-1.0)*x434*x435))+(((-1.0)*r02*x432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x436.value)*(((((-1.0)*x432*x435))+(((-1.0)*x432*x433))+((r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x433*x434))+(((-1.0)*x434*x435))+(((-1.0)*r02*x432))))+IKsqr(((x436.value)*(((((-1.0)*x432*x435))+(((-1.0)*x432*x433))+((r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x433*x434))+(((-1.0)*x434*x435))+(((-1.0)*r02*x432))), ((x436.value)*(((((-1.0)*x432*x435))+(((-1.0)*x432*x433))+((r02*sj1))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x437=IKcos(j3);
IkReal x438=(r01*sj0);
IkReal x439=(cj0*r00);
evalcond[0]=((((-1.0)*r00*sj0))+((sj2*x437))+((cj0*r01)));
evalcond[1]=(((cj1*r02))+(IKsin(j3))+((sj1*x439))+((sj1*x438)));
evalcond[2]=(((cj1*x439))+((cj1*x438))+(((-1.0)*r02*sj1))+((cj2*x437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x440=(sj0*sj1);
IkReal x441=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r01*x440))+((r00*x441)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x441))+((py*x440))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x442=(cj1*px);
IkReal x443=(cj1*py);
IkReal x444=((8.33333333333333)*sj2);
IkReal x445=((8.33333333333333)*pz*sj1);
IkReal x446=((8.33333333333333)*cj0*cj2);
IkReal x447=((8.33333333333333)*cj2*sj0);
if( IKabs((((py*x446))+(((-1.0)*cj0*x442*x444))+(((-1.0)*sj0*x443*x444))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*px*x447))+((pz*sj1*x444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*px*sj0*x444))+(((-1.0)*cj2*x445))+(((2.16666666666667e-6)*cj2))+((x442*x446))+((x443*x447))+((cj0*py*x444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x446))+(((-1.0)*cj0*x442*x444))+(((-1.0)*sj0*x443*x444))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*px*x447))+((pz*sj1*x444))))+IKsqr(((-0.63675)+(((-1.0)*px*sj0*x444))+(((-1.0)*cj2*x445))+(((2.16666666666667e-6)*cj2))+((x442*x446))+((x443*x447))+((cj0*py*x444))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((py*x446))+(((-1.0)*cj0*x442*x444))+(((-1.0)*sj0*x443*x444))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*px*x447))+((pz*sj1*x444))), ((-0.63675)+(((-1.0)*px*sj0*x444))+(((-1.0)*cj2*x445))+(((2.16666666666667e-6)*cj2))+((x442*x446))+((x443*x447))+((cj0*py*x444))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x448=IKsin(j4);
IkReal x449=IKcos(j4);
IkReal x450=((0.12)*cj2);
IkReal x451=((0.12)*sj2);
evalcond[0]=((((-0.07641)*sj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x449*x451))+(((-1.0)*x448*x450)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-0.07641)*cj2))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+((x448*x451))+(((-1.0)*x449*x450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x452=(sj0*sj1);
IkReal x453=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r00*x453))+((r01*x452)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x453))+((py*x452)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x454=(cj1*px);
IkReal x455=(cj1*py);
IkReal x456=((8.33333333333333)*sj2);
IkReal x457=((8.33333333333333)*pz*sj1);
IkReal x458=((8.33333333333333)*cj0*cj2);
IkReal x459=((8.33333333333333)*cj2*sj0);
if( IKabs((((pz*sj1*x456))+(((-1.0)*cj0*x454*x456))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*sj0*x455*x456))+(((-1.0)*px*x459))+((py*x458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-2.16666666666667e-6)*cj2))+(((-1.0)*x454*x458))+((cj2*x457))+(((-1.0)*x455*x459))+(((-1.0)*cj0*py*x456))+((px*sj0*x456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((pz*sj1*x456))+(((-1.0)*cj0*x454*x456))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*sj0*x455*x456))+(((-1.0)*px*x459))+((py*x458))))+IKsqr(((-0.63675)+(((-2.16666666666667e-6)*cj2))+(((-1.0)*x454*x458))+((cj2*x457))+(((-1.0)*x455*x459))+(((-1.0)*cj0*py*x456))+((px*sj0*x456))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((pz*sj1*x456))+(((-1.0)*cj0*x454*x456))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*sj0*x455*x456))+(((-1.0)*px*x459))+((py*x458))), ((-0.63675)+(((-2.16666666666667e-6)*cj2))+(((-1.0)*x454*x458))+((cj2*x457))+(((-1.0)*x455*x459))+(((-1.0)*cj0*py*x456))+((px*sj0*x456))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x460=IKcos(j4);
IkReal x461=IKsin(j4);
IkReal x462=((0.12)*cj2);
IkReal x463=((0.12)*sj2);
evalcond[0]=(((x460*x463))+(((-1.0)*x461*x462))+(((0.07641)*sj2))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((x461*x463))+((cj1*py*sj0))+(((0.07641)*cj2))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+((x460*x462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x464=(r01*sj0);
IkReal x465=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x464))+((sj1*x465)));
evalcond[3]=(cj3+((cj1*x465))+((cj1*x464))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x466=(r01*sj0);
IkReal x467=((1.0)*sj1);
IkReal x468=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x466))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+((cj1*x466))+(((-1.0)*r02*x467))+((r00*x468)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*x467))+((px*x468)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x469=((8.33333333333333)*py);
IkReal x470=((8.33333333333333)*px);
if( IKabs(((((-1.0)*sj0*x470))+((cj0*x469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*cj0*sj1*x470))+(((-8.33333333333333)*cj1*pz))+(((-1.0)*sj0*sj1*x469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x470))+((cj0*x469))))+IKsqr(((-1.90258333333333)+(((-1.0)*cj0*sj1*x470))+(((-8.33333333333333)*cj1*pz))+(((-1.0)*sj0*sj1*x469))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj0*x470))+((cj0*x469))), ((-1.90258333333333)+(((-1.0)*cj0*sj1*x470))+(((-8.33333333333333)*cj1*pz))+(((-1.0)*sj0*sj1*x469))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x471=(r01*sj0);
IkReal x472=((1.0)*sj1);
IkReal x473=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((cj0*r00*sj1))+((sj1*x471)));
evalcond[3]=((-1.0)+((cj1*x471))+((r00*x473))+(((-1.0)*r02*x472)));
evalcond[4]=((2.6e-7)+(((-1.0)*pz*x472))+((cj1*py*sj0))+((px*x473)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x474=((8.33333333333333)*py);
IkReal x475=((8.33333333333333)*px);
if( IKabs(((((-1.0)*sj0*x475))+((cj0*x474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((cj0*sj1*x475))+((sj0*sj1*x474))+(((8.33333333333333)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x475))+((cj0*x474))))+IKsqr(((0.629083333333333)+((cj0*sj1*x475))+((sj0*sj1*x474))+(((8.33333333333333)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj0*x475))+((cj0*x474))), ((0.629083333333333)+((cj0*sj1*x475))+((sj0*sj1*x474))+(((8.33333333333333)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.12)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x476=(sj0*sj1);
IkReal x477=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r00*x477))+((r01*x476)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x476))+((px*x477)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x478=((8.33333333333333)*cj0);
IkReal x479=((8.33333333333333)*sj0);
if( IKabs(((((-1.0)*px*x479))+((py*x478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636747833333333)+((cj1*px*x478))+((cj1*py*x479))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x479))+((py*x478))))+IKsqr(((-0.636747833333333)+((cj1*px*x478))+((cj1*py*x479))+(((-8.33333333333333)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*px*x479))+((py*x478))), ((-0.636747833333333)+((cj1*px*x478))+((cj1*py*x479))+(((-8.33333333333333)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-0.12)*(IKcos(j4))))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x480=(sj0*sj1);
IkReal x481=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x480))+((r00*x481)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x480))+((px*x481))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x482=((8.33333333333333)*cj0);
IkReal x483=((8.33333333333333)*sj0);
if( IKabs((((py*x482))+(((-1.0)*px*x483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636752166666667)+(((-1.0)*cj1*px*x482))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x482))+(((-1.0)*px*x483))))+IKsqr(((-0.636752166666667)+(((-1.0)*cj1*px*x482))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x483))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((py*x482))+(((-1.0)*px*x483))), ((-0.636752166666667)+(((-1.0)*cj1*px*x482))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x483))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07641026)+(((0.12)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x484=((25.0)*cj1);
CheckValue<IkReal> x485=IKPowWithIntegerCheck(sj3,-1);
if(!x485.valid){
continue;
}
if( IKabs(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x485.value)*(((6.5e-6)+((py*sj0*x484))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+((cj0*px*x484)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))))+IKsqr(((0.333333333333333)*(x485.value)*(((6.5e-6)+((py*sj0*x484))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+((cj0*px*x484))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))), ((0.333333333333333)*(x485.value)*(((6.5e-6)+((py*sj0*x484))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+((cj0*px*x484))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x486=IKcos(j4);
IkReal x487=(cj0*px);
IkReal x488=(py*sj0);
IkReal x489=((0.12)*x486);
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj3*x489))+((sj1*x487))+((sj1*x488))+((cj1*pz))+(((0.07641)*cj3)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+(((-1.0)*sj3*x489))+(((-1.0)*pz*sj1))+((cj1*x488))+((cj1*x487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x490=((25.0)*sj1);
CheckValue<IkReal> x491=IKPowWithIntegerCheck(cj3,-1);
if(!x491.valid){
continue;
}
if( IKabs(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x491.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*py*sj0*x490))+(((-1.0)*cj0*px*x490)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))))+IKsqr(((0.333333333333333)*(x491.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*py*sj0*x490))+(((-1.0)*cj0*px*x490))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))), ((0.333333333333333)*(x491.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*py*sj0*x490))+(((-1.0)*cj0*px*x490))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x492=IKcos(j4);
IkReal x493=(cj0*px);
IkReal x494=(py*sj0);
IkReal x495=((0.12)*x492);
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((sj1*x494))+((sj1*x493))+((cj3*x495)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+(((-1.0)*sj3*x495))+(((-1.0)*pz*sj1))+((cj1*x493))+((cj1*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x496=(r01*sj0);
IkReal x497=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x497))+((sj1*x496)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x496))+((cj1*x497))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x498=(r01*sj0);
IkReal x499=((1.0)*sj1);
IkReal x500=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x498))+((cj0*r00*sj1)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x499))+((r00*x500))+((cj1*x498)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x500))+(((-1.0)*pz*x499)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x501=((8.33333333333333)*py);
IkReal x502=((8.33333333333333)*px);
if( IKabs(((((-1.0)*cj0*x501))+((sj0*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*sj0*sj1*x501))+(((-1.0)*cj0*sj1*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x501))+((sj0*x502))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*sj0*sj1*x501))+(((-1.0)*cj0*sj1*x502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x501))+((sj0*x502))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*sj0*sj1*x501))+(((-1.0)*cj0*sj1*x502))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x503=(r01*sj0);
IkReal x504=((1.0)*sj1);
IkReal x505=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x503))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+((cj1*x503))+((r00*x505))+(((-1.0)*r02*x504)));
evalcond[4]=((2.6e-7)+(((-1.0)*pz*x504))+((cj1*py*sj0))+((px*x505)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x506=((8.33333333333333)*py);
IkReal x507=((8.33333333333333)*px);
if( IKabs(((((-1.0)*cj0*x506))+((sj0*x507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((sj0*sj1*x506))+(((8.33333333333333)*cj1*pz))+((cj0*sj1*x507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x506))+((sj0*x507))))+IKsqr(((0.629083333333333)+((sj0*sj1*x506))+(((8.33333333333333)*cj1*pz))+((cj0*sj1*x507))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x506))+((sj0*x507))), ((0.629083333333333)+((sj0*sj1*x506))+(((8.33333333333333)*cj1*pz))+((cj0*sj1*x507))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.12)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x508=(sj0*sj1);
IkReal x509=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r01*x508))+((r00*x509)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x509))+((py*x508)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x510=((8.33333333333333)*cj0);
IkReal x511=((8.33333333333333)*sj0);
if( IKabs((((px*x511))+(((-1.0)*py*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636752166666667)+(((-1.0)*cj1*px*x510))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x511))+(((-1.0)*py*x510))))+IKsqr(((-0.636752166666667)+(((-1.0)*cj1*px*x510))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x511))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x511))+(((-1.0)*py*x510))), ((-0.636752166666667)+(((-1.0)*cj1*px*x510))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x511))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07641026)+(((0.12)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x512=(sj0*sj1);
IkReal x513=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r01*x512))+((cj1*r02))+((r00*x513)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x513))+((py*x512))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x514=((8.33333333333333)*cj0);
IkReal x515=((8.33333333333333)*sj0);
if( IKabs((((px*x515))+(((-1.0)*py*x514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636747833333333)+((cj1*py*x515))+((cj1*px*x514))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x515))+(((-1.0)*py*x514))))+IKsqr(((-0.636747833333333)+((cj1*py*x515))+((cj1*px*x514))+(((-8.33333333333333)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x515))+(((-1.0)*py*x514))), ((-0.636747833333333)+((cj1*py*x515))+((cj1*px*x514))+(((-8.33333333333333)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-0.12)*(IKcos(j4))))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x516=((25.0)*cj1);
CheckValue<IkReal> x517=IKPowWithIntegerCheck(sj3,-1);
if(!x517.valid){
continue;
}
if( IKabs(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x517.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*py*sj0*x516))+(((-1.0)*cj0*px*x516)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))))+IKsqr(((0.333333333333333)*(x517.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*py*sj0*x516))+(((-1.0)*cj0*px*x516))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))), ((0.333333333333333)*(x517.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*py*sj0*x516))+(((-1.0)*cj0*px*x516))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x518=IKcos(j4);
IkReal x519=(cj0*px);
IkReal x520=(py*sj0);
IkReal x521=((0.12)*x518);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((sj1*x520))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x521))+((sj1*x519)));
evalcond[2]=((2.6e-7)+((sj3*x521))+((cj1*x520))+((cj1*x519))+(((-1.0)*pz*sj1))+(((0.07641)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x522=((25.0)*sj1);
CheckValue<IkReal> x523=IKPowWithIntegerCheck(cj3,-1);
if(!x523.valid){
continue;
}
if( IKabs(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x523.value)*(((-3.7975)+(((-1.0)*cj0*px*x522))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*py*sj0*x522)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))))+IKsqr(((0.333333333333333)*(x523.value)*(((-3.7975)+(((-1.0)*cj0*px*x522))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*py*sj0*x522))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))), ((0.333333333333333)*(x523.value)*(((-3.7975)+(((-1.0)*cj0*px*x522))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*py*sj0*x522))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x524=IKcos(j4);
IkReal x525=(cj0*px);
IkReal x526=(py*sj0);
IkReal x527=((0.12)*x524);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((sj1*x525))+((sj1*x526))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x527)));
evalcond[2]=((2.6e-7)+((sj3*x527))+((cj1*x526))+((cj1*x525))+(((-1.0)*pz*sj1))+(((0.07641)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x528=(r01*sj0);
IkReal x529=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(cj3+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((sj1*x529))+((sj1*x528))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x528))+((cj1*x529)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x530=(sj0*sj1);
IkReal x531=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r01*x530))+((r00*x531)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x531))+((py*x530)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x532=((8.33333333333333)*cj0);
IkReal x533=((8.33333333333333)*sj0);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*cj1*px*x532))+(((-1.0)*cj1*py*x533))+(((8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*px*x533))+((py*x532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*cj1*px*x532))+(((-1.0)*cj1*py*x533))+(((8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((-1.0)*px*x533))+((py*x532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*cj1*px*x532))+(((-1.0)*cj1*py*x533))+(((8.33333333333333)*pz*sj1))), ((-0.63675)+(((-1.0)*px*x533))+((py*x532))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x534=(sj0*sj1);
IkReal x535=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x534))+((r00*x535)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x535))+((py*x534)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x536=((8.33333333333333)*cj0);
IkReal x537=((8.33333333333333)*sj0);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*cj1*px*x536))+(((-1.0)*cj1*py*x537))+(((8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((px*x537))+(((-1.0)*py*x536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*cj1*px*x536))+(((-1.0)*cj1*py*x537))+(((8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+((px*x537))+(((-1.0)*py*x536))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*cj1*px*x536))+(((-1.0)*cj1*py*x537))+(((8.33333333333333)*pz*sj1))), ((-0.63675)+((px*x537))+(((-1.0)*py*x536))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x538=(r01*sj0);
IkReal x539=(cj0*r00);
IkReal x540=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x540))+((cj0*r01)));
evalcond[2]=(((sj1*x538))+((sj1*x539))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x539))+((cj1*x538)));
evalcond[4]=((((-1.0)*px*x540))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x541=((8.33333333333333)*cj1);
IkReal x542=(py*sj0);
IkReal x543=((8.33333333333333)*sj1);
IkReal x544=(cj0*px);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*x541*x542))+(((-1.0)*x541*x544))+((pz*x543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*x542*x543))+(((-1.0)*pz*x541))+(((-1.0)*x543*x544)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*x541*x542))+(((-1.0)*x541*x544))+((pz*x543))))+IKsqr(((-1.90258333333333)+(((-1.0)*x542*x543))+(((-1.0)*pz*x541))+(((-1.0)*x543*x544))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*x541*x542))+(((-1.0)*x541*x544))+((pz*x543))), ((-1.90258333333333)+(((-1.0)*x542*x543))+(((-1.0)*pz*x541))+(((-1.0)*x543*x544))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x545=(cj0*px);
IkReal x546=(py*sj0);
evalcond[0]=((0.22831)+((sj1*x546))+((sj1*x545))+(((0.12)*(IKcos(j4))))+((cj1*pz)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+((cj1*x545))+((cj1*x546))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x547=(r01*sj0);
IkReal x548=(cj0*r00);
IkReal x549=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x549))+((cj0*r01)));
evalcond[2]=(((sj1*x548))+((sj1*x547))+((cj1*r02)));
evalcond[3]=(((cj1*x547))+((cj1*x548))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x549))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x550=((8.33333333333333)*cj1);
IkReal x551=(py*sj0);
IkReal x552=((8.33333333333333)*sj1);
IkReal x553=(cj0*px);
if( IKabs(((-2.16666666666667e-6)+((pz*x552))+(((-1.0)*x550*x553))+(((-1.0)*x550*x551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((pz*x550))+((x551*x552))+((x552*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+((pz*x552))+(((-1.0)*x550*x553))+(((-1.0)*x550*x551))))+IKsqr(((0.629083333333333)+((pz*x550))+((x551*x552))+((x552*x553))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+((pz*x552))+(((-1.0)*x550*x553))+(((-1.0)*x550*x551))), ((0.629083333333333)+((pz*x550))+((x551*x552))+((x552*x553))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x554=(cj0*px);
IkReal x555=(py*sj0);
evalcond[0]=((0.07549)+((sj1*x554))+((sj1*x555))+((cj1*pz))+(((-0.12)*(IKcos(j4)))));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+((cj1*x555))+((cj1*x554))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x556=((8.33333333333333)*cj1);
IkReal x557=(py*sj0);
IkReal x558=(cj0*px);
IkReal x559=((25.0)*sj1);
CheckValue<IkReal> x560=IKPowWithIntegerCheck(cj3,-1);
if(!x560.valid){
continue;
}
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*x556*x557))+(((-1.0)*x556*x558))+(((8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x560.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x558*x559))+(((-1.0)*x557*x559)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*x556*x557))+(((-1.0)*x556*x558))+(((8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x560.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x558*x559))+(((-1.0)*x557*x559))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*x556*x557))+(((-1.0)*x556*x558))+(((8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x560.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x558*x559))+(((-1.0)*x557*x559))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x561=IKcos(j4);
IkReal x562=(cj0*px);
IkReal x563=(py*sj0);
IkReal x564=((0.12)*x561);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x564))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x562))+((cj1*x563))+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1)));
evalcond[2]=((0.1519)+((cj3*x564))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x563))+((sj1*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x565=((8.33333333333333)*cj1);
CheckValue<IkReal> x566=IKPowWithIntegerCheck(sj3,-1);
if(!x566.valid){
continue;
}
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*py*sj0*x565))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj0*px*x565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x566.value)*(((((-25.0)*px*sj0))+(((-1.91025)*sj3))+(((25.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*py*sj0*x565))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj0*px*x565))))+IKsqr(((0.333333333333333)*(x566.value)*(((((-25.0)*px*sj0))+(((-1.91025)*sj3))+(((25.0)*cj0*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*py*sj0*x565))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj0*px*x565))), ((0.333333333333333)*(x566.value)*(((((-25.0)*px*sj0))+(((-1.91025)*sj3))+(((25.0)*cj0*py))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x567=IKcos(j4);
IkReal x568=(cj0*px);
IkReal x569=(py*sj0);
IkReal x570=((0.12)*x567);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x570))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x568))+((cj1*x569))+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1)));
evalcond[2]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x570))+((sj1*x569))+((sj1*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x571=(r01*sj0);
IkReal x572=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+(((-1.0)*cj3))+((cj0*r01)));
evalcond[2]=(((sj1*x572))+((sj1*x571))+sj3+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x571))+((cj1*x572)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x573=(sj0*sj1);
IkReal x574=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r01*x573))+((r00*x574))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x573))+((px*x574))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x575=((8.33333333333333)*cj0);
IkReal x576=((8.33333333333333)*sj0);
if( IKabs(((2.16666666666667e-6)+((cj1*py*x576))+((cj1*px*x575))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((px*x576))+(((-1.0)*py*x575)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((cj1*py*x576))+((cj1*px*x575))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+((px*x576))+(((-1.0)*py*x575))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((cj1*py*x576))+((cj1*px*x575))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+((px*x576))+(((-1.0)*py*x575))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x577=(sj0*sj1);
IkReal x578=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r01*x577))+((r00*x578))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x577))+((px*x578))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x579=((8.33333333333333)*cj0);
IkReal x580=((8.33333333333333)*sj0);
if( IKabs(((2.16666666666667e-6)+((cj1*px*x579))+((cj1*py*x580))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((py*x579))+(((-1.0)*px*x580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((cj1*px*x579))+((cj1*py*x580))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+((py*x579))+(((-1.0)*px*x580))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((cj1*px*x579))+((cj1*py*x580))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+((py*x579))+(((-1.0)*px*x580))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x581=(r01*sj0);
IkReal x582=(cj0*r00);
IkReal x583=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x583))+((cj0*r01)));
evalcond[2]=(((sj1*x582))+((sj1*x581))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x581))+((cj1*x582)));
evalcond[4]=((((-1.0)*px*x583))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x584=((8.33333333333333)*cj1);
IkReal x585=(py*sj0);
IkReal x586=((8.33333333333333)*sj1);
IkReal x587=(cj0*px);
if( IKabs(((2.16666666666667e-6)+((x584*x587))+((x584*x585))+(((-1.0)*pz*x586)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*pz*x584))+(((-1.0)*x586*x587))+(((-1.0)*x585*x586)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((x584*x587))+((x584*x585))+(((-1.0)*pz*x586))))+IKsqr(((-1.90258333333333)+(((-1.0)*pz*x584))+(((-1.0)*x586*x587))+(((-1.0)*x585*x586))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((x584*x587))+((x584*x585))+(((-1.0)*pz*x586))), ((-1.90258333333333)+(((-1.0)*pz*x584))+(((-1.0)*x586*x587))+(((-1.0)*x585*x586))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x588=(cj0*px);
IkReal x589=(py*sj0);
evalcond[0]=((0.22831)+((sj1*x589))+((sj1*x588))+(((0.12)*(IKcos(j4))))+((cj1*pz)));
evalcond[1]=((2.6e-7)+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4))))+((cj1*x588))+((cj1*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x590=(r01*sj0);
IkReal x591=(cj0*r00);
IkReal x592=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x592))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x590))+((sj1*x591)));
evalcond[3]=(((cj1*x591))+((cj1*x590))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x592))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x593=((8.33333333333333)*cj1);
IkReal x594=(py*sj0);
IkReal x595=((8.33333333333333)*sj1);
IkReal x596=(cj0*px);
if( IKabs(((2.16666666666667e-6)+(((-1.0)*pz*x595))+((x593*x596))+((x593*x594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((x594*x595))+((x595*x596))+((pz*x593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+(((-1.0)*pz*x595))+((x593*x596))+((x593*x594))))+IKsqr(((0.629083333333333)+((x594*x595))+((x595*x596))+((pz*x593))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+(((-1.0)*pz*x595))+((x593*x596))+((x593*x594))), ((0.629083333333333)+((x594*x595))+((x595*x596))+((pz*x593))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x597=(cj0*px);
IkReal x598=(py*sj0);
evalcond[0]=((0.07549)+((cj1*pz))+(((-0.12)*(IKcos(j4))))+((sj1*x598))+((sj1*x597)));
evalcond[1]=((2.6e-7)+((cj1*x597))+((cj1*x598))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x599=((8.33333333333333)*cj1);
IkReal x600=(py*sj0);
IkReal x601=(cj0*px);
IkReal x602=((25.0)*sj1);
CheckValue<IkReal> x603=IKPowWithIntegerCheck(cj3,-1);
if(!x603.valid){
continue;
}
if( IKabs(((2.16666666666667e-6)+((x599*x600))+((x599*x601))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x603.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x600*x602))+(((-1.0)*x601*x602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((x599*x600))+((x599*x601))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x603.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x600*x602))+(((-1.0)*x601*x602))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((x599*x600))+((x599*x601))+(((-8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x603.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*x600*x602))+(((-1.0)*x601*x602))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x604=IKcos(j4);
IkReal x605=(cj0*px);
IkReal x606=(py*sj0);
IkReal x607=((0.12)*x604);
evalcond[0]=((((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+((sj3*x607)));
evalcond[1]=((2.6e-7)+((cj1*x606))+((cj1*x605))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((sj1*x605))+((sj1*x606))+((cj3*x607))+((cj1*pz))+(((0.07641)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x608=((8.33333333333333)*cj1);
CheckValue<IkReal> x609=IKPowWithIntegerCheck(sj3,-1);
if(!x609.valid){
continue;
}
if( IKabs(((2.16666666666667e-6)+((cj0*px*x608))+(((-8.33333333333333)*pz*sj1))+((py*sj0*x608)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x609.value)*(((((-1.91025)*sj3))+(((-25.0)*cj0*py))+(((25.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((cj0*px*x608))+(((-8.33333333333333)*pz*sj1))+((py*sj0*x608))))+IKsqr(((0.333333333333333)*(x609.value)*(((((-1.91025)*sj3))+(((-25.0)*cj0*py))+(((25.0)*px*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((cj0*px*x608))+(((-8.33333333333333)*pz*sj1))+((py*sj0*x608))), ((0.333333333333333)*(x609.value)*(((((-1.91025)*sj3))+(((-25.0)*cj0*py))+(((25.0)*px*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x610=IKcos(j4);
IkReal x611=(cj0*px);
IkReal x612=(py*sj0);
IkReal x613=((0.12)*x610);
evalcond[0]=(((sj3*x613))+(((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4))))+((cj1*x611))+((cj1*x612)));
evalcond[2]=((0.1519)+((cj3*x613))+((sj1*x612))+((sj1*x611))+((cj1*pz))+(((0.07641)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x614=(r01*sj0);
IkReal x615=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(sj2+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x615))+((sj1*x614))+((cj1*r02)));
evalcond[3]=(cj2+(((-1.0)*r02*sj1))+((cj1*x614))+((cj1*x615)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x616=((8.33333333333333)*sj1);
IkReal x617=(cj0*px);
IkReal x618=(py*sj0);
IkReal x619=((25.0)*cj1);
CheckValue<IkReal> x620=IKPowWithIntegerCheck(sj2,-1);
if(!x620.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x620.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.0)*x618*x619))+(((-1.0)*x617*x619)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*x616*x618))+(((-1.0)*x616*x617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x620.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.0)*x618*x619))+(((-1.0)*x617*x619))))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*x616*x618))+(((-1.0)*x616*x617))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x620.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.0)*x618*x619))+(((-1.0)*x617*x619))))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*x616*x618))+(((-1.0)*x616*x617))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x621=IKsin(j4);
IkReal x622=(cj0*px);
IkReal x623=(py*sj0);
IkReal x624=((0.12)*x621);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj2*x624)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+((sj1*x622))+((sj1*x623)));
evalcond[2]=((2.6e-7)+((sj2*x624))+(((-1.0)*pz*sj1))+((cj1*x623))+((cj1*x622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x625=((8.33333333333333)*sj1);
CheckValue<IkReal> x626=IKPowWithIntegerCheck(cj2,-1);
if(!x626.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x626.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*px*x625))+(((-1.0)*py*sj0*x625)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x626.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py))))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*px*x625))+(((-1.0)*py*sj0*x625))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x626.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py))))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*px*x625))+(((-1.0)*py*sj0*x625))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x627=IKsin(j4);
IkReal x628=(cj0*px);
IkReal x629=(py*sj0);
IkReal x630=((0.12)*x627);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj2*x630)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+((sj1*x628))+((sj1*x629)));
evalcond[2]=((2.6e-7)+((sj2*x630))+(((-1.0)*pz*sj1))+((cj1*x629))+((cj1*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x631=(r01*sj0);
IkReal x632=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x631))+((sj1*x632)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x632))+((cj1*x631))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x633=((8.33333333333333)*sj1);
IkReal x634=(cj0*px);
IkReal x635=(py*sj0);
IkReal x636=((25.0)*cj1);
CheckValue<IkReal> x637=IKPowWithIntegerCheck(sj2,-1);
if(!x637.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x637.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.0)*x634*x636))+(((-1.0)*x635*x636)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((x633*x634))+((x633*x635)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x637.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.0)*x634*x636))+(((-1.0)*x635*x636))))))+IKsqr(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((x633*x634))+((x633*x635))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x637.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.0)*x634*x636))+(((-1.0)*x635*x636))))), ((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((x633*x634))+((x633*x635))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x638=IKsin(j4);
IkReal x639=(cj0*px);
IkReal x640=(py*sj0);
IkReal x641=((0.12)*x638);
evalcond[0]=((((-1.0)*cj2*x641))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((sj1*x640))+((cj1*pz))+(((-0.12)*(IKcos(j4))))+((sj1*x639)));
evalcond[2]=((2.6e-7)+((cj1*x640))+((sj2*x641))+(((-1.0)*pz*sj1))+((cj1*x639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x642=((8.33333333333333)*sj1);
CheckValue<IkReal> x643=IKPowWithIntegerCheck(cj2,-1);
if(!x643.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x643.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((cj0*px*x642))+((py*sj0*x642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x643.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py))))))+IKsqr(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((cj0*px*x642))+((py*sj0*x642))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x643.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py))))), ((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((cj0*px*x642))+((py*sj0*x642))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x644=IKsin(j4);
IkReal x645=(cj0*px);
IkReal x646=(py*sj0);
IkReal x647=((0.12)*x644);
evalcond[0]=((((-1.0)*cj2*x647))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((sj1*x645))+((sj1*x646))+((cj1*pz))+(((-0.12)*(IKcos(j4)))));
evalcond[2]=((2.6e-7)+((cj1*x645))+((cj1*x646))+((sj2*x647))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x655=IKPowWithIntegerCheck(cj3,-1);
if(!x655.valid){
continue;
}
IkReal x648=x655.value;
IkReal x649=(cj1*cj3);
IkReal x650=(cj2*sj3);
IkReal x651=((0.333333333333333)*x648);
IkReal x652=((25.0)*py*sj0);
IkReal x653=((25.0)*cj0*px);
IkReal x654=((25.0)*cj1*pz);
CheckValue<IkReal> x656=IKPowWithIntegerCheck(sj2,-1);
if(!x656.valid){
continue;
}
if( IKabs((x651*(x656.value)*(((((-6.5e-6)*cj3))+(((-1.0)*sj1*x650*x653))+(((-1.0)*sj1*x650*x652))+(((-3.7975)*x650))+(((25.0)*cj3*pz*sj1))+(((-1.0)*x650*x654))+(((-1.0)*x649*x653))+(((-1.0)*x649*x652)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x651*(((-3.7975)+(((-1.0)*sj1*x653))+(((-1.0)*sj1*x652))+(((-1.91025)*cj3))+(((-1.0)*x654)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x651*(x656.value)*(((((-6.5e-6)*cj3))+(((-1.0)*sj1*x650*x653))+(((-1.0)*sj1*x650*x652))+(((-3.7975)*x650))+(((25.0)*cj3*pz*sj1))+(((-1.0)*x650*x654))+(((-1.0)*x649*x653))+(((-1.0)*x649*x652))))))+IKsqr((x651*(((-3.7975)+(((-1.0)*sj1*x653))+(((-1.0)*sj1*x652))+(((-1.91025)*cj3))+(((-1.0)*x654))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x651*(x656.value)*(((((-6.5e-6)*cj3))+(((-1.0)*sj1*x650*x653))+(((-1.0)*sj1*x650*x652))+(((-3.7975)*x650))+(((25.0)*cj3*pz*sj1))+(((-1.0)*x650*x654))+(((-1.0)*x649*x653))+(((-1.0)*x649*x652))))), (x651*(((-3.7975)+(((-1.0)*sj1*x653))+(((-1.0)*sj1*x652))+(((-1.91025)*cj3))+(((-1.0)*x654))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x657=IKcos(j4);
IkReal x658=IKsin(j4);
IkReal x659=((0.12)*cj2);
IkReal x660=((0.07641)*sj3);
IkReal x661=(cj0*px);
IkReal x662=(py*sj0);
IkReal x663=((0.12)*sj2);
IkReal x664=(sj3*x657);
evalcond[0]=((0.1519)+((sj1*x662))+((sj1*x661))+((cj1*pz))+(((0.07641)*cj3))+(((0.12)*cj3*x657)));
evalcond[1]=((((-1.0)*x663*x664))+(((-1.0)*sj2*x660))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x658*x659)));
evalcond[2]=((2.6e-7)+(((-1.0)*cj2*x660))+(((-1.0)*x659*x664))+(((-1.0)*pz*sj1))+((cj1*x662))+((cj1*x661))+((x658*x663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x672=IKPowWithIntegerCheck(cj3,-1);
if(!x672.valid){
continue;
}
IkReal x665=x672.value;
IkReal x666=((25.0)*cj0);
IkReal x667=((0.333333333333333)*x665);
IkReal x668=(sj2*sj3);
IkReal x669=(sj1*x668);
IkReal x670=((25.0)*cj1*pz);
IkReal x671=((25.0)*py*sj0);
CheckValue<IkReal> x673=IKPowWithIntegerCheck(cj2,-1);
if(!x673.valid){
continue;
}
if( IKabs((x667*(x673.value)*(((((3.7975)*x668))+(((-25.0)*cj3*px*sj0))+((cj3*py*x666))+((x669*x671))+((px*x666*x669))+((x668*x670)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x667*(((-3.7975)+(((-1.0)*px*sj1*x666))+(((-1.91025)*cj3))+(((-1.0)*sj1*x671))+(((-1.0)*x670)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x667*(x673.value)*(((((3.7975)*x668))+(((-25.0)*cj3*px*sj0))+((cj3*py*x666))+((x669*x671))+((px*x666*x669))+((x668*x670))))))+IKsqr((x667*(((-3.7975)+(((-1.0)*px*sj1*x666))+(((-1.91025)*cj3))+(((-1.0)*sj1*x671))+(((-1.0)*x670))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x667*(x673.value)*(((((3.7975)*x668))+(((-25.0)*cj3*px*sj0))+((cj3*py*x666))+((x669*x671))+((px*x666*x669))+((x668*x670))))), (x667*(((-3.7975)+(((-1.0)*px*sj1*x666))+(((-1.91025)*cj3))+(((-1.0)*sj1*x671))+(((-1.0)*x670))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x674=IKcos(j4);
IkReal x675=IKsin(j4);
IkReal x676=((0.12)*cj2);
IkReal x677=((0.07641)*sj3);
IkReal x678=(cj0*px);
IkReal x679=(py*sj0);
IkReal x680=((0.12)*sj2);
IkReal x681=(sj3*x674);
evalcond[0]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((sj1*x679))+((sj1*x678))+(((0.12)*cj3*x674)));
evalcond[1]=((((-1.0)*x675*x676))+(((-1.0)*x680*x681))+(((-1.0)*sj2*x677))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=((2.6e-7)+(((-1.0)*pz*sj1))+((x675*x680))+(((-1.0)*x676*x681))+((cj1*x678))+((cj1*x679))+(((-1.0)*cj2*x677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x682=((8.33333333333333)*sj2);
IkReal x683=(pz*sj1);
IkReal x684=(cj0*py);
IkReal x685=((25.0)*sj2);
IkReal x686=((8.33333333333333)*cj2);
IkReal x687=(px*sj0);
IkReal x688=((25.0)*cj2);
IkReal x689=(cj1*py*sj0);
IkReal x690=(cj0*cj1*px);
CheckValue<IkReal> x691=IKPowWithIntegerCheck(sj3,-1);
if(!x691.valid){
continue;
}
if( IKabs((((x682*x683))+(((-1.0)*x686*x687))+(((-1.0)*x682*x690))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*x682*x689))+((x684*x686)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x691.value)*(((((-1.0)*x685*x687))+((x688*x690))+((x688*x689))+(((-1.91025)*sj3))+(((6.5e-6)*cj2))+(((-1.0)*x683*x688))+((x684*x685)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x682*x683))+(((-1.0)*x686*x687))+(((-1.0)*x682*x690))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*x682*x689))+((x684*x686))))+IKsqr(((0.333333333333333)*(x691.value)*(((((-1.0)*x685*x687))+((x688*x690))+((x688*x689))+(((-1.91025)*sj3))+(((6.5e-6)*cj2))+(((-1.0)*x683*x688))+((x684*x685))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x682*x683))+(((-1.0)*x686*x687))+(((-1.0)*x682*x690))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*x682*x689))+((x684*x686))), ((0.333333333333333)*(x691.value)*(((((-1.0)*x685*x687))+((x688*x690))+((x688*x689))+(((-1.91025)*sj3))+(((6.5e-6)*cj2))+(((-1.0)*x683*x688))+((x684*x685))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x692=IKcos(j4);
IkReal x693=IKsin(j4);
IkReal x694=((0.12)*cj2);
IkReal x695=((0.07641)*sj3);
IkReal x696=(cj0*px);
IkReal x697=(py*sj0);
IkReal x698=((0.12)*sj2);
IkReal x699=(sj3*x692);
evalcond[0]=((0.1519)+(((0.12)*cj3*x692))+((sj1*x697))+((sj1*x696))+((cj1*pz))+(((0.07641)*cj3)));
evalcond[1]=((((-1.0)*sj2*x695))+(((-1.0)*x693*x694))+(((-1.0)*x698*x699))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=((2.6e-7)+((cj1*x696))+((cj1*x697))+((x693*x698))+(((-1.0)*cj2*x695))+(((-1.0)*pz*sj1))+(((-1.0)*x694*x699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x700=((1.0)*cj0);
CheckValue<IkReal> x701=IKPowWithIntegerCheck(sj2,-1);
if(!x701.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj1*x700))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x701.value)*((((r00*sj0))+(((-1.0)*r01*x700)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj1*x700))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))))+IKsqr(((x701.value)*((((r00*sj0))+(((-1.0)*r01*x700))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*sj1*x700))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))), ((x701.value)*((((r00*sj0))+(((-1.0)*r01*x700))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x702=IKcos(j3);
IkReal x703=(r01*sj0);
IkReal x704=(cj0*r00);
evalcond[0]=((((-1.0)*r00*sj0))+((sj2*x702))+((cj0*r01)));
evalcond[1]=(((cj1*r02))+(IKsin(j3))+((sj1*x704))+((sj1*x703)));
evalcond[2]=((((-1.0)*r02*sj1))+((cj2*x702))+((cj1*x703))+((cj1*x704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x705=(sj0*sj1);
IkReal x706=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r01*x705))+((cj1*r02))+((r00*x706)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x706))+((py*x705)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x707=(cj1*px);
IkReal x708=(cj1*py);
IkReal x709=((8.33333333333333)*sj2);
IkReal x710=((8.33333333333333)*pz*sj1);
IkReal x711=((8.33333333333333)*cj0*cj2);
IkReal x712=((8.33333333333333)*cj2*sj0);
if( IKabs(((((-1.0)*cj0*x707*x709))+(((-1.0)*sj0*x708*x709))+((pz*sj1*x709))+(((-1.0)*px*x712))+(((-2.16666666666667e-6)*sj2))+((py*x711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((x707*x711))+((cj0*py*x709))+(((-1.0)*cj2*x710))+(((2.16666666666667e-6)*cj2))+(((-1.0)*px*sj0*x709))+((x708*x712)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x707*x709))+(((-1.0)*sj0*x708*x709))+((pz*sj1*x709))+(((-1.0)*px*x712))+(((-2.16666666666667e-6)*sj2))+((py*x711))))+IKsqr(((-0.63675)+((x707*x711))+((cj0*py*x709))+(((-1.0)*cj2*x710))+(((2.16666666666667e-6)*cj2))+(((-1.0)*px*sj0*x709))+((x708*x712))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x707*x709))+(((-1.0)*sj0*x708*x709))+((pz*sj1*x709))+(((-1.0)*px*x712))+(((-2.16666666666667e-6)*sj2))+((py*x711))), ((-0.63675)+((x707*x711))+((cj0*py*x709))+(((-1.0)*cj2*x710))+(((2.16666666666667e-6)*cj2))+(((-1.0)*px*sj0*x709))+((x708*x712))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x713=IKsin(j4);
IkReal x714=IKcos(j4);
IkReal x715=((0.12)*cj2);
IkReal x716=((0.12)*sj2);
evalcond[0]=((((-1.0)*x714*x716))+(((-0.07641)*sj2))+(((-1.0)*px*sj0))+(((-1.0)*x713*x715))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((-1.0)*x714*x715))+((cj1*py*sj0))+(((-0.07641)*cj2))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+((x713*x716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x717=(sj0*sj1);
IkReal x718=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r01*x717))+((r00*x718))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x718))+((py*x717)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x719=(cj1*px);
IkReal x720=(cj1*py);
IkReal x721=((8.33333333333333)*sj2);
IkReal x722=((8.33333333333333)*pz*sj1);
IkReal x723=((8.33333333333333)*cj0*cj2);
IkReal x724=((8.33333333333333)*cj2*sj0);
if( IKabs(((((-1.0)*sj0*x720*x721))+(((-1.0)*px*x724))+(((-1.0)*cj0*x719*x721))+(((-2.16666666666667e-6)*sj2))+((py*x723))+((pz*sj1*x721)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*cj0*py*x721))+((px*sj0*x721))+(((-2.16666666666667e-6)*cj2))+((cj2*x722))+(((-1.0)*x720*x724))+(((-1.0)*x719*x723)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x720*x721))+(((-1.0)*px*x724))+(((-1.0)*cj0*x719*x721))+(((-2.16666666666667e-6)*sj2))+((py*x723))+((pz*sj1*x721))))+IKsqr(((-0.63675)+(((-1.0)*cj0*py*x721))+((px*sj0*x721))+(((-2.16666666666667e-6)*cj2))+((cj2*x722))+(((-1.0)*x720*x724))+(((-1.0)*x719*x723))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj0*x720*x721))+(((-1.0)*px*x724))+(((-1.0)*cj0*x719*x721))+(((-2.16666666666667e-6)*sj2))+((py*x723))+((pz*sj1*x721))), ((-0.63675)+(((-1.0)*cj0*py*x721))+((px*sj0*x721))+(((-2.16666666666667e-6)*cj2))+((cj2*x722))+(((-1.0)*x720*x724))+(((-1.0)*x719*x723))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x725=IKcos(j4);
IkReal x726=IKsin(j4);
IkReal x727=((0.12)*cj2);
IkReal x728=((0.12)*sj2);
evalcond[0]=(((x725*x728))+(((-1.0)*x726*x727))+(((0.07641)*sj2))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((x726*x728))+((cj1*py*sj0))+(((0.07641)*cj2))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+((x725*x727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x729=(r01*sj0);
IkReal x730=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x730))+((sj1*x729)));
evalcond[3]=(((cj1*x729))+cj3+(((-1.0)*r02*sj1))+((cj1*x730)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x731=(r01*sj0);
IkReal x732=((1.0)*sj1);
IkReal x733=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((cj0*r00*sj1))+((sj1*x731)));
evalcond[3]=((1.0)+(((-1.0)*r02*x732))+((r00*x733))+((cj1*x731)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x733))+(((-1.0)*pz*x732)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x734=((8.33333333333333)*py);
IkReal x735=((8.33333333333333)*px);
if( IKabs(((((-1.0)*sj0*x735))+((cj0*x734)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x735))+(((-1.0)*sj0*sj1*x734)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x735))+((cj0*x734))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x735))+(((-1.0)*sj0*sj1*x734))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj0*x735))+((cj0*x734))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x735))+(((-1.0)*sj0*sj1*x734))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x736=(r01*sj0);
IkReal x737=((1.0)*sj1);
IkReal x738=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((cj0*r00*sj1))+((sj1*x736)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x737))+((r00*x738))+((cj1*x736)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x738))+(((-1.0)*pz*x737)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x739=((8.33333333333333)*py);
IkReal x740=((8.33333333333333)*px);
if( IKabs((((cj0*x739))+(((-1.0)*sj0*x740)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((cj0*sj1*x740))+((sj0*sj1*x739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x739))+(((-1.0)*sj0*x740))))+IKsqr(((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((cj0*sj1*x740))+((sj0*sj1*x739))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*x739))+(((-1.0)*sj0*x740))), ((0.629083333333333)+(((8.33333333333333)*cj1*pz))+((cj0*sj1*x740))+((sj0*sj1*x739))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.12)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x741=(sj0*sj1);
IkReal x742=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r00*x742))+((r01*x741)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x741))+((px*x742))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x743=((8.33333333333333)*cj0);
IkReal x744=((8.33333333333333)*sj0);
if( IKabs((((py*x743))+(((-1.0)*px*x744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636747833333333)+((cj1*py*x744))+((cj1*px*x743))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x743))+(((-1.0)*px*x744))))+IKsqr(((-0.636747833333333)+((cj1*py*x744))+((cj1*px*x743))+(((-8.33333333333333)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((py*x743))+(((-1.0)*px*x744))), ((-0.636747833333333)+((cj1*py*x744))+((cj1*px*x743))+(((-8.33333333333333)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-0.12)*(IKcos(j4))))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x745=(sj0*sj1);
IkReal x746=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r00*x746))+((r01*x745)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((py*x745))+((px*x746))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x747=((8.33333333333333)*cj0);
IkReal x748=((8.33333333333333)*sj0);
if( IKabs((((py*x747))+(((-1.0)*px*x748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636752166666667)+(((-1.0)*cj1*px*x747))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x747))+(((-1.0)*px*x748))))+IKsqr(((-0.636752166666667)+(((-1.0)*cj1*px*x747))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x748))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((py*x747))+(((-1.0)*px*x748))), ((-0.636752166666667)+(((-1.0)*cj1*px*x747))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x748))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07641026)+(((0.12)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x749=((25.0)*cj1);
CheckValue<IkReal> x750=IKPowWithIntegerCheck(sj3,-1);
if(!x750.valid){
continue;
}
if( IKabs(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x750.value)*(((6.5e-6)+((cj0*px*x749))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+((py*sj0*x749)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))))+IKsqr(((0.333333333333333)*(x750.value)*(((6.5e-6)+((cj0*px*x749))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+((py*sj0*x749))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))), ((0.333333333333333)*(x750.value)*(((6.5e-6)+((cj0*px*x749))+(((-25.0)*pz*sj1))+(((-1.91025)*sj3))+((py*sj0*x749))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x751=IKcos(j4);
IkReal x752=(cj0*px);
IkReal x753=(py*sj0);
IkReal x754=((0.12)*x751);
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((sj1*x752))+((sj1*x753))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x754)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+((cj1*x753))+((cj1*x752))+(((-1.0)*sj3*x754))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x755=((25.0)*sj1);
CheckValue<IkReal> x756=IKPowWithIntegerCheck(cj3,-1);
if(!x756.valid){
continue;
}
if( IKabs(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x756.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*cj0*px*x755))+(((-1.0)*py*sj0*x755)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))))+IKsqr(((0.333333333333333)*(x756.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*cj0*px*x755))+(((-1.0)*py*sj0*x755))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*cj0*py))+(((-8.33333333333333)*px*sj0))), ((0.333333333333333)*(x756.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*cj0*px*x755))+(((-1.0)*py*sj0*x755))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x757=IKcos(j4);
IkReal x758=(cj0*px);
IkReal x759=(py*sj0);
IkReal x760=((0.12)*x757);
evalcond[0]=((((-0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((cj3*x760))+((sj1*x758))+((sj1*x759))+((cj1*pz))+(((0.07641)*cj3)));
evalcond[2]=((2.6e-7)+(((-0.07641)*sj3))+((cj1*x759))+((cj1*x758))+(((-1.0)*pz*sj1))+(((-1.0)*sj3*x760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x761=(r01*sj0);
IkReal x762=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((sj1*x762))+((sj1*x761))+((cj1*r02)));
evalcond[3]=(((cj1*x761))+((cj1*x762))+(((-1.0)*r02*sj1))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x763=(r01*sj0);
IkReal x764=((1.0)*sj1);
IkReal x765=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x763))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((-1.0)+((cj1*x763))+(((-1.0)*r02*x764))+((r00*x765)));
evalcond[4]=((2.6e-7)+((px*x765))+((cj1*py*sj0))+(((-1.0)*pz*x764)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x766=((8.33333333333333)*py);
IkReal x767=((8.33333333333333)*px);
if( IKabs((((sj0*x767))+(((-1.0)*cj0*x766)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x767))+(((-1.0)*sj0*sj1*x766)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x767))+(((-1.0)*cj0*x766))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x767))+(((-1.0)*sj0*sj1*x766))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj0*x767))+(((-1.0)*cj0*x766))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*cj0*sj1*x767))+(((-1.0)*sj0*sj1*x766))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+(((0.12)*(IKcos(j4))))+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x768=(r01*sj0);
IkReal x769=((1.0)*sj1);
IkReal x770=(cj0*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x768))+((cj1*r02))+((cj0*r00*sj1)));
evalcond[3]=((1.0)+((cj1*x768))+((r00*x770))+(((-1.0)*r02*x769)));
evalcond[4]=((2.6e-7)+((cj1*py*sj0))+((px*x770))+(((-1.0)*pz*x769)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x771=((8.33333333333333)*py);
IkReal x772=((8.33333333333333)*px);
if( IKabs(((((-1.0)*cj0*x771))+((sj0*x772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((sj0*sj1*x771))+(((8.33333333333333)*cj1*pz))+((cj0*sj1*x772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x771))+((sj0*x772))))+IKsqr(((0.629083333333333)+((sj0*sj1*x771))+(((8.33333333333333)*cj1*pz))+((cj0*sj1*x772))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x771))+((sj0*x772))), ((0.629083333333333)+((sj0*sj1*x771))+(((8.33333333333333)*cj1*pz))+((cj0*sj1*x772))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07549)+((cj1*pz))+((cj0*px*sj1))+(((-0.12)*(IKcos(j4))))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x773=(sj0*sj1);
IkReal x774=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r01*x773))+((r00*x774)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x774))+((py*x773)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x775=((8.33333333333333)*cj0);
IkReal x776=((8.33333333333333)*sj0);
if( IKabs((((px*x776))+(((-1.0)*py*x775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636752166666667)+(((-1.0)*cj1*px*x775))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x776))+(((-1.0)*py*x775))))+IKsqr(((-0.636752166666667)+(((-1.0)*cj1*px*x775))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x776))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x776))+(((-1.0)*py*x775))), ((-0.636752166666667)+(((-1.0)*cj1*px*x775))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x776))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.07641026)+(((0.12)*(IKcos(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x777=(sj0*sj1);
IkReal x778=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x777))+((r00*x778)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((px*x778))+((py*x777)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x779=((8.33333333333333)*cj0);
IkReal x780=((8.33333333333333)*sj0);
if( IKabs((((px*x780))+(((-1.0)*py*x779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.636747833333333)+((cj1*px*x779))+((cj1*py*x780))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x780))+(((-1.0)*py*x779))))+IKsqr(((-0.636747833333333)+((cj1*px*x779))+((cj1*py*x780))+(((-8.33333333333333)*pz*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((px*x780))+(((-1.0)*py*x779))), ((-0.636747833333333)+((cj1*px*x779))+((cj1*py*x780))+(((-8.33333333333333)*pz*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.07640974)+((cj1*py*sj0))+(((-0.12)*(IKcos(j4))))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x781=((25.0)*cj1);
CheckValue<IkReal> x782=IKPowWithIntegerCheck(sj3,-1);
if(!x782.valid){
continue;
}
if( IKabs(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x782.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*py*sj0*x781))+(((-1.0)*cj0*px*x781)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))))+IKsqr(((0.333333333333333)*(x782.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*py*sj0*x781))+(((-1.0)*cj0*px*x781))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))), ((0.333333333333333)*(x782.value)*(((-6.5e-6)+(((25.0)*pz*sj1))+(((-1.91025)*sj3))+(((-1.0)*py*sj0*x781))+(((-1.0)*cj0*px*x781))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x783=IKcos(j4);
IkReal x784=(cj0*px);
IkReal x785=(py*sj0);
IkReal x786=((0.12)*x783);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((sj1*x784))+((sj1*x785))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x786)));
evalcond[2]=((2.6e-7)+((cj1*x785))+((cj1*x784))+(((-1.0)*pz*sj1))+(((0.07641)*sj3))+((sj3*x786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x787=((25.0)*sj1);
CheckValue<IkReal> x788=IKPowWithIntegerCheck(cj3,-1);
if(!x788.valid){
continue;
}
if( IKabs(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x788.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*py*sj0*x787))+(((-1.0)*cj0*px*x787)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))))+IKsqr(((0.333333333333333)*(x788.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*py*sj0*x787))+(((-1.0)*cj0*px*x787))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((8.33333333333333)*px*sj0))+(((-8.33333333333333)*cj0*py))), ((0.333333333333333)*(x788.value)*(((-3.7975)+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))+(((-1.0)*py*sj0*x787))+(((-1.0)*cj0*px*x787))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x789=IKcos(j4);
IkReal x790=(cj0*px);
IkReal x791=(py*sj0);
IkReal x792=((0.12)*x789);
evalcond[0]=((((0.12)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.1519)+((sj1*x790))+((sj1*x791))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x792)));
evalcond[2]=((2.6e-7)+((cj1*x791))+((cj1*x790))+(((-1.0)*pz*sj1))+(((0.07641)*sj3))+((sj3*x792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x793=(r01*sj0);
IkReal x794=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(cj3+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(sj3+((sj1*x794))+((sj1*x793))+((cj1*r02)));
evalcond[3]=(((cj1*x794))+((cj1*x793))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x795=(sj0*sj1);
IkReal x796=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((r00*x796))+((r01*x795))+((cj1*r02)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((px*x796))+((cj1*pz))+((py*x795)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x797=((8.33333333333333)*cj0);
IkReal x798=((8.33333333333333)*sj0);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*cj1*py*x798))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*px*x798))+((py*x797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*cj1*py*x798))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x797))))+IKsqr(((-0.63675)+(((-1.0)*px*x798))+((py*x797))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*cj1*py*x798))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*px*x797))), ((-0.63675)+(((-1.0)*px*x798))+((py*x797))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x799=(sj0*sj1);
IkReal x800=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((r01*x799))+((cj1*r02))+((r00*x800)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x799))+((px*x800)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x801=((8.33333333333333)*cj0);
IkReal x802=((8.33333333333333)*sj0);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*cj1*px*x801))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+((px*x802))+(((-1.0)*py*x801)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*cj1*px*x801))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x802))))+IKsqr(((-0.63675)+((px*x802))+(((-1.0)*py*x801))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*cj1*px*x801))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj1*py*x802))), ((-0.63675)+((px*x802))+(((-1.0)*py*x801))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x803=(r01*sj0);
IkReal x804=(cj0*r00);
IkReal x805=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x805))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x803))+((sj1*x804)));
evalcond[3]=(((cj1*x803))+((cj1*x804))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x805))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x806=((8.33333333333333)*cj1);
IkReal x807=(py*sj0);
IkReal x808=((8.33333333333333)*sj1);
IkReal x809=(cj0*px);
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*x806*x809))+(((-1.0)*x806*x807))+((pz*x808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*x807*x808))+(((-1.0)*x808*x809))+(((-1.0)*pz*x806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*x806*x809))+(((-1.0)*x806*x807))+((pz*x808))))+IKsqr(((-1.90258333333333)+(((-1.0)*x807*x808))+(((-1.0)*x808*x809))+(((-1.0)*pz*x806))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*x806*x809))+(((-1.0)*x806*x807))+((pz*x808))), ((-1.90258333333333)+(((-1.0)*x807*x808))+(((-1.0)*x808*x809))+(((-1.0)*pz*x806))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x810=(cj0*px);
IkReal x811=(py*sj0);
evalcond[0]=((0.22831)+((sj1*x811))+((sj1*x810))+(((0.12)*(IKcos(j4))))+((cj1*pz)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1))+((cj1*x810))+((cj1*x811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x812=(r01*sj0);
IkReal x813=(cj0*r00);
IkReal x814=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x814))+((cj0*r01)));
evalcond[2]=(((sj1*x813))+((sj1*x812))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x813))+((cj1*x812)));
evalcond[4]=((((-1.0)*px*x814))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x815=((8.33333333333333)*cj1);
IkReal x816=(py*sj0);
IkReal x817=((8.33333333333333)*sj1);
IkReal x818=(cj0*px);
if( IKabs(((-2.16666666666667e-6)+((pz*x817))+(((-1.0)*x815*x816))+(((-1.0)*x815*x818)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((pz*x815))+((x816*x817))+((x817*x818)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+((pz*x817))+(((-1.0)*x815*x816))+(((-1.0)*x815*x818))))+IKsqr(((0.629083333333333)+((pz*x815))+((x816*x817))+((x817*x818))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+((pz*x817))+(((-1.0)*x815*x816))+(((-1.0)*x815*x818))), ((0.629083333333333)+((pz*x815))+((x816*x817))+((x817*x818))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x819=(cj0*px);
IkReal x820=(py*sj0);
evalcond[0]=((0.07549)+((sj1*x819))+((sj1*x820))+((cj1*pz))+(((-0.12)*(IKcos(j4)))));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1))+((cj1*x819))+((cj1*x820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x821=((8.33333333333333)*cj1);
IkReal x822=(py*sj0);
IkReal x823=(cj0*px);
IkReal x824=((25.0)*sj1);
CheckValue<IkReal> x825=IKPowWithIntegerCheck(cj3,-1);
if(!x825.valid){
continue;
}
if( IKabs(((-2.16666666666667e-6)+(((8.33333333333333)*pz*sj1))+(((-1.0)*x821*x823))+(((-1.0)*x821*x822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x825.value)*(((-3.7975)+(((-1.0)*x822*x824))+(((-1.0)*x823*x824))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((8.33333333333333)*pz*sj1))+(((-1.0)*x821*x823))+(((-1.0)*x821*x822))))+IKsqr(((0.333333333333333)*(x825.value)*(((-3.7975)+(((-1.0)*x822*x824))+(((-1.0)*x823*x824))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((8.33333333333333)*pz*sj1))+(((-1.0)*x821*x823))+(((-1.0)*x821*x822))), ((0.333333333333333)*(x825.value)*(((-3.7975)+(((-1.0)*x822*x824))+(((-1.0)*x823*x824))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x826=IKcos(j4);
IkReal x827=(cj0*px);
IkReal x828=(py*sj0);
IkReal x829=((0.12)*x826);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*sj3*x829))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1))+((cj1*x828))+((cj1*x827)));
evalcond[2]=((0.1519)+((sj1*x827))+((sj1*x828))+((cj1*pz))+(((0.07641)*cj3))+((cj3*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x830=((8.33333333333333)*cj1);
CheckValue<IkReal> x831=IKPowWithIntegerCheck(sj3,-1);
if(!x831.valid){
continue;
}
if( IKabs(((-2.16666666666667e-6)+(((-1.0)*py*sj0*x830))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj0*px*x830)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x831.value)*(((((-25.0)*px*sj0))+(((-1.91025)*sj3))+(((25.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.16666666666667e-6)+(((-1.0)*py*sj0*x830))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj0*px*x830))))+IKsqr(((0.333333333333333)*(x831.value)*(((((-25.0)*px*sj0))+(((-1.91025)*sj3))+(((25.0)*cj0*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.16666666666667e-6)+(((-1.0)*py*sj0*x830))+(((8.33333333333333)*pz*sj1))+(((-1.0)*cj0*px*x830))), ((0.333333333333333)*(x831.value)*(((((-25.0)*px*sj0))+(((-1.91025)*sj3))+(((25.0)*cj0*py))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x832=IKcos(j4);
IkReal x833=(cj0*px);
IkReal x834=(py*sj0);
IkReal x835=((0.12)*x832);
evalcond[0]=((((-0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*sj3*x835)));
evalcond[1]=((2.6e-7)+(((0.12)*(IKsin(j4))))+(((-1.0)*pz*sj1))+((cj1*x834))+((cj1*x833)));
evalcond[2]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((cj3*x835))+((sj1*x833))+((sj1*x834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x836=(r01*sj0);
IkReal x837=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+(((-1.0)*cj3))+((cj0*r01)));
evalcond[2]=(sj3+((cj1*r02))+((sj1*x837))+((sj1*x836)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x836))+((cj1*x837)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x838=(sj0*sj1);
IkReal x839=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((1.0)+((cj1*r02))+((r00*x839))+((r01*x838)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x838))+((px*x839)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x840=((8.33333333333333)*cj0);
IkReal x841=((8.33333333333333)*sj0);
if( IKabs(((2.16666666666667e-6)+((cj1*px*x840))+((cj1*py*x841))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*py*x840))+((px*x841)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((cj1*px*x840))+((cj1*py*x841))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((-1.0)*py*x840))+((px*x841))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((cj1*px*x840))+((cj1*py*x841))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+(((-1.0)*py*x840))+((px*x841))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((0.07641)+(((0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x842=(sj0*sj1);
IkReal x843=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((-1.0)+((cj1*r02))+((r01*x842))+((r00*x843)));
evalcond[3]=(((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)));
evalcond[4]=((0.1519)+((cj1*pz))+((py*x842))+((px*x843)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x844=((8.33333333333333)*cj0);
IkReal x845=((8.33333333333333)*sj0);
if( IKabs(((2.16666666666667e-6)+((cj1*px*x844))+((cj1*py*x845))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.63675)+(((-1.0)*px*x845))+((py*x844)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((cj1*px*x844))+((cj1*py*x845))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((-0.63675)+(((-1.0)*px*x845))+((py*x844))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((cj1*px*x844))+((cj1*py*x845))+(((-8.33333333333333)*pz*sj1))), ((-0.63675)+(((-1.0)*px*x845))+((py*x844))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-0.07641)+(((-0.12)*(IKcos(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*py*sj0))+(((-1.0)*pz*sj1))+((cj0*cj1*px))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x846=(r01*sj0);
IkReal x847=(cj0*r00);
IkReal x848=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x848))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x846))+((sj1*x847)));
evalcond[3]=(((cj1*x847))+((cj1*x846))+(((-1.0)*r02*sj1)));
evalcond[4]=((((-1.0)*px*x848))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x849=((8.33333333333333)*cj1);
IkReal x850=(py*sj0);
IkReal x851=((8.33333333333333)*sj1);
IkReal x852=(cj0*px);
if( IKabs(((2.16666666666667e-6)+(((-1.0)*pz*x851))+((x849*x850))+((x849*x852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-1.0)*pz*x849))+(((-1.0)*x850*x851))+(((-1.0)*x851*x852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+(((-1.0)*pz*x851))+((x849*x850))+((x849*x852))))+IKsqr(((-1.90258333333333)+(((-1.0)*pz*x849))+(((-1.0)*x850*x851))+(((-1.0)*x851*x852))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+(((-1.0)*pz*x851))+((x849*x850))+((x849*x852))), ((-1.90258333333333)+(((-1.0)*pz*x849))+(((-1.0)*x850*x851))+(((-1.0)*x851*x852))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x853=(cj0*px);
IkReal x854=(py*sj0);
evalcond[0]=((0.22831)+(((0.12)*(IKcos(j4))))+((sj1*x854))+((sj1*x853))+((cj1*pz)));
evalcond[1]=((2.6e-7)+((cj1*x853))+((cj1*x854))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x855=(r01*sj0);
IkReal x856=(cj0*r00);
IkReal x857=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x857))+((cj0*r01)));
evalcond[2]=(((cj1*r02))+((sj1*x855))+((sj1*x856)));
evalcond[3]=(((cj1*x855))+((cj1*x856))+(((-1.0)*r02*sj1)));
evalcond[4]=(((cj0*py))+(((-1.0)*px*x857)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x858=((8.33333333333333)*cj1);
IkReal x859=(py*sj0);
IkReal x860=((8.33333333333333)*sj1);
IkReal x861=(cj0*px);
if( IKabs(((2.16666666666667e-6)+(((-1.0)*pz*x860))+((x858*x859))+((x858*x861)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((x859*x860))+((x860*x861))+((pz*x858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+(((-1.0)*pz*x860))+((x858*x859))+((x858*x861))))+IKsqr(((0.629083333333333)+((x859*x860))+((x860*x861))+((pz*x858))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+(((-1.0)*pz*x860))+((x858*x859))+((x858*x861))), ((0.629083333333333)+((x859*x860))+((x860*x861))+((pz*x858))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x862=(cj0*px);
IkReal x863=(py*sj0);
evalcond[0]=((0.07549)+((cj1*pz))+((sj1*x862))+((sj1*x863))+(((-0.12)*(IKcos(j4)))));
evalcond[1]=((2.6e-7)+((cj1*x863))+((cj1*x862))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x864=((8.33333333333333)*cj1);
IkReal x865=(py*sj0);
IkReal x866=(cj0*px);
IkReal x867=((25.0)*sj1);
CheckValue<IkReal> x868=IKPowWithIntegerCheck(cj3,-1);
if(!x868.valid){
continue;
}
if( IKabs(((2.16666666666667e-6)+(((-8.33333333333333)*pz*sj1))+((x864*x866))+((x864*x865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x868.value)*(((-3.7975)+(((-1.0)*x865*x867))+(((-1.0)*x866*x867))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+(((-8.33333333333333)*pz*sj1))+((x864*x866))+((x864*x865))))+IKsqr(((0.333333333333333)*(x868.value)*(((-3.7975)+(((-1.0)*x865*x867))+(((-1.0)*x866*x867))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+(((-8.33333333333333)*pz*sj1))+((x864*x866))+((x864*x865))), ((0.333333333333333)*(x868.value)*(((-3.7975)+(((-1.0)*x865*x867))+(((-1.0)*x866*x867))+(((-1.91025)*cj3))+(((-25.0)*cj1*pz))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x869=IKcos(j4);
IkReal x870=(cj0*px);
IkReal x871=(py*sj0);
IkReal x872=((0.12)*x869);
evalcond[0]=(((sj3*x872))+(((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x870))+((cj1*x871))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj3*x872))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x871))+((sj1*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x873=((8.33333333333333)*cj1);
CheckValue<IkReal> x874=IKPowWithIntegerCheck(sj3,-1);
if(!x874.valid){
continue;
}
if( IKabs(((2.16666666666667e-6)+((cj0*px*x873))+((py*sj0*x873))+(((-8.33333333333333)*pz*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x874.value)*(((((-1.91025)*sj3))+(((-25.0)*cj0*py))+(((25.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.16666666666667e-6)+((cj0*px*x873))+((py*sj0*x873))+(((-8.33333333333333)*pz*sj1))))+IKsqr(((0.333333333333333)*(x874.value)*(((((-1.91025)*sj3))+(((-25.0)*cj0*py))+(((25.0)*px*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.16666666666667e-6)+((cj0*px*x873))+((py*sj0*x873))+(((-8.33333333333333)*pz*sj1))), ((0.333333333333333)*(x874.value)*(((((-1.91025)*sj3))+(((-25.0)*cj0*py))+(((25.0)*px*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x875=IKcos(j4);
IkReal x876=(cj0*px);
IkReal x877=(py*sj0);
IkReal x878=((0.12)*x875);
evalcond[0]=(((sj3*x878))+(((0.07641)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((2.6e-7)+((cj1*x876))+((cj1*x877))+(((-1.0)*pz*sj1))+(((-0.12)*(IKsin(j4)))));
evalcond[2]=((0.1519)+((cj3*x878))+((cj1*pz))+(((0.07641)*cj3))+((sj1*x877))+((sj1*x876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x879=(r01*sj0);
IkReal x880=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(sj2+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x880))+((cj1*r02))+((sj1*x879)));
evalcond[3]=(cj2+(((-1.0)*r02*sj1))+((cj1*x879))+((cj1*x880)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x881=((8.33333333333333)*sj1);
IkReal x882=(cj0*px);
IkReal x883=(py*sj0);
IkReal x884=((25.0)*cj1);
CheckValue<IkReal> x885=IKPowWithIntegerCheck(sj2,-1);
if(!x885.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x885.value)*(((-6.5e-6)+(((-1.0)*x883*x884))+(((-1.0)*x882*x884))+(((25.0)*pz*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*x881*x883))+(((-1.0)*x881*x882)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x885.value)*(((-6.5e-6)+(((-1.0)*x883*x884))+(((-1.0)*x882*x884))+(((25.0)*pz*sj1))))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*x881*x883))+(((-1.0)*x881*x882))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x885.value)*(((-6.5e-6)+(((-1.0)*x883*x884))+(((-1.0)*x882*x884))+(((25.0)*pz*sj1))))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*x881*x883))+(((-1.0)*x881*x882))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x886=IKsin(j4);
IkReal x887=(cj0*px);
IkReal x888=(py*sj0);
IkReal x889=((0.12)*x886);
evalcond[0]=((((-1.0)*cj2*x889))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+((sj1*x888))+((sj1*x887))+(((0.12)*(IKcos(j4))))+((cj1*pz)));
evalcond[2]=((2.6e-7)+((sj2*x889))+(((-1.0)*pz*sj1))+((cj1*x887))+((cj1*x888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x890=((8.33333333333333)*sj1);
CheckValue<IkReal> x891=IKPowWithIntegerCheck(cj2,-1);
if(!x891.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x891.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*py*sj0*x890))+(((-1.0)*cj0*px*x890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x891.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py))))))+IKsqr(((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*py*sj0*x890))+(((-1.0)*cj0*px*x890))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x891.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py))))), ((-1.90258333333333)+(((-8.33333333333333)*cj1*pz))+(((-1.0)*py*sj0*x890))+(((-1.0)*cj0*px*x890))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x892=IKsin(j4);
IkReal x893=(cj0*px);
IkReal x894=(py*sj0);
IkReal x895=((0.12)*x892);
evalcond[0]=((((-1.0)*cj2*x895))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.22831)+((sj1*x893))+((sj1*x894))+(((0.12)*(IKcos(j4))))+((cj1*pz)));
evalcond[2]=((2.6e-7)+((sj2*x895))+(((-1.0)*pz*sj1))+((cj1*x894))+((cj1*x893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x896=(r01*sj0);
IkReal x897=(cj0*r00);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((sj1*x897))+((sj1*x896))+((cj1*r02)));
evalcond[3]=((((-1.0)*r02*sj1))+((cj1*x897))+((cj1*x896))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x898=((8.33333333333333)*sj1);
IkReal x899=(cj0*px);
IkReal x900=(py*sj0);
IkReal x901=((25.0)*cj1);
CheckValue<IkReal> x902=IKPowWithIntegerCheck(sj2,-1);
if(!x902.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x902.value)*(((-6.5e-6)+(((-1.0)*x900*x901))+(((25.0)*pz*sj1))+(((-1.0)*x899*x901)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((x898*x899))+(((8.33333333333333)*cj1*pz))+((x898*x900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x902.value)*(((-6.5e-6)+(((-1.0)*x900*x901))+(((25.0)*pz*sj1))+(((-1.0)*x899*x901))))))+IKsqr(((0.629083333333333)+((x898*x899))+(((8.33333333333333)*cj1*pz))+((x898*x900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x902.value)*(((-6.5e-6)+(((-1.0)*x900*x901))+(((25.0)*pz*sj1))+(((-1.0)*x899*x901))))), ((0.629083333333333)+((x898*x899))+(((8.33333333333333)*cj1*pz))+((x898*x900))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x903=IKsin(j4);
IkReal x904=(cj0*px);
IkReal x905=(py*sj0);
IkReal x906=((0.12)*x903);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj2*x906)));
evalcond[1]=((0.07549)+((cj1*pz))+(((-0.12)*(IKcos(j4))))+((sj1*x905))+((sj1*x904)));
evalcond[2]=((2.6e-7)+((cj1*x904))+((cj1*x905))+((sj2*x906))+(((-1.0)*pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x907=((8.33333333333333)*sj1);
CheckValue<IkReal> x908=IKPowWithIntegerCheck(cj2,-1);
if(!x908.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x908.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.629083333333333)+((cj0*px*x907))+((py*sj0*x907))+(((8.33333333333333)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x908.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py))))))+IKsqr(((0.629083333333333)+((cj0*px*x907))+((py*sj0*x907))+(((8.33333333333333)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.333333333333333)*(x908.value)*(((((-25.0)*px*sj0))+(((25.0)*cj0*py))))), ((0.629083333333333)+((cj0*px*x907))+((py*sj0*x907))+(((8.33333333333333)*cj1*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x909=IKsin(j4);
IkReal x910=(cj0*px);
IkReal x911=(py*sj0);
IkReal x912=((0.12)*x909);
evalcond[0]=((((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj2*x912)));
evalcond[1]=((0.07549)+((cj1*pz))+(((-0.12)*(IKcos(j4))))+((sj1*x910))+((sj1*x911)));
evalcond[2]=((2.6e-7)+((sj2*x912))+(((-1.0)*pz*sj1))+((cj1*x910))+((cj1*x911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x920=IKPowWithIntegerCheck(cj3,-1);
if(!x920.valid){
continue;
}
IkReal x913=x920.value;
IkReal x914=(cj1*cj3);
IkReal x915=(cj2*sj3);
IkReal x916=((0.333333333333333)*x913);
IkReal x917=((25.0)*py*sj0);
IkReal x918=((25.0)*cj0*px);
IkReal x919=((25.0)*cj1*pz);
CheckValue<IkReal> x921=IKPowWithIntegerCheck(sj2,-1);
if(!x921.valid){
continue;
}
if( IKabs((x916*(x921.value)*(((((-6.5e-6)*cj3))+(((-1.0)*sj1*x915*x917))+(((-1.0)*sj1*x915*x918))+(((-3.7975)*x915))+(((25.0)*cj3*pz*sj1))+(((-1.0)*x914*x918))+(((-1.0)*x914*x917))+(((-1.0)*x915*x919)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x916*(((-3.7975)+(((-1.0)*x919))+(((-1.91025)*cj3))+(((-1.0)*sj1*x917))+(((-1.0)*sj1*x918)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x916*(x921.value)*(((((-6.5e-6)*cj3))+(((-1.0)*sj1*x915*x917))+(((-1.0)*sj1*x915*x918))+(((-3.7975)*x915))+(((25.0)*cj3*pz*sj1))+(((-1.0)*x914*x918))+(((-1.0)*x914*x917))+(((-1.0)*x915*x919))))))+IKsqr((x916*(((-3.7975)+(((-1.0)*x919))+(((-1.91025)*cj3))+(((-1.0)*sj1*x917))+(((-1.0)*sj1*x918))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x916*(x921.value)*(((((-6.5e-6)*cj3))+(((-1.0)*sj1*x915*x917))+(((-1.0)*sj1*x915*x918))+(((-3.7975)*x915))+(((25.0)*cj3*pz*sj1))+(((-1.0)*x914*x918))+(((-1.0)*x914*x917))+(((-1.0)*x915*x919))))), (x916*(((-3.7975)+(((-1.0)*x919))+(((-1.91025)*cj3))+(((-1.0)*sj1*x917))+(((-1.0)*sj1*x918))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x922=IKcos(j4);
IkReal x923=IKsin(j4);
IkReal x924=((0.12)*cj2);
IkReal x925=((0.07641)*sj3);
IkReal x926=(cj0*px);
IkReal x927=(py*sj0);
IkReal x928=((0.12)*sj2);
IkReal x929=(sj3*x922);
evalcond[0]=((0.1519)+((sj1*x927))+((sj1*x926))+((cj1*pz))+(((0.07641)*cj3))+(((0.12)*cj3*x922)));
evalcond[1]=((((-1.0)*sj2*x925))+(((-1.0)*x928*x929))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x923*x924)));
evalcond[2]=((2.6e-7)+(((-1.0)*cj2*x925))+(((-1.0)*x924*x929))+(((-1.0)*pz*sj1))+((x923*x928))+((cj1*x926))+((cj1*x927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x937=IKPowWithIntegerCheck(cj3,-1);
if(!x937.valid){
continue;
}
IkReal x930=x937.value;
IkReal x931=((25.0)*cj0);
IkReal x932=((0.333333333333333)*x930);
IkReal x933=(sj2*sj3);
IkReal x934=(sj1*x933);
IkReal x935=((25.0)*cj1*pz);
IkReal x936=((25.0)*py*sj0);
CheckValue<IkReal> x938=IKPowWithIntegerCheck(cj2,-1);
if(!x938.valid){
continue;
}
if( IKabs((x932*(x938.value)*(((((-25.0)*cj3*px*sj0))+(((3.7975)*x933))+((px*x931*x934))+((cj3*py*x931))+((x934*x936))+((x933*x935)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x932*(((-3.7975)+(((-1.0)*sj1*x936))+(((-1.0)*px*sj1*x931))+(((-1.91025)*cj3))+(((-1.0)*x935)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x932*(x938.value)*(((((-25.0)*cj3*px*sj0))+(((3.7975)*x933))+((px*x931*x934))+((cj3*py*x931))+((x934*x936))+((x933*x935))))))+IKsqr((x932*(((-3.7975)+(((-1.0)*sj1*x936))+(((-1.0)*px*sj1*x931))+(((-1.91025)*cj3))+(((-1.0)*x935))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x932*(x938.value)*(((((-25.0)*cj3*px*sj0))+(((3.7975)*x933))+((px*x931*x934))+((cj3*py*x931))+((x934*x936))+((x933*x935))))), (x932*(((-3.7975)+(((-1.0)*sj1*x936))+(((-1.0)*px*sj1*x931))+(((-1.91025)*cj3))+(((-1.0)*x935))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x939=IKcos(j4);
IkReal x940=IKsin(j4);
IkReal x941=((0.12)*cj2);
IkReal x942=((0.07641)*sj3);
IkReal x943=(cj0*px);
IkReal x944=(py*sj0);
IkReal x945=((0.12)*sj2);
IkReal x946=(sj3*x939);
evalcond[0]=((0.1519)+((sj1*x944))+((sj1*x943))+((cj1*pz))+(((0.07641)*cj3))+(((0.12)*cj3*x939)));
evalcond[1]=((((-1.0)*x945*x946))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x940*x941))+(((-1.0)*sj2*x942)));
evalcond[2]=((2.6e-7)+(((-1.0)*cj2*x942))+(((-1.0)*x941*x946))+((cj1*x943))+((cj1*x944))+(((-1.0)*pz*sj1))+((x940*x945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x947=((8.33333333333333)*sj2);
IkReal x948=(pz*sj1);
IkReal x949=(cj0*py);
IkReal x950=((25.0)*sj2);
IkReal x951=((8.33333333333333)*cj2);
IkReal x952=(px*sj0);
IkReal x953=((25.0)*cj2);
IkReal x954=(cj1*py*sj0);
IkReal x955=(cj0*cj1*px);
CheckValue<IkReal> x956=IKPowWithIntegerCheck(sj3,-1);
if(!x956.valid){
continue;
}
if( IKabs((((x947*x948))+((x949*x951))+(((-1.0)*x947*x955))+(((-1.0)*x947*x954))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*x951*x952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.333333333333333)*(x956.value)*(((((-1.91025)*sj3))+((x949*x950))+(((6.5e-6)*cj2))+(((-1.0)*x950*x952))+((x953*x954))+((x953*x955))+(((-1.0)*x948*x953)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x947*x948))+((x949*x951))+(((-1.0)*x947*x955))+(((-1.0)*x947*x954))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*x951*x952))))+IKsqr(((0.333333333333333)*(x956.value)*(((((-1.91025)*sj3))+((x949*x950))+(((6.5e-6)*cj2))+(((-1.0)*x950*x952))+((x953*x954))+((x953*x955))+(((-1.0)*x948*x953))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x947*x948))+((x949*x951))+(((-1.0)*x947*x955))+(((-1.0)*x947*x954))+(((-2.16666666666667e-6)*sj2))+(((-1.0)*x951*x952))), ((0.333333333333333)*(x956.value)*(((((-1.91025)*sj3))+((x949*x950))+(((6.5e-6)*cj2))+(((-1.0)*x950*x952))+((x953*x954))+((x953*x955))+(((-1.0)*x948*x953))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x957=IKcos(j4);
IkReal x958=IKsin(j4);
IkReal x959=((0.12)*cj2);
IkReal x960=((0.07641)*sj3);
IkReal x961=(cj0*px);
IkReal x962=(py*sj0);
IkReal x963=((0.12)*sj2);
IkReal x964=(sj3*x957);
evalcond[0]=((0.1519)+((cj1*pz))+(((0.07641)*cj3))+((sj1*x961))+((sj1*x962))+(((0.12)*cj3*x957)));
evalcond[1]=((((-1.0)*x963*x964))+(((-1.0)*sj2*x960))+(((-1.0)*x958*x959))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=((2.6e-7)+(((-1.0)*cj2*x960))+((cj1*x962))+((cj1*x961))+(((-1.0)*x959*x964))+(((-1.0)*pz*sj1))+((x958*x963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
static inline bool checkconsistency12(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 11; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-6*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[0]-Breal[1]) < tol && IKabs(Breal[0]*Breal[2]-Breal[3]) < tol && IKabs(Breal[1]*Breal[2]-Breal[4]) < tol && IKabs(Breal[2]*Breal[2]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol && IKabs(Breal[1]*Breal[5]-Breal[7]) < tol && IKabs(Breal[2]*Breal[5]-Breal[8]) < tol && IKabs(Breal[0]*Breal[8]-Breal[9]) < tol && IKabs(Breal[1]*Breal[8]-Breal[10]) < tol;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - up1 (dff92cbe1b548ce9a0a18df331afba70)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
